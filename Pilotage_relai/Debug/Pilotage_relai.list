
Pilotage_relai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067f8  08016fa4  08016fa4  00026fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d79c  0801d79c  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  0801d79c  0801d79c  0002d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d7a4  0801d7a4  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d7a4  0801d7a4  0002d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d7a8  0801d7a8  0002d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0801d7ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af20  20000204  0801d9b0  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b124  0801d9b0  0003b124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044bda  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000084f5  00000000  00000000  00074e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024f0  00000000  00000000  0007d308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002258  00000000  00000000  0007f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037422  00000000  00000000  00081a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f487  00000000  00000000  000b8e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110510  00000000  00000000  000e82f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f8809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a008  00000000  00000000  001f8884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016f8c 	.word	0x08016f8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08016f8c 	.word	0x08016f8c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SCB_CleanInvalidateDCache_by_Addr>:
  \details Cleans and invalidates D_Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80005e2:	2320      	movs	r3, #32
 80005e4:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e6:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80005ea:	e00b      	b.n	8000604 <SCB_CleanInvalidateDCache_by_Addr+0x34>
      SCB->DCCIMVAC = op_addr;
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <SCB_CleanInvalidateDCache_by_Addr+0x50>)
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4413      	add	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	2b00      	cmp	r3, #0
 8000608:	dcf0      	bgt.n	80005ec <SCB_CleanInvalidateDCache_by_Addr+0x1c>
 800060a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8000612:	bf00      	nop
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800062a:	2306      	movs	r3, #6
 800062c:	847b      	strh	r3, [r7, #34]	; 0x22
 800062e:	2306      	movs	r3, #6
 8000630:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	83fb      	strh	r3, [r7, #30]
 800063a:	2300      	movs	r3, #0
 800063c:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800063e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000642:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000648:	4bac      	ldr	r3, [pc, #688]	; (80008fc <EE_Init+0x2d8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800064e:	4bac      	ldr	r3, [pc, #688]	; (8000900 <EE_Init+0x2dc>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000658:	2306      	movs	r3, #6
 800065a:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000666:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800066a:	4293      	cmp	r3, r2
 800066c:	d061      	beq.n	8000732 <EE_Init+0x10e>
 800066e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000672:	4293      	cmp	r3, r2
 8000674:	d003      	beq.n	800067e <EE_Init+0x5a>
 8000676:	2b00      	cmp	r3, #0
 8000678:	f000 8108 	beq.w	800088c <EE_Init+0x268>
 800067c:	e1ad      	b.n	80009da <EE_Init+0x3b6>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800067e:	8c3b      	ldrh	r3, [r7, #32]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d11b      	bne.n	80006bc <EE_Init+0x98>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000684:	489d      	ldr	r0, [pc, #628]	; (80008fc <EE_Init+0x2d8>)
 8000686:	f000 f9c9 	bl	8000a1c <EE_VerifyPageFullyErased>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	f040 81ae 	bne.w	80009ee <EE_Init+0x3ca>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000692:	f107 0214 	add.w	r2, r7, #20
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f002 ff36 	bl	800350c <HAL_FLASHEx_Erase>
 80006a0:	4603      	mov	r3, r0
 80006a2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006a4:	7efb      	ldrb	r3, [r7, #27]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <EE_Init+0x8c>
          {
            return FlashStatus;
 80006aa:	7efb      	ldrb	r3, [r7, #27]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	e1a6      	b.n	80009fe <EE_Init+0x3da>
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 80006b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b4:	4891      	ldr	r0, [pc, #580]	; (80008fc <EE_Init+0x2d8>)
 80006b6:	f7ff ff8b 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
        if (FlashStatus != HAL_OK)
        {
          return FlashStatus;
        }
      }
      break;
 80006ba:	e198      	b.n	80009ee <EE_Init+0x3ca>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80006bc:	8c3b      	ldrh	r3, [r7, #32]
 80006be:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d12a      	bne.n	800071c <EE_Init+0xf8>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80006c6:	488d      	ldr	r0, [pc, #564]	; (80008fc <EE_Init+0x2d8>)
 80006c8:	f000 f9a8 	bl	8000a1c <EE_VerifyPageFullyErased>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d113      	bne.n	80006fa <EE_Init+0xd6>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006d2:	f107 0214 	add.w	r2, r7, #20
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ff16 	bl	800350c <HAL_FLASHEx_Erase>
 80006e0:	4603      	mov	r3, r0
 80006e2:	76fb      	strb	r3, [r7, #27]
          if (FlashStatus != HAL_OK)
 80006e4:	7efb      	ldrb	r3, [r7, #27]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <EE_Init+0xcc>
            return FlashStatus;
 80006ea:	7efb      	ldrb	r3, [r7, #27]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	e186      	b.n	80009fe <EE_Init+0x3da>
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	4881      	ldr	r0, [pc, #516]	; (80008fc <EE_Init+0x2d8>)
 80006f6:	f7ff ff6b 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	497f      	ldr	r1, [pc, #508]	; (8000900 <EE_Init+0x2dc>)
 8000704:	2001      	movs	r0, #1
 8000706:	f002 fd5b 	bl	80031c0 <HAL_FLASH_Program>
 800070a:	4603      	mov	r3, r0
 800070c:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 800070e:	7efb      	ldrb	r3, [r7, #27]
 8000710:	2b00      	cmp	r3, #0
 8000712:	f000 816c 	beq.w	80009ee <EE_Init+0x3ca>
          return FlashStatus;
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	b29b      	uxth	r3, r3
 800071a:	e170      	b.n	80009fe <EE_Init+0x3da>
        FlashStatus = EE_Format();
 800071c:	f000 fa10 	bl	8000b40 <EE_Format>
 8000720:	4603      	mov	r3, r0
 8000722:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 8000724:	7efb      	ldrb	r3, [r7, #27]
 8000726:	2b00      	cmp	r3, #0
 8000728:	f000 8161 	beq.w	80009ee <EE_Init+0x3ca>
          return FlashStatus;
 800072c:	7efb      	ldrb	r3, [r7, #27]
 800072e:	b29b      	uxth	r3, r3
 8000730:	e165      	b.n	80009fe <EE_Init+0x3da>

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000732:	8c3b      	ldrh	r3, [r7, #32]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d168      	bne.n	800080a <EE_Init+0x1e6>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000738:	2300      	movs	r3, #0
 800073a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800073c:	e030      	b.n	80007a0 <EE_Init+0x17c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800073e:	4b71      	ldr	r3, [pc, #452]	; (8000904 <EE_Init+0x2e0>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b29a      	uxth	r2, r3
 8000744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000746:	4970      	ldr	r1, [pc, #448]	; (8000908 <EE_Init+0x2e4>)
 8000748:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800074c:	429a      	cmp	r2, r3
 800074e:	d101      	bne.n	8000754 <EE_Init+0x130>
          {
            x = VarIdx;
 8000750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000752:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8000754:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000756:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d01d      	beq.n	800079a <EE_Init+0x176>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800075e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000760:	4a69      	ldr	r2, [pc, #420]	; (8000908 <EE_Init+0x2e4>)
 8000762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000766:	4969      	ldr	r1, [pc, #420]	; (800090c <EE_Init+0x2e8>)
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f97d 	bl	8000a68 <EE_ReadVariable>
 800076e:	4603      	mov	r3, r0
 8000770:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000772:	8bbb      	ldrh	r3, [r7, #28]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d010      	beq.n	800079a <EE_Init+0x176>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800077a:	4a63      	ldr	r2, [pc, #396]	; (8000908 <EE_Init+0x2e4>)
 800077c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000780:	4b62      	ldr	r3, [pc, #392]	; (800090c <EE_Init+0x2e8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	4610      	mov	r0, r2
 8000788:	f000 fa7c 	bl	8000c84 <EE_VerifyPageFullWriteVariable>
 800078c:	4603      	mov	r3, r0
 800078e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000790:	8bfb      	ldrh	r3, [r7, #30]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <EE_Init+0x176>
              {
                return EepromStatus;
 8000796:	8bfb      	ldrh	r3, [r7, #30]
 8000798:	e131      	b.n	80009fe <EE_Init+0x3da>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800079a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800079c:	3301      	adds	r3, #1
 800079e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d9cb      	bls.n	800073e <EE_Init+0x11a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	4953      	ldr	r1, [pc, #332]	; (80008fc <EE_Init+0x2d8>)
 80007b0:	2001      	movs	r0, #1
 80007b2:	f002 fd05 	bl	80031c0 <HAL_FLASH_Program>
 80007b6:	4603      	mov	r3, r0
 80007b8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007ba:	7efb      	ldrb	r3, [r7, #27]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <EE_Init+0x1a2>
        {
          return FlashStatus;
 80007c0:	7efb      	ldrb	r3, [r7, #27]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	e11b      	b.n	80009fe <EE_Init+0x3da>
        }
        pEraseInit.Sector = PAGE1_ID;
 80007c6:	2307      	movs	r3, #7
 80007c8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80007d2:	484b      	ldr	r0, [pc, #300]	; (8000900 <EE_Init+0x2dc>)
 80007d4:	f000 f922 	bl	8000a1c <EE_VerifyPageFullyErased>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f040 8109 	bne.w	80009f2 <EE_Init+0x3ce>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80007e0:	f107 0214 	add.w	r2, r7, #20
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fe8f 	bl	800350c <HAL_FLASHEx_Erase>
 80007ee:	4603      	mov	r3, r0
 80007f0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80007f2:	7efb      	ldrb	r3, [r7, #27]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <EE_Init+0x1da>
          {
            return FlashStatus;
 80007f8:	7efb      	ldrb	r3, [r7, #27]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	e0ff      	b.n	80009fe <EE_Init+0x3da>
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 80007fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000802:	483f      	ldr	r0, [pc, #252]	; (8000900 <EE_Init+0x2dc>)
 8000804:	f7ff fee4 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
        if (FlashStatus != HAL_OK)
        {
          return FlashStatus;
        }
      }
      break;
 8000808:	e0f3      	b.n	80009f2 <EE_Init+0x3ce>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800080a:	8c3b      	ldrh	r3, [r7, #32]
 800080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000810:	4293      	cmp	r3, r2
 8000812:	d130      	bne.n	8000876 <EE_Init+0x252>
        pEraseInit.Sector = PAGE1_ID;
 8000814:	2307      	movs	r3, #7
 8000816:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000820:	4837      	ldr	r0, [pc, #220]	; (8000900 <EE_Init+0x2dc>)
 8000822:	f000 f8fb 	bl	8000a1c <EE_VerifyPageFullyErased>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d113      	bne.n	8000854 <EE_Init+0x230>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f002 fe69 	bl	800350c <HAL_FLASHEx_Erase>
 800083a:	4603      	mov	r3, r0
 800083c:	76fb      	strb	r3, [r7, #27]
          if (FlashStatus != HAL_OK)
 800083e:	7efb      	ldrb	r3, [r7, #27]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <EE_Init+0x226>
            return FlashStatus;
 8000844:	7efb      	ldrb	r3, [r7, #27]
 8000846:	b29b      	uxth	r3, r3
 8000848:	e0d9      	b.n	80009fe <EE_Init+0x3da>
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	482c      	ldr	r0, [pc, #176]	; (8000900 <EE_Init+0x2dc>)
 8000850:	f7ff febe 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	4927      	ldr	r1, [pc, #156]	; (80008fc <EE_Init+0x2d8>)
 800085e:	2001      	movs	r0, #1
 8000860:	f002 fcae 	bl	80031c0 <HAL_FLASH_Program>
 8000864:	4603      	mov	r3, r0
 8000866:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 8000868:	7efb      	ldrb	r3, [r7, #27]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f000 80c1 	beq.w	80009f2 <EE_Init+0x3ce>
          return FlashStatus;
 8000870:	7efb      	ldrb	r3, [r7, #27]
 8000872:	b29b      	uxth	r3, r3
 8000874:	e0c3      	b.n	80009fe <EE_Init+0x3da>
        FlashStatus = EE_Format();
 8000876:	f000 f963 	bl	8000b40 <EE_Format>
 800087a:	4603      	mov	r3, r0
 800087c:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 800087e:	7efb      	ldrb	r3, [r7, #27]
 8000880:	2b00      	cmp	r3, #0
 8000882:	f000 80b6 	beq.w	80009f2 <EE_Init+0x3ce>
          return FlashStatus;
 8000886:	7efb      	ldrb	r3, [r7, #27]
 8000888:	b29b      	uxth	r3, r3
 800088a:	e0b8      	b.n	80009fe <EE_Init+0x3da>

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800088c:	8c3b      	ldrh	r3, [r7, #32]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10a      	bne.n	80008a8 <EE_Init+0x284>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000892:	f000 f955 	bl	8000b40 <EE_Format>
 8000896:	4603      	mov	r3, r0
 8000898:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800089a:	7efb      	ldrb	r3, [r7, #27]
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 80aa 	beq.w	80009f6 <EE_Init+0x3d2>
        {
          return FlashStatus;
 80008a2:	7efb      	ldrb	r3, [r7, #27]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	e0aa      	b.n	80009fe <EE_Init+0x3da>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80008a8:	8c3b      	ldrh	r3, [r7, #32]
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d121      	bne.n	80008f6 <EE_Init+0x2d2>
      {
        pEraseInit.Sector = PAGE1_ID;
 80008b2:	2307      	movs	r3, #7
 80008b4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80008ba:	2302      	movs	r3, #2
 80008bc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <EE_Init+0x2dc>)
 80008c0:	f000 f8ac 	bl	8000a1c <EE_VerifyPageFullyErased>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8095 	bne.w	80009f6 <EE_Init+0x3d2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008cc:	f107 0214 	add.w	r2, r7, #20
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fe19 	bl	800350c <HAL_FLASHEx_Erase>
 80008da:	4603      	mov	r3, r0
 80008dc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80008de:	7efb      	ldrb	r3, [r7, #27]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <EE_Init+0x2c6>
          {
            return FlashStatus;
 80008e4:	7efb      	ldrb	r3, [r7, #27]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	e089      	b.n	80009fe <EE_Init+0x3da>
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 80008ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <EE_Init+0x2dc>)
 80008f0:	f7ff fe6e 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
            return FlashStatus;
          }
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
        }
      }
      break;
 80008f4:	e07f      	b.n	80009f6 <EE_Init+0x3d2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008fa:	e03a      	b.n	8000972 <EE_Init+0x34e>
 80008fc:	08080000 	.word	0x08080000
 8000900:	080c0000 	.word	0x080c0000
 8000904:	08080006 	.word	0x08080006
 8000908:	20000000 	.word	0x20000000
 800090c:	20000220 	.word	0x20000220
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000910:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <EE_Init+0x3e4>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	b29a      	uxth	r2, r3
 8000916:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000918:	493c      	ldr	r1, [pc, #240]	; (8000a0c <EE_Init+0x3e8>)
 800091a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800091e:	429a      	cmp	r2, r3
 8000920:	d101      	bne.n	8000926 <EE_Init+0x302>
            x = VarIdx;
 8000922:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000924:	84bb      	strh	r3, [r7, #36]	; 0x24
          if (VarIdx != x)
 8000926:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000928:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800092c:	429a      	cmp	r2, r3
 800092e:	d01d      	beq.n	800096c <EE_Init+0x348>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000932:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <EE_Init+0x3e8>)
 8000934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000938:	4935      	ldr	r1, [pc, #212]	; (8000a10 <EE_Init+0x3ec>)
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f894 	bl	8000a68 <EE_ReadVariable>
 8000940:	4603      	mov	r3, r0
 8000942:	83bb      	strh	r3, [r7, #28]
            if (ReadStatus != 0x1)
 8000944:	8bbb      	ldrh	r3, [r7, #28]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d010      	beq.n	800096c <EE_Init+0x348>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800094a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800094c:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <EE_Init+0x3e8>)
 800094e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <EE_Init+0x3ec>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	4610      	mov	r0, r2
 800095a:	f000 f993 	bl	8000c84 <EE_VerifyPageFullWriteVariable>
 800095e:	4603      	mov	r3, r0
 8000960:	83fb      	strh	r3, [r7, #30]
              if (EepromStatus != HAL_OK)
 8000962:	8bfb      	ldrh	r3, [r7, #30]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <EE_Init+0x348>
                return EepromStatus;
 8000968:	8bfb      	ldrh	r3, [r7, #30]
 800096a:	e048      	b.n	80009fe <EE_Init+0x3da>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800096c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800096e:	3301      	adds	r3, #1
 8000970:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000974:	2b02      	cmp	r3, #2
 8000976:	d9cb      	bls.n	8000910 <EE_Init+0x2ec>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	f04f 0300 	mov.w	r3, #0
 8000980:	4924      	ldr	r1, [pc, #144]	; (8000a14 <EE_Init+0x3f0>)
 8000982:	2001      	movs	r0, #1
 8000984:	f002 fc1c 	bl	80031c0 <HAL_FLASH_Program>
 8000988:	4603      	mov	r3, r0
 800098a:	76fb      	strb	r3, [r7, #27]
        if (FlashStatus != HAL_OK)
 800098c:	7efb      	ldrb	r3, [r7, #27]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <EE_Init+0x374>
          return FlashStatus;
 8000992:	7efb      	ldrb	r3, [r7, #27]
 8000994:	b29b      	uxth	r3, r3
 8000996:	e032      	b.n	80009fe <EE_Init+0x3da>
        pEraseInit.Sector = PAGE0_ID;
 8000998:	2306      	movs	r3, #6
 800099a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80009a4:	481c      	ldr	r0, [pc, #112]	; (8000a18 <EE_Init+0x3f4>)
 80009a6:	f000 f839 	bl	8000a1c <EE_VerifyPageFullyErased>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d122      	bne.n	80009f6 <EE_Init+0x3d2>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80009b0:	f107 0214 	add.w	r2, r7, #20
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fda7 	bl	800350c <HAL_FLASHEx_Erase>
 80009be:	4603      	mov	r3, r0
 80009c0:	76fb      	strb	r3, [r7, #27]
          if (FlashStatus != HAL_OK)
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <EE_Init+0x3aa>
            return FlashStatus;
 80009c8:	7efb      	ldrb	r3, [r7, #27]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	e017      	b.n	80009fe <EE_Init+0x3da>
          SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <EE_Init+0x3f4>)
 80009d4:	f7ff fdfc 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
      break;
 80009d8:	e00d      	b.n	80009f6 <EE_Init+0x3d2>

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80009da:	f000 f8b1 	bl	8000b40 <EE_Format>
 80009de:	4603      	mov	r3, r0
 80009e0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <EE_Init+0x3d6>
      {
        return FlashStatus;
 80009e8:	7efb      	ldrb	r3, [r7, #27]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	e007      	b.n	80009fe <EE_Init+0x3da>
      break;
 80009ee:	bf00      	nop
 80009f0:	e004      	b.n	80009fc <EE_Init+0x3d8>
      break;
 80009f2:	bf00      	nop
 80009f4:	e002      	b.n	80009fc <EE_Init+0x3d8>
      break;
 80009f6:	bf00      	nop
 80009f8:	e000      	b.n	80009fc <EE_Init+0x3d8>
      }
      break;
 80009fa:	bf00      	nop
  }

  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	080c0006 	.word	0x080c0006
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000220 	.word	0x20000220
 8000a14:	080c0000 	.word	0x080c0000
 8000a18:	08080000 	.word	0x08080000

08000a1c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000a28:	f245 5355 	movw	r3, #21845	; 0x5555
 8000a2c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000a2e:	e00d      	b.n	8000a4c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8000a36:	897b      	ldrh	r3, [r7, #10]
 8000a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d002      	beq.n	8000a46 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]

      break;
 8000a44:	e006      	b.n	8000a54 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <EE_VerifyPageFullyErased+0x48>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d9ed      	bls.n	8000a30 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	b29b      	uxth	r3, r3
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	080bffff 	.word	0x080bffff

08000a68 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000a78:	f245 5355 	movw	r3, #21845	; 0x5555
 8000a7c:	81bb      	strh	r3, [r7, #12]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <EE_ReadVariable+0x8c>)
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <EE_ReadVariable+0x8c>)
 8000a88:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f8b4 	bl	8000bf8 <EE_FindValidPage>
 8000a90:	4603      	mov	r3, r0
 8000a92:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	2bab      	cmp	r3, #171	; 0xab
 8000a98:	d101      	bne.n	8000a9e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000a9a:	23ab      	movs	r3, #171	; 0xab
 8000a9c:	e025      	b.n	8000aea <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000a9e:	89fa      	ldrh	r2, [r7, #14]
 8000aa0:	f241 0310 	movw	r3, #4112	; 0x1010
 8000aa4:	4413      	add	r3, r2
 8000aa6:	03db      	lsls	r3, r3, #15
 8000aa8:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	3301      	adds	r3, #1
 8000aae:	03da      	lsls	r2, r3, #15
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <EE_ReadVariable+0x90>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000ab6:	e012      	b.n	8000ade <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000abe:	89ba      	ldrh	r2, [r7, #12]
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d108      	bne.n	8000ad8 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3b02      	subs	r3, #2
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	82fb      	strh	r3, [r7, #22]

      break;
 8000ad6:	e007      	b.n	8000ae8 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	3b04      	subs	r3, #4
 8000adc:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8e7      	bhi.n	8000ab8 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000ae8:	8afb      	ldrh	r3, [r7, #22]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	08080000 	.word	0x08080000
 8000af8:	0807fffe 	.word	0x0807fffe

08000afc <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	80fb      	strh	r3, [r7, #6]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000b10:	88ba      	ldrh	r2, [r7, #4]
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f8b4 	bl	8000c84 <EE_VerifyPageFullWriteVariable>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	2b80      	cmp	r3, #128	; 0x80
 8000b24:	d107      	bne.n	8000b36 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000b26:	88ba      	ldrh	r2, [r7, #4]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f907 	bl	8000d40 <EE_PageTransfer>
 8000b32:	4603      	mov	r3, r0
 8000b34:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000b36:	89fb      	ldrh	r3, [r7, #14]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]
  uint32_t SectorError = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8000b52:	2306      	movs	r3, #6
 8000b54:	607b      	str	r3, [r7, #4]
  pEraseInit.NbSectors = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000b5e:	4824      	ldr	r0, [pc, #144]	; (8000bf0 <EE_Format+0xb0>)
 8000b60:	f7ff ff5c 	bl	8000a1c <EE_VerifyPageFullyErased>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d112      	bne.n	8000b90 <EE_Format+0x50>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000b6a:	f107 0210 	add.w	r2, r7, #16
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fcca 	bl	800350c <HAL_FLASHEx_Erase>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <EE_Format+0x46>
    {
      return FlashStatus;
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
 8000b84:	e02f      	b.n	8000be6 <EE_Format+0xa6>
    }
    SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE0_BASE_ADDRESS,PAGE_SIZE);
 8000b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8a:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <EE_Format+0xb0>)
 8000b8c:	f7ff fd20 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	4915      	ldr	r1, [pc, #84]	; (8000bf0 <EE_Format+0xb0>)
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f002 fb10 	bl	80031c0 <HAL_FLASH_Program>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <EE_Format+0x6e>
  {
    return FlashStatus;
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	e01b      	b.n	8000be6 <EE_Format+0xa6>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	607b      	str	r3, [r7, #4]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <EE_Format+0xb4>)
 8000bb4:	f7ff ff32 	bl	8000a1c <EE_VerifyPageFullyErased>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d112      	bne.n	8000be4 <EE_Format+0xa4>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000bbe:	f107 0210 	add.w	r2, r7, #16
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fca0 	bl	800350c <HAL_FLASHEx_Erase>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <EE_Format+0x9a>
    {
      return FlashStatus;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	e005      	b.n	8000be6 <EE_Format+0xa6>
    }
    SCB_CleanInvalidateDCache_by_Addr((uint32_t*)PAGE1_BASE_ADDRESS,PAGE_SIZE);
 8000bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <EE_Format+0xb4>)
 8000be0:	f7ff fcf6 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>
  }
  
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08080000 	.word	0x08080000
 8000bf4:	080c0000 	.word	0x080c0000

08000bf8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000c02:	2306      	movs	r3, #6
 8000c04:	81fb      	strh	r3, [r7, #14]
 8000c06:	2306      	movs	r3, #6
 8000c08:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <EE_FindValidPage+0x84>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <EE_FindValidPage+0x88>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d01b      	beq.n	8000c54 <EE_FindValidPage+0x5c>
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d125      	bne.n	8000c6c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000c20:	89bb      	ldrh	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d108      	bne.n	8000c38 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000c30:	2300      	movs	r3, #0
 8000c32:	e01c      	b.n	8000c6e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000c34:	2301      	movs	r3, #1
 8000c36:	e01a      	b.n	8000c6e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000c38:	89fb      	ldrh	r3, [r7, #14]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d108      	bne.n	8000c50 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000c3e:	89bb      	ldrh	r3, [r7, #12]
 8000c40:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e010      	b.n	8000c6e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e00e      	b.n	8000c6e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000c50:	23ab      	movs	r3, #171	; 0xab
 8000c52:	e00c      	b.n	8000c6e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e007      	b.n	8000c6e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000c5e:	89bb      	ldrh	r3, [r7, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000c64:	2301      	movs	r3, #1
 8000c66:	e002      	b.n	8000c6e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000c68:	23ab      	movs	r3, #171	; 0xab
 8000c6a:	e000      	b.n	8000c6e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000c6c:	2300      	movs	r3, #0
  }
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	08080000 	.word	0x08080000
 8000c80:	080c0000 	.word	0x080c0000

08000c84 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	80fb      	strh	r3, [r7, #6]
 8000c90:	4613      	mov	r3, r2
 8000c92:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <EE_VerifyPageFullWriteVariable+0xb0>)
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <EE_VerifyPageFullWriteVariable+0xb4>)
 8000ca2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ffa7 	bl	8000bf8 <EE_FindValidPage>
 8000caa:	4603      	mov	r3, r0
 8000cac:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	2bab      	cmp	r3, #171	; 0xab
 8000cb2:	d101      	bne.n	8000cb8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000cb4:	23ab      	movs	r3, #171	; 0xab
 8000cb6:	e039      	b.n	8000d2c <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000cb8:	8a3a      	ldrh	r2, [r7, #16]
 8000cba:	f241 0310 	movw	r3, #4112	; 0x1010
 8000cbe:	4413      	add	r3, r2
 8000cc0:	03db      	lsls	r3, r3, #15
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000cc4:	8a3b      	ldrh	r3, [r7, #16]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	03da      	lsls	r2, r3, #15
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <EE_VerifyPageFullWriteVariable+0xb8>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000cd0:	e027      	b.n	8000d22 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cda:	d11f      	bne.n	8000d1c <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	f04f 0400 	mov.w	r4, #0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	6979      	ldr	r1, [r7, #20]
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f002 fa69 	bl	80031c0 <HAL_FLASH_Program>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000cf2:	7cfb      	ldrb	r3, [r7, #19]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 8000cf8:	7cfb      	ldrb	r3, [r7, #19]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	e016      	b.n	8000d2c <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	1c99      	adds	r1, r3, #2
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	f04f 0400 	mov.w	r4, #0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f002 fa57 	bl	80031c0 <HAL_FLASH_Program>
 8000d12:	4603      	mov	r3, r0
 8000d14:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000d16:	7cfb      	ldrb	r3, [r7, #19]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	e007      	b.n	8000d2c <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3304      	adds	r3, #4
 8000d20:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3d3      	bcc.n	8000cd2 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000d2a:	2380      	movs	r3, #128	; 0x80
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	08080000 	.word	0x08080000
 8000d38:	08088000 	.word	0x08088000
 8000d3c:	0807ffff 	.word	0x0807ffff

08000d40 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	80fb      	strh	r3, [r7, #6]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000d56:	4b5a      	ldr	r3, [pc, #360]	; (8000ec0 <EE_PageTransfer+0x180>)
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t OldPageAddress = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t OldPageId=0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	843b      	strh	r3, [r7, #32]
 8000d66:	2300      	movs	r3, #0
 8000d68:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	83fb      	strh	r3, [r7, #30]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	83bb      	strh	r3, [r7, #28]
  uint32_t SectorError = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ff3e 	bl	8000bf8 <EE_FindValidPage>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	843b      	strh	r3, [r7, #32]

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000d80:	8c3b      	ldrh	r3, [r7, #32]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d106      	bne.n	8000d94 <EE_PageTransfer+0x54>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000d86:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <EE_PageTransfer+0x180>)
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page address  where variable will be moved from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 8000d8a:	4b4e      	ldr	r3, [pc, #312]	; (8000ec4 <EE_PageTransfer+0x184>)
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d92:	e00b      	b.n	8000dac <EE_PageTransfer+0x6c>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000d94:	8c3b      	ldrh	r3, [r7, #32]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d106      	bne.n	8000da8 <EE_PageTransfer+0x68>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <EE_PageTransfer+0x184>)
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page address  where variable will be moved from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 8000d9e:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <EE_PageTransfer+0x180>)
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000da2:	2306      	movs	r3, #6
 8000da4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000da6:	e001      	b.n	8000dac <EE_PageTransfer+0x6c>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000da8:	23ab      	movs	r3, #171	; 0xab
 8000daa:	e084      	b.n	8000eb6 <EE_PageTransfer+0x176>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000dac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000db6:	2001      	movs	r0, #1
 8000db8:	f002 fa02 	bl	80031c0 <HAL_FLASH_Program>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <EE_PageTransfer+0x92>
  {
    return FlashStatus;
 8000dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	e071      	b.n	8000eb6 <EE_PageTransfer+0x176>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000dd2:	88ba      	ldrh	r2, [r7, #4]
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff53 	bl	8000c84 <EE_VerifyPageFullWriteVariable>
 8000dde:	4603      	mov	r3, r0
 8000de0:	83fb      	strh	r3, [r7, #30]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000de2:	8bfb      	ldrh	r3, [r7, #30]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <EE_PageTransfer+0xac>
  {
    return EepromStatus;
 8000de8:	8bfb      	ldrh	r3, [r7, #30]
 8000dea:	e064      	b.n	8000eb6 <EE_PageTransfer+0x176>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000df0:	e027      	b.n	8000e42 <EE_PageTransfer+0x102>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000df4:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <EE_PageTransfer+0x188>)
 8000df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfa:	88fa      	ldrh	r2, [r7, #6]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d01d      	beq.n	8000e3c <EE_PageTransfer+0xfc>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e02:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <EE_PageTransfer+0x188>)
 8000e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e08:	4930      	ldr	r1, [pc, #192]	; (8000ecc <EE_PageTransfer+0x18c>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe2c 	bl	8000a68 <EE_ReadVariable>
 8000e10:	4603      	mov	r3, r0
 8000e12:	83bb      	strh	r3, [r7, #28]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000e14:	8bbb      	ldrh	r3, [r7, #28]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d010      	beq.n	8000e3c <EE_PageTransfer+0xfc>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <EE_PageTransfer+0x188>)
 8000e1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <EE_PageTransfer+0x18c>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	4610      	mov	r0, r2
 8000e2a:	f7ff ff2b 	bl	8000c84 <EE_VerifyPageFullWriteVariable>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	83fb      	strh	r3, [r7, #30]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000e32:	8bfb      	ldrh	r3, [r7, #30]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <EE_PageTransfer+0xfc>
        {
          return EepromStatus;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	e03c      	b.n	8000eb6 <EE_PageTransfer+0x176>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e3e:	3301      	adds	r3, #1
 8000e40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d9d4      	bls.n	8000df2 <EE_PageTransfer+0xb2>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000e4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e4e:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000e54:	2302      	movs	r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000e58:	f107 0218 	add.w	r2, r7, #24
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 fb52 	bl	800350c <HAL_FLASHEx_Erase>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <EE_PageTransfer+0x13e>
  {
    return FlashStatus;
 8000e76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	e01b      	b.n	8000eb6 <EE_PageTransfer+0x176>
  }
  SCB_CleanInvalidateDCache_by_Addr((uint32_t*)OldPageAddress,PAGE_SIZE);
 8000e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fba3 	bl	80005d0 <SCB_CleanInvalidateDCache_by_Addr>

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e94:	2001      	movs	r0, #1
 8000e96:	f002 f993 	bl	80031c0 <HAL_FLASH_Program>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <EE_PageTransfer+0x170>
  {
    return FlashStatus;
 8000ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	e002      	b.n	8000eb6 <EE_PageTransfer+0x176>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eb4:	b29b      	uxth	r3, r3
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3730      	adds	r7, #48	; 0x30
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	08080000 	.word	0x08080000
 8000ec4:	080c0000 	.word	0x080c0000
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000220 	.word	0x20000220

08000ed0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <vApplicationGetIdleTaskMemory+0x30>)
 8000ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000224 	.word	0x20000224
 8000f00:	20000278 	.word	0x20000278

08000f04 <__NVIC_SystemReset>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <__NVIC_SystemReset+0x20>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f14:	4903      	ldr	r1, [pc, #12]	; (8000f24 <__NVIC_SystemReset+0x20>)
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_SystemReset+0x24>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
 8000f1c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <__NVIC_SystemReset+0x1c>
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	05fa0004 	.word	0x05fa0004

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f001 f822 	bl	8001f7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f825 	bl	8000f84 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_FLASH_Unlock();
 8000f3a:	f002 f99d 	bl	8003278 <HAL_FLASH_Unlock>
  EE_Init();
 8000f3e:	f7ff fb71 	bl	8000624 <EE_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f90d 	bl	8001160 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f46:	f000 f8ad 	bl	80010a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f4a:	f000 f8db 	bl	8001104 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000f4e:	f005 f939 	bl	80061c4 <MX_LWIP_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HTTP */
  osThreadDef(HTTP, StartDefaultTask, osPriorityNormal, 0, 2048);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <main+0x50>)
 8000f54:	1d3c      	adds	r4, r7, #4
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HTTPHandle = osThreadCreate(osThread(HTTP), NULL);
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 fea1 	bl	8006cb0 <osThreadCreate>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <main+0x54>)
 8000f72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f74:	f005 fe85 	bl	8006c82 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <main+0x4c>
 8000f7a:	bf00      	nop
 8000f7c:	08016fac 	.word	0x08016fac
 8000f80:	20004808 	.word	0x20004808

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b4      	sub	sp, #208	; 0xd0
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f8e:	2230      	movs	r2, #48	; 0x30
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f014 fe60 	bl	8015c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2284      	movs	r2, #132	; 0x84
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f014 fe51 	bl	8015c58 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000fb6:	f002 fe9b 	bl	8003cf0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b37      	ldr	r3, [pc, #220]	; (8001098 <SystemClock_Config+0x114>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a36      	ldr	r2, [pc, #216]	; (8001098 <SystemClock_Config+0x114>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <SystemClock_Config+0x114>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <SystemClock_Config+0x118>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fda:	4a30      	ldr	r2, [pc, #192]	; (800109c <SystemClock_Config+0x118>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <SystemClock_Config+0x118>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001010:	2348      	movs	r3, #72	; 0x48
 8001012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800101c:	2303      	movs	r3, #3
 800101e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fe72 	bl	8003d10 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001032:	f000 fd49 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001056:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f8c7 	bl	80041f0 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001068:	f000 fd2e 	bl	8001ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <SystemClock_Config+0x11c>)
 800106e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fadc 	bl	800463c <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800108a:	f000 fd1d 	bl	8001ac8 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	37d0      	adds	r7, #208	; 0xd0
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000
 80010a0:	00200100 	.word	0x00200100

080010a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <MX_USART3_UART_Init+0x5c>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010e8:	f004 f8fc 	bl	80052e4 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010f2:	f000 fce9 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20004364 	.word	0x20004364
 8001100:	40004800 	.word	0x40004800

08001104 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	2206      	movs	r2, #6
 8001114:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001118:	2202      	movs	r2, #2
 800111a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	2202      	movs	r2, #2
 8001126:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113c:	2201      	movs	r2, #1
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001148:	f002 fc96 	bl	8003a78 <HAL_PCD_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 fcb9 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200043e4 	.word	0x200043e4

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b61      	ldr	r3, [pc, #388]	; (80012fc <MX_GPIO_Init+0x19c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a60      	ldr	r2, [pc, #384]	; (80012fc <MX_GPIO_Init+0x19c>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b5e      	ldr	r3, [pc, #376]	; (80012fc <MX_GPIO_Init+0x19c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	4b5b      	ldr	r3, [pc, #364]	; (80012fc <MX_GPIO_Init+0x19c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a5a      	ldr	r2, [pc, #360]	; (80012fc <MX_GPIO_Init+0x19c>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b58      	ldr	r3, [pc, #352]	; (80012fc <MX_GPIO_Init+0x19c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b55      	ldr	r3, [pc, #340]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a54      	ldr	r2, [pc, #336]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b52      	ldr	r3, [pc, #328]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b4f      	ldr	r3, [pc, #316]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	4b49      	ldr	r3, [pc, #292]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a48      	ldr	r2, [pc, #288]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b46      	ldr	r3, [pc, #280]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	4b43      	ldr	r3, [pc, #268]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a42      	ldr	r2, [pc, #264]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <MX_GPIO_Init+0x19c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R8_Pin|R4_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f248 0110 	movw	r1, #32784	; 0x8010
 800120c:	483c      	ldr	r0, [pc, #240]	; (8001300 <MX_GPIO_Init+0x1a0>)
 800120e:	f002 fc01 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f244 0181 	movw	r1, #16513	; 0x4081
 8001218:	483a      	ldr	r0, [pc, #232]	; (8001304 <MX_GPIO_Init+0x1a4>)
 800121a:	f002 fbfb 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|R2_Pin|R7_Pin|R6_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f249 0128 	movw	r1, #36904	; 0x9028
 8001224:	4837      	ldr	r0, [pc, #220]	; (8001304 <MX_GPIO_Init+0x1a4>)
 8001226:	f002 fbf5 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	4836      	ldr	r0, [pc, #216]	; (8001308 <MX_GPIO_Init+0x1a8>)
 8001230:	f002 fbf0 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R5_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	21c0      	movs	r1, #192	; 0xc0
 8001238:	4834      	ldr	r0, [pc, #208]	; (800130c <MX_GPIO_Init+0x1ac>)
 800123a:	f002 fbeb 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001244:	4b32      	ldr	r3, [pc, #200]	; (8001310 <MX_GPIO_Init+0x1b0>)
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	482e      	ldr	r0, [pc, #184]	; (800130c <MX_GPIO_Init+0x1ac>)
 8001254:	f002 fa34 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R8_Pin R4_Pin */
  GPIO_InitStruct.Pin = R8_Pin|R4_Pin;
 8001258:	f248 0310 	movw	r3, #32784	; 0x8010
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4823      	ldr	r0, [pc, #140]	; (8001300 <MX_GPIO_Init+0x1a0>)
 8001272:	f002 fa25 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin R3_Pin LD3_Pin R2_Pin 
                           R7_Pin R6_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|R3_Pin|LD3_Pin|R2_Pin 
 8001276:	f24d 03a9 	movw	r3, #53417	; 0xd0a9
 800127a:	61fb      	str	r3, [r7, #28]
                          |R7_Pin|R6_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	481d      	ldr	r0, [pc, #116]	; (8001304 <MX_GPIO_Init+0x1a4>)
 8001290:	f002 fa16 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001294:	2340      	movs	r3, #64	; 0x40
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4817      	ldr	r0, [pc, #92]	; (8001308 <MX_GPIO_Init+0x1a8>)
 80012ac:	f002 fa08 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <MX_GPIO_Init+0x1a8>)
 80012c4:	f002 f9fc 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R5_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R5_Pin;
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_GPIO_Init+0x1ac>)
 80012e0:	f002 f9ee 	bl	80036c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2105      	movs	r1, #5
 80012e8:	2028      	movs	r0, #40	; 0x28
 80012ea:	f000 ff4d 	bl	8002188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ee:	2028      	movs	r0, #40	; 0x28
 80012f0:	f000 ff66 	bl	80021c0 <HAL_NVIC_EnableIRQ>

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40021800 	.word	0x40021800
 800130c:	40020800 	.word	0x40020800
 8001310:	10210000 	.word	0x10210000

08001314 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
	/* Callback (interrupt on GPIO) */
	if (GPIO_Pin==USER_Btn_Pin)
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001324:	d111      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x36>
	{
	/* Mass Erase on sector 5,6,7 in order to recover factory configuration */
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Sector        = FLASH_SECTOR_5;
 800132e:	2305      	movs	r3, #5
 8001330:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors     = 3;
 8001332:	2303      	movs	r3, #3
 8001334:	61bb      	str	r3, [r7, #24]
	HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f002 f8e3 	bl	800350c <HAL_FLASHEx_Erase>
	/* Reboot the board */
	NVIC_SystemReset();
 8001346:	f7ff fddd 	bl	8000f04 <__NVIC_SystemReset>
	}
}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <http_server_serve>:
void http_server_serve(struct netconn *conn)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b0f9      	sub	sp, #484	; 0x1e4
 8001358:	af06      	add	r7, sp, #24
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	6018      	str	r0, [r3, #0]
	 err_t recv_err=-1;
 800135e:	23ff      	movs	r3, #255	; 0xff
 8001360:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	 struct fs_file file;
	 char* buf;
	 u16_t buflen;struct netbuf *inbuf;
	 char http_index_html[384];
	 const static char http_html_hdr[] = "HTTP/1.1 200 OK\r\nContent-type: application/xml\r\n\r\n";
	 uint16_t IP[4]={0,0,0,0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	461a      	mov	r2, r3
 800136a:	2300      	movs	r3, #0
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	6053      	str	r3, [r2, #4]
	 uint16_t Mask[4]={0,0,0,0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	461a      	mov	r2, r3
 8001376:	2300      	movs	r3, #0
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	6053      	str	r3, [r2, #4]
	 uint16_t Gateway[4]={0,0,0,0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	461a      	mov	r2, r3
 8001382:	2300      	movs	r3, #0
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	6053      	str	r3, [r2, #4]

	 recv_err = netconn_recv(conn, &inbuf);
 8001388:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4611      	mov	r1, r2
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f008 fe6b 	bl	800a06c <netconn_recv>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	 if (recv_err == ERR_OK)
 800139c:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f040 80c9 	bne.w	8001538 <http_server_serve+0x1e4>
	 {
		 netbuf_data(inbuf,(void**) &buf, &buflen);
 80013a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013aa:	f507 72d5 	add.w	r2, r7, #426	; 0x1aa
 80013ae:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a fbd6 	bl	800bb64 <netbuf_data>
		 if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 80013b8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80013bc:	2b04      	cmp	r3, #4
 80013be:	f240 80b2 	bls.w	8001526 <http_server_serve+0x1d2>
 80013c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013c6:	2205      	movs	r2, #5
 80013c8:	495e      	ldr	r1, [pc, #376]	; (8001544 <http_server_serve+0x1f0>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f014 fc84 	bl	8015cd8 <strncmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80a7 	bne.w	8001526 <http_server_serve+0x1d2>
	     	 {
			 HAL_UART_Transmit(&huart3, (uint8_t *)"received...\n\r", 50, 1000);
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	2232      	movs	r2, #50	; 0x32
 80013de:	495a      	ldr	r1, [pc, #360]	; (8001548 <http_server_serve+0x1f4>)
 80013e0:	485a      	ldr	r0, [pc, #360]	; (800154c <http_server_serve+0x1f8>)
 80013e2:	f003 ffcd 	bl	8005380 <HAL_UART_Transmit>

			 if (strncmp((char const *)buf,"GET / HTTP",10)==0)
 80013e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80013ea:	220a      	movs	r2, #10
 80013ec:	4958      	ldr	r1, [pc, #352]	; (8001550 <http_server_serve+0x1fc>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f014 fc72 	bl	8015cd8 <strncmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <http_server_serve+0xd4>
	 	     {
				 /* HTML Page asked by a client*/
				 fs_open(&file, "/page.html");
 80013fa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80013fe:	4955      	ldr	r1, [pc, #340]	; (8001554 <http_server_serve+0x200>)
 8001400:	4618      	mov	r0, r3
 8001402:	f00a fd6f 	bl	800bee4 <fs_open>
				 netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001406:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800140a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800140e:	461a      	mov	r2, r3
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	6800      	ldr	r0, [r0, #0]
 800141a:	f008 fe9f 	bl	800a15c <netconn_write_partly>
				 fs_close(&file);
 800141e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001422:	4618      	mov	r0, r3
 8001424:	f00a fd9c 	bl	800bf60 <fs_close>
	 	      }


			 if (strncmp((char const *)buf,"GET /Switch?",12)==0)
 8001428:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800142c:	220c      	movs	r2, #12
 800142e:	494a      	ldr	r1, [pc, #296]	; (8001558 <http_server_serve+0x204>)
 8001430:	4618      	mov	r0, r3
 8001432:	f014 fc51 	bl	8015cd8 <strncmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d122      	bne.n	8001482 <http_server_serve+0x12e>
			 {
				 /* Switch state asked by a client*/
				 create_XML_ToSend(http_index_html,Switch);
 800143c:	4e47      	ldr	r6, [pc, #284]	; (800155c <http_server_serve+0x208>)
 800143e:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 8001442:	466d      	mov	r5, sp
 8001444:	f106 040c 	add.w	r4, r6, #12
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	602b      	str	r3, [r5, #0]
 8001450:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001454:	4660      	mov	r0, ip
 8001456:	f000 f889 	bl	800156c <create_XML_ToSend>
				 /* Send XML */
				 netconn_write(conn, http_html_hdr, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
 800145a:	1d38      	adds	r0, r7, #4
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2300      	movs	r3, #0
 8001462:	2232      	movs	r2, #50	; 0x32
 8001464:	493e      	ldr	r1, [pc, #248]	; (8001560 <http_server_serve+0x20c>)
 8001466:	6800      	ldr	r0, [r0, #0]
 8001468:	f008 fe78 	bl	800a15c <netconn_write_partly>
				 netconn_write(conn, http_index_html, sizeof(http_index_html)-1, NETCONN_NOCOPY);
 800146c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001470:	1d38      	adds	r0, r7, #4
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	f240 127f 	movw	r2, #383	; 0x17f
 800147c:	6800      	ldr	r0, [r0, #0]
 800147e:	f008 fe6d 	bl	800a15c <netconn_write_partly>
			 }


			 if (strncmp((char const *)buf,"GET /StateChanged",17)==0)
 8001482:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001486:	2211      	movs	r2, #17
 8001488:	4936      	ldr	r1, [pc, #216]	; (8001564 <http_server_serve+0x210>)
 800148a:	4618      	mov	r0, r3
 800148c:	f014 fc24 	bl	8015cd8 <strncmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d128      	bne.n	80014e8 <http_server_serve+0x194>
			 {
				 /* Client want to set switch State*/
				 SetSwitch(buf,&Switch);
 8001496:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800149a:	4930      	ldr	r1, [pc, #192]	; (800155c <http_server_serve+0x208>)
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f88d 	bl	80015bc <SetSwitch>
				 create_XML_ToSend(http_index_html,Switch);
 80014a2:	4e2e      	ldr	r6, [pc, #184]	; (800155c <http_server_serve+0x208>)
 80014a4:	f107 0c24 	add.w	ip, r7, #36	; 0x24
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 040c 	add.w	r4, r6, #12
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80014ba:	4660      	mov	r0, ip
 80014bc:	f000 f856 	bl	800156c <create_XML_ToSend>
				 /* Send XML */
				 netconn_write(conn, http_html_hdr, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
 80014c0:	1d38      	adds	r0, r7, #4
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2232      	movs	r2, #50	; 0x32
 80014ca:	4925      	ldr	r1, [pc, #148]	; (8001560 <http_server_serve+0x20c>)
 80014cc:	6800      	ldr	r0, [r0, #0]
 80014ce:	f008 fe45 	bl	800a15c <netconn_write_partly>
				 netconn_write(conn, http_index_html, sizeof(http_index_html)-1, NETCONN_NOCOPY);
 80014d2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014d6:	1d38      	adds	r0, r7, #4
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	f240 127f 	movw	r2, #383	; 0x17f
 80014e2:	6800      	ldr	r0, [r0, #0]
 80014e4:	f008 fe3a 	bl	800a15c <netconn_write_partly>
			 }

			 if (strncmp((char const *)buf,"GET /ChangeIP",13)==0)
 80014e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80014ec:	220d      	movs	r2, #13
 80014ee:	491e      	ldr	r1, [pc, #120]	; (8001568 <http_server_serve+0x214>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f014 fbf1 	bl	8015cd8 <strncmp>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d114      	bne.n	8001526 <http_server_serve+0x1d2>
			 {

				 /* Client want to set new IP configuration */
				 IP_PARSER(buf,IP,Mask,Gateway);
 80014fc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	f107 0214 	add.w	r2, r7, #20
 8001508:	f107 011c 	add.w	r1, r7, #28
 800150c:	f000 f908 	bl	8001720 <IP_PARSER>
				 /* Write config on EEPROM */
				 Write_NewIPConfig(IP,Mask,Gateway);
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	f107 0114 	add.w	r1, r7, #20
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fa23 	bl	8001968 <Write_NewIPConfig>
				 /* Reboot the board */
				 NVIC_SystemReset();
 8001522:	f7ff fcef 	bl	8000f04 <__NVIC_SystemReset>

			 }

	    }

	 netconn_close(conn);
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	f008 febf 	bl	800a2ac <netconn_close>
	 netbuf_delete(inbuf);
 800152e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001532:	4618      	mov	r0, r3
 8001534:	f00a faf6 	bl	800bb24 <netbuf_delete>
	 }
}
 8001538:	bf00      	nop
 800153a:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 800153e:	46bd      	mov	sp, r7
 8001540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001542:	bf00      	nop
 8001544:	08016fc8 	.word	0x08016fc8
 8001548:	08016fd0 	.word	0x08016fd0
 800154c:	20004364 	.word	0x20004364
 8001550:	08016fe0 	.word	0x08016fe0
 8001554:	08016fec 	.word	0x08016fec
 8001558:	08016ff8 	.word	0x08016ff8
 800155c:	200047e8 	.word	0x200047e8
 8001560:	080198fc 	.word	0x080198fc
 8001564:	08017008 	.word	0x08017008
 8001568:	0801701c 	.word	0x0801701c

0800156c <create_XML_ToSend>:

void create_XML_ToSend(char*c,struct StateSwitch Switch)
{
 800156c:	b084      	sub	sp, #16
 800156e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001570:	b089      	sub	sp, #36	; 0x24
 8001572:	af06      	add	r7, sp, #24
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800157a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sprintf(c,"<COMPONENT><Switch><ID>SW1</ID><State>%i</State></Switch><Switch><ID>SW2</ID><State>%i</State></Switch><Switch><ID>SW3</ID><State>%i</State></Switch><Switch><ID>SW4</ID><State>%i</State></Switch><Switch><ID>SW5</ID><State>%i</State></Switch><Switch><ID>SW6</ID><State>%i</State></Switch><Switch><ID>SW7</ID><State>%i</State></Switch><Switch><ID>SW8</ID><State>%i</State></Switch></COMPONENT>",Switch.SW1_state,Switch.SW2_state,Switch.SW3_state,Switch.SW4_state,Switch.SW5_state,Switch.SW6_state,Switch.SW7_state,Switch.SW8_state);
 800157e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800158a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800158c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800158e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8001590:	9505      	str	r5, [sp, #20]
 8001592:	9404      	str	r4, [sp, #16]
 8001594:	9003      	str	r0, [sp, #12]
 8001596:	9102      	str	r1, [sp, #8]
 8001598:	9201      	str	r2, [sp, #4]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4632      	mov	r2, r6
 80015a0:	4905      	ldr	r1, [pc, #20]	; (80015b8 <create_XML_ToSend+0x4c>)
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f014 fb78 	bl	8015c98 <siprintf>
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80015b2:	b004      	add	sp, #16
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	0801702c 	.word	0x0801702c

080015bc <SetSwitch>:

void SetSwitch(char* buf,struct StateSwitch *pSwitch)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
	char payload_state[8]="";
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	memcpy(payload_state,&buf[18],8);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f103 0212 	add.w	r2, r3, #18
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	6810      	ldr	r0, [r2, #0]
 80015da:	6851      	ldr	r1, [r2, #4]
 80015dc:	c303      	stmia	r3!, {r0, r1}
	/* payload example : 10100001 */
	/* convert string to int for each value of the payload*/
	pSwitch->SW1_state=(int)(payload_state[0]-48);
 80015de:	7a3b      	ldrb	r3, [r7, #8]
 80015e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	601a      	str	r2, [r3, #0]
	pSwitch->SW2_state=(int)(payload_state[1]-48);
 80015e8:	7a7b      	ldrb	r3, [r7, #9]
 80015ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	605a      	str	r2, [r3, #4]
	pSwitch->SW3_state=(int)(payload_state[2]-48);
 80015f2:	7abb      	ldrb	r3, [r7, #10]
 80015f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	609a      	str	r2, [r3, #8]
	pSwitch->SW4_state=(int)(payload_state[3]-48);
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	60da      	str	r2, [r3, #12]
	pSwitch->SW5_state=(int)(payload_state[4]-48);
 8001606:	7b3b      	ldrb	r3, [r7, #12]
 8001608:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	611a      	str	r2, [r3, #16]
	pSwitch->SW6_state=(int)(payload_state[5]-48);
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	615a      	str	r2, [r3, #20]
	pSwitch->SW7_state=(int)(payload_state[6]-48);
 800161a:	7bbb      	ldrb	r3, [r7, #14]
 800161c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	619a      	str	r2, [r3, #24]
	pSwitch->SW8_state=(int)(payload_state[7]-48);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	61da      	str	r2, [r3, #28]
	set_GPIO(pSwitch);
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f000 f804 	bl	800163c <set_GPIO>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <set_GPIO>:

void set_GPIO(struct StateSwitch *pSwitch)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	/* Set HIGH/low GPIO output connected to LD2 */
	HAL_GPIO_WritePin(GPIOC,R1_Pin,(int)!(pSwitch->SW1_state));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf0c      	ite	eq
 800164c:	2301      	moveq	r3, #1
 800164e:	2300      	movne	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	482f      	ldr	r0, [pc, #188]	; (8001714 <set_GPIO+0xd8>)
 8001658:	f002 f9dc 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R2_Pin,(int)!(pSwitch->SW2_state));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <set_GPIO+0xdc>)
 8001672:	f002 f9cf 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R3_Pin,(int)!(pSwitch->SW3_state));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168a:	4823      	ldr	r0, [pc, #140]	; (8001718 <set_GPIO+0xdc>)
 800168c:	f002 f9c2 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,R4_Pin,(int)!(pSwitch->SW4_state));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a4:	481d      	ldr	r0, [pc, #116]	; (800171c <set_GPIO+0xe0>)
 80016a6:	f002 f9b5 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,R5_Pin,(int)!(pSwitch->SW5_state));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <set_GPIO+0xd8>)
 80016be:	f002 f9a9 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R6_Pin,(int)!(pSwitch->SW6_state));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	2120      	movs	r1, #32
 80016d4:	4810      	ldr	r0, [pc, #64]	; (8001718 <set_GPIO+0xdc>)
 80016d6:	f002 f99d 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,R7_Pin,(int)!(pSwitch->SW7_state));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	2108      	movs	r1, #8
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <set_GPIO+0xdc>)
 80016ee:	f002 f991 	bl	8003a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,R8_Pin,(int)!(pSwitch->SW8_state));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	2110      	movs	r1, #16
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <set_GPIO+0xe0>)
 8001706:	f002 f985 	bl	8003a14 <HAL_GPIO_WritePin>
	/* Can add at least 7 more GPIO to control remotly */


}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020800 	.word	0x40020800
 8001718:	40020400 	.word	0x40020400
 800171c:	40020000 	.word	0x40020000

08001720 <IP_PARSER>:

void IP_PARSER(char* buf,uint16_t* IP,uint16_t* Mask,uint16_t* Gateway)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b093      	sub	sp, #76	; 0x4c
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
	char* saveptr=NULL;
 800172e:	2300      	movs	r3, #0
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
	char payload_IP[15]="";
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
 8001736:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	f8c3 2007 	str.w	r2, [r3, #7]
	char payload_Mask[15]="";
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
 8001748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	f8c3 2007 	str.w	r2, [r3, #7]
	char payload_Gateway[15]="";
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	f8c3 2007 	str.w	r2, [r3, #7]
	memcpy(payload_IP,&buf[14],15);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f103 020e 	add.w	r2, r3, #14
 800176e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001772:	4614      	mov	r4, r2
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	6861      	ldr	r1, [r4, #4]
 8001778:	68a2      	ldr	r2, [r4, #8]
 800177a:	c307      	stmia	r3!, {r0, r1, r2}
 800177c:	89a2      	ldrh	r2, [r4, #12]
 800177e:	7ba1      	ldrb	r1, [r4, #14]
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	460a      	mov	r2, r1
 8001784:	709a      	strb	r2, [r3, #2]
	memcpy(payload_Mask,&buf[30],15);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f103 021e 	add.w	r2, r3, #30
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4614      	mov	r4, r2
 8001792:	6820      	ldr	r0, [r4, #0]
 8001794:	6861      	ldr	r1, [r4, #4]
 8001796:	68a2      	ldr	r2, [r4, #8]
 8001798:	c307      	stmia	r3!, {r0, r1, r2}
 800179a:	89a2      	ldrh	r2, [r4, #12]
 800179c:	7ba1      	ldrb	r1, [r4, #14]
 800179e:	801a      	strh	r2, [r3, #0]
 80017a0:	460a      	mov	r2, r1
 80017a2:	709a      	strb	r2, [r3, #2]
	memcpy(payload_Gateway,&buf[46],15);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4614      	mov	r4, r2
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	6861      	ldr	r1, [r4, #4]
 80017b4:	68a2      	ldr	r2, [r4, #8]
 80017b6:	c307      	stmia	r3!, {r0, r1, r2}
 80017b8:	89a2      	ldrh	r2, [r4, #12]
 80017ba:	7ba1      	ldrb	r1, [r4, #14]
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	460a      	mov	r2, r1
 80017c0:	709a      	strb	r2, [r3, #2]

// loop through the string to extract all other tokens

    IP[0]=(uint8_t)atoi(strtok_r(payload_IP,".",&saveptr));
 80017c2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80017c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ca:	4966      	ldr	r1, [pc, #408]	; (8001964 <IP_PARSER+0x244>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f014 fabf 	bl	8015d50 <strtok_r>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f014 f9fd 	bl	8015bd4 <atoi>
 80017da:	4603      	mov	r3, r0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	801a      	strh	r2, [r3, #0]
    IP[1]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 80017e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017e8:	461a      	mov	r2, r3
 80017ea:	495e      	ldr	r1, [pc, #376]	; (8001964 <IP_PARSER+0x244>)
 80017ec:	2000      	movs	r0, #0
 80017ee:	f014 faaf 	bl	8015d50 <strtok_r>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f014 f9ed 	bl	8015bd4 <atoi>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3302      	adds	r3, #2
 8001802:	b292      	uxth	r2, r2
 8001804:	801a      	strh	r2, [r3, #0]
    IP[2]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 8001806:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800180a:	461a      	mov	r2, r3
 800180c:	4955      	ldr	r1, [pc, #340]	; (8001964 <IP_PARSER+0x244>)
 800180e:	2000      	movs	r0, #0
 8001810:	f014 fa9e 	bl	8015d50 <strtok_r>
 8001814:	4603      	mov	r3, r0
 8001816:	4618      	mov	r0, r3
 8001818:	f014 f9dc 	bl	8015bd4 <atoi>
 800181c:	4603      	mov	r3, r0
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3304      	adds	r3, #4
 8001824:	b292      	uxth	r2, r2
 8001826:	801a      	strh	r2, [r3, #0]
    IP[3]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 8001828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800182c:	461a      	mov	r2, r3
 800182e:	494d      	ldr	r1, [pc, #308]	; (8001964 <IP_PARSER+0x244>)
 8001830:	2000      	movs	r0, #0
 8001832:	f014 fa8d 	bl	8015d50 <strtok_r>
 8001836:	4603      	mov	r3, r0
 8001838:	4618      	mov	r0, r3
 800183a:	f014 f9cb 	bl	8015bd4 <atoi>
 800183e:	4603      	mov	r3, r0
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3306      	adds	r3, #6
 8001846:	b292      	uxth	r2, r2
 8001848:	801a      	strh	r2, [r3, #0]

    Mask[0]=(uint8_t)atoi(strtok_r(payload_Mask,".",&saveptr));
 800184a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4944      	ldr	r1, [pc, #272]	; (8001964 <IP_PARSER+0x244>)
 8001854:	4618      	mov	r0, r3
 8001856:	f014 fa7b 	bl	8015d50 <strtok_r>
 800185a:	4603      	mov	r3, r0
 800185c:	4618      	mov	r0, r3
 800185e:	f014 f9b9 	bl	8015bd4 <atoi>
 8001862:	4603      	mov	r3, r0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	801a      	strh	r2, [r3, #0]
    Mask[1]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 800186c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001870:	461a      	mov	r2, r3
 8001872:	493c      	ldr	r1, [pc, #240]	; (8001964 <IP_PARSER+0x244>)
 8001874:	2000      	movs	r0, #0
 8001876:	f014 fa6b 	bl	8015d50 <strtok_r>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f014 f9a9 	bl	8015bd4 <atoi>
 8001882:	4603      	mov	r3, r0
 8001884:	b2da      	uxtb	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3302      	adds	r3, #2
 800188a:	b292      	uxth	r2, r2
 800188c:	801a      	strh	r2, [r3, #0]
    Mask[2]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 800188e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001892:	461a      	mov	r2, r3
 8001894:	4933      	ldr	r1, [pc, #204]	; (8001964 <IP_PARSER+0x244>)
 8001896:	2000      	movs	r0, #0
 8001898:	f014 fa5a 	bl	8015d50 <strtok_r>
 800189c:	4603      	mov	r3, r0
 800189e:	4618      	mov	r0, r3
 80018a0:	f014 f998 	bl	8015bd4 <atoi>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	b292      	uxth	r2, r2
 80018ae:	801a      	strh	r2, [r3, #0]
    Mask[3]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 80018b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b4:	461a      	mov	r2, r3
 80018b6:	492b      	ldr	r1, [pc, #172]	; (8001964 <IP_PARSER+0x244>)
 80018b8:	2000      	movs	r0, #0
 80018ba:	f014 fa49 	bl	8015d50 <strtok_r>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f014 f987 	bl	8015bd4 <atoi>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3306      	adds	r3, #6
 80018ce:	b292      	uxth	r2, r2
 80018d0:	801a      	strh	r2, [r3, #0]

    Gateway[0]=(uint8_t)atoi(strtok_r(payload_Gateway,".",&saveptr));
 80018d2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4922      	ldr	r1, [pc, #136]	; (8001964 <IP_PARSER+0x244>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f014 fa37 	bl	8015d50 <strtok_r>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f014 f975 	bl	8015bd4 <atoi>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	801a      	strh	r2, [r3, #0]
    Gateway[1]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 80018f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f8:	461a      	mov	r2, r3
 80018fa:	491a      	ldr	r1, [pc, #104]	; (8001964 <IP_PARSER+0x244>)
 80018fc:	2000      	movs	r0, #0
 80018fe:	f014 fa27 	bl	8015d50 <strtok_r>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f014 f965 	bl	8015bd4 <atoi>
 800190a:	4603      	mov	r3, r0
 800190c:	b2da      	uxtb	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3302      	adds	r3, #2
 8001912:	b292      	uxth	r2, r2
 8001914:	801a      	strh	r2, [r3, #0]
    Gateway[2]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 8001916:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800191a:	461a      	mov	r2, r3
 800191c:	4911      	ldr	r1, [pc, #68]	; (8001964 <IP_PARSER+0x244>)
 800191e:	2000      	movs	r0, #0
 8001920:	f014 fa16 	bl	8015d50 <strtok_r>
 8001924:	4603      	mov	r3, r0
 8001926:	4618      	mov	r0, r3
 8001928:	f014 f954 	bl	8015bd4 <atoi>
 800192c:	4603      	mov	r3, r0
 800192e:	b2da      	uxtb	r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	3304      	adds	r3, #4
 8001934:	b292      	uxth	r2, r2
 8001936:	801a      	strh	r2, [r3, #0]
    Gateway[3]=(uint8_t)atoi(strtok_r(NULL,".",&saveptr));
 8001938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800193c:	461a      	mov	r2, r3
 800193e:	4909      	ldr	r1, [pc, #36]	; (8001964 <IP_PARSER+0x244>)
 8001940:	2000      	movs	r0, #0
 8001942:	f014 fa05 	bl	8015d50 <strtok_r>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f014 f943 	bl	8015bd4 <atoi>
 800194e:	4603      	mov	r3, r0
 8001950:	b2da      	uxtb	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3306      	adds	r3, #6
 8001956:	b292      	uxth	r2, r2
 8001958:	801a      	strh	r2, [r3, #0]


}
 800195a:	bf00      	nop
 800195c:	374c      	adds	r7, #76	; 0x4c
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	080171b4 	.word	0x080171b4

08001968 <Write_NewIPConfig>:

void Write_NewIPConfig(uint16_t* IP,uint16_t* Mask,uint16_t* Gateway)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	for (int i=0;i<sizeof(IP);i++)
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	e00e      	b.n	8001998 <Write_NewIPConfig+0x30>
	{
		EE_WriteVariable(VirtAddVarTab[i],IP[i]);
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <Write_NewIPConfig+0x98>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f8b5 	bl	8000afc <EE_WriteVariable>
	for (int i=0;i<sizeof(IP);i++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d9ed      	bls.n	800197a <Write_NewIPConfig+0x12>
	}
	for (int i=0;i<sizeof(IP);i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	e00f      	b.n	80019c4 <Write_NewIPConfig+0x5c>
	{
		EE_WriteVariable(VirtAddVarTab[i+4],Mask[i]);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	3304      	adds	r3, #4
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <Write_NewIPConfig+0x98>)
 80019aa:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f89f 	bl	8000afc <EE_WriteVariable>
	for (int i=0;i<sizeof(IP);i++)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d9ec      	bls.n	80019a4 <Write_NewIPConfig+0x3c>
	}
	for (int i=0;i<sizeof(IP);i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e00f      	b.n	80019f0 <Write_NewIPConfig+0x88>
	{
		EE_WriteVariable(VirtAddVarTab[i+8],Gateway[i]);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3308      	adds	r3, #8
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <Write_NewIPConfig+0x98>)
 80019d6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f889 	bl	8000afc <EE_WriteVariable>
	for (int i=0;i<sizeof(IP);i++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d9ec      	bls.n	80019d0 <Write_NewIPConfig+0x68>
	}
}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000000 	.word	0x20000000

08001a04 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	struct netconn *conn, *newconn;
			err_t err, accept_err;
			/* set all switch to state 0*/
			memset(&Switch,0,sizeof(Switch));
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4820      	ldr	r0, [pc, #128]	; (8001a94 <StartDefaultTask+0x90>)
 8001a12:	f014 f921 	bl	8015c58 <memset>


			  /* Create a new TCP connection handle */
			  conn = netconn_new(NETCONN_TCP);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2010      	movs	r0, #16
 8001a1c:	f008 f8d4 	bl	8009bc8 <netconn_new_with_proto_and_callback>
 8001a20:	6178      	str	r0, [r7, #20]

			  if (conn!= NULL)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d031      	beq.n	8001a8c <StartDefaultTask+0x88>
			  {
			    /* Bind to port 80 (HTTP) with default IP address */
			    err = netconn_bind(conn, NULL, 80);
 8001a28:	2250      	movs	r2, #80	; 0x50
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	6978      	ldr	r0, [r7, #20]
 8001a2e:	f008 f96b 	bl	8009d08 <netconn_bind>
 8001a32:	4603      	mov	r3, r0
 8001a34:	74fb      	strb	r3, [r7, #19]

			    if (err == ERR_OK)
 8001a36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d126      	bne.n	8001a8c <StartDefaultTask+0x88>
			    {
			    	HAL_UART_Transmit(&huart3, (uint8_t *)"listening...\n\r", 16, 1000);
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	2210      	movs	r2, #16
 8001a44:	4914      	ldr	r1, [pc, #80]	; (8001a98 <StartDefaultTask+0x94>)
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <StartDefaultTask+0x98>)
 8001a48:	f003 fc9a 	bl	8005380 <HAL_UART_Transmit>
			      /* Put the connection into LISTEN state */
			      netconn_listen(conn);
 8001a4c:	21ff      	movs	r1, #255	; 0xff
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f008 f992 	bl	8009d78 <netconn_listen_with_backlog>


			      while(1)
			      {
			    	  /* Grab new connection. */
			    	   accept_err = netconn_accept(conn, &newconn);
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f008 f9b8 	bl	8009dd0 <netconn_accept>
 8001a60:	4603      	mov	r3, r0
 8001a62:	74bb      	strb	r3, [r7, #18]

			    	   /* Process the new connection. */
			    	   if (accept_err == ERR_OK)
 8001a64:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f3      	bne.n	8001a54 <StartDefaultTask+0x50>
			    	   {

			    		   HAL_UART_Transmit(&huart3, (uint8_t *)"accepted...\n\r", 16, 1000);
 8001a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a70:	2210      	movs	r2, #16
 8001a72:	490b      	ldr	r1, [pc, #44]	; (8001aa0 <StartDefaultTask+0x9c>)
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <StartDefaultTask+0x98>)
 8001a76:	f003 fc83 	bl	8005380 <HAL_UART_Transmit>

			    		   /* serve connection */
			    		   http_server_serve(newconn);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fc69 	bl	8001354 <http_server_serve>

			    		   netconn_delete(newconn);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f008 f919 	bl	8009cbc <netconn_delete>
			    	   accept_err = netconn_accept(conn, &newconn);
 8001a8a:	e7e3      	b.n	8001a54 <StartDefaultTask+0x50>
			    }
			  }
			    }
			  }
  /* USER CODE END 5 */ 
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200047e8 	.word	0x200047e8
 8001a98:	080171b8 	.word	0x080171b8
 8001a9c:	20004364 	.word	0x20004364
 8001aa0:	080171c8 	.word	0x080171c8

08001aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ab6:	f000 fa6d 	bl	8001f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40001000 	.word	0x40001000

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	210f      	movs	r1, #15
 8001b12:	f06f 0001 	mvn.w	r0, #1
 8001b16:	f000 fb37 	bl	8002188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_UART_MspInit+0x7c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d128      	bne.n	8001b9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_UART_MspInit+0x84>)
 8001b98:	f001 fd92 	bl	80036c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40004800 	.word	0x40004800
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020c00 	.word	0x40020c00

08001bb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd0:	d141      	bne.n	8001c56 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4817      	ldr	r0, [pc, #92]	; (8001c64 <HAL_PCD_MspInit+0xb4>)
 8001c08:	f001 fd5a 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4810      	ldr	r0, [pc, #64]	; (8001c64 <HAL_PCD_MspInit+0xb4>)
 8001c22:	f001 fd4d 	bl	80036c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	6353      	str	r3, [r2, #52]	; 0x34
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_PCD_MspInit+0xb0>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	2036      	movs	r0, #54	; 0x36
 8001c7e:	f000 fa83 	bl	8002188 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001c82:	2036      	movs	r0, #54	; 0x36
 8001c84:	f000 fa9c 	bl	80021c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_InitTick+0xa0>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_InitTick+0xa0>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_InitTick+0xa0>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca0:	f107 0210 	add.w	r2, r7, #16
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fc94 	bl	80045d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001cb0:	f002 fc6a 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_InitTick+0xa4>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9b      	lsrs	r3, r3, #18
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_InitTick+0xac>)
 8001ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_InitTick+0xa8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cea:	f003 f895 	bl	8004e18 <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d104      	bne.n	8001cfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001cf4:	4806      	ldr	r0, [pc, #24]	; (8001d10 <HAL_InitTick+0xa8>)
 8001cf6:	f003 f8c5 	bl	8004e84 <HAL_TIM_Base_Start_IT>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	2000480c 	.word	0x2000480c
 8001d14:	40001000 	.word	0x40001000

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d54:	f001 fe78 	bl	8003a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM6_DAC_IRQHandler+0x10>)
 8001d62:	f003 f8b9 	bl	8004ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000480c 	.word	0x2000480c

08001d70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <ETH_IRQHandler+0x10>)
 8001d76:	f000 fe15 	bl	80029a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20006190 	.word	0x20006190

08001d84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e00a      	b.n	8001dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d96:	f3af 8000 	nop.w
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf0      	blt.n	8001d96 <_read+0x12>
	}

return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e009      	b.n	8001de4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf1      	blt.n	8001dd0 <_write+0x12>
	}
	return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_close>:

int _close(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_isatty>:

int _isatty(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
	return 1;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <_sbrk+0x50>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x16>
		heap_end = &end;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <_sbrk+0x50>)
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <_sbrk+0x54>)
 8001e74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <_sbrk+0x50>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <_sbrk+0x50>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	466a      	mov	r2, sp
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d905      	bls.n	8001e96 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <_sbrk+0x58>)
 8001e8c:	220c      	movs	r2, #12
 8001e8e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	e006      	b.n	8001ea4 <_sbrk+0x44>
	}

	heap_end += incr;
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <_sbrk+0x50>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <_sbrk+0x50>)
 8001ea0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	20000478 	.word	0x20000478
 8001eb4:	2000b128 	.word	0x2000b128
 8001eb8:	2000b11c 	.word	0x2000b11c

08001ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <SystemInit+0x5c>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <SystemInit+0x5c>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <SystemInit+0x60>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <SystemInit+0x60>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <SystemInit+0x60>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <SystemInit+0x60>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <SystemInit+0x60>)
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <SystemInit+0x64>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <SystemInit+0x60>)
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <SystemInit+0x68>)
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <SystemInit+0x60>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <SystemInit+0x60>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SystemInit+0x60>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SystemInit+0x5c>)
 8001f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f0c:	609a      	str	r2, [r3, #8]
#endif
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	fef6ffff 	.word	0xfef6ffff
 8001f24:	24003010 	.word	0x24003010

08001f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f2e:	e003      	b.n	8001f38 <LoopCopyDataInit>

08001f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f36:	3104      	adds	r1, #4

08001f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f40:	d3f6      	bcc.n	8001f30 <CopyDataInit>
  ldr  r2, =_sbss
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f44:	e002      	b.n	8001f4c <LoopFillZerobss>

08001f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f48:	f842 3b04 	str.w	r3, [r2], #4

08001f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f50:	d3f9      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f52:	f7ff ffb3 	bl	8001ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f013 fe41 	bl	8015bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5a:	f7fe ffe7 	bl	8000f2c <main>
  bx  lr    
 8001f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f60:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001f64:	0801d7ac 	.word	0x0801d7ac
  ldr  r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f6c:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8001f70:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8001f74:	2000b124 	.word	0x2000b124

08001f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC_IRQHandler>

08001f7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7e:	2003      	movs	r0, #3
 8001f80:	f000 f8f7 	bl	8002172 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fe6f 	bl	8001c68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f8a:	f7ff fda5 	bl	8001ad8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2000001c 	.word	0x2000001c
 8001fb8:	2000484c 	.word	0x2000484c

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2000484c 	.word	0x2000484c

08001fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff ffee 	bl	8001fbc <HAL_GetTick>
 8001fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d005      	beq.n	8001ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_Delay+0x40>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffa:	bf00      	nop
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d8f7      	bhi.n	8001ffc <HAL_Delay+0x28>
  {
  }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000001c 	.word	0x2000001c

08002018 <__NVIC_SetPriorityGrouping>:
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <__NVIC_SetPriorityGrouping+0x40>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	4313      	orrs	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <__NVIC_SetPriorityGrouping+0x40>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00
 800205c:	05fa0000 	.word	0x05fa0000

08002060 <__NVIC_GetPriorityGrouping>:
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ff4c 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219a:	f7ff ff61 	bl	8002060 <__NVIC_GetPriorityGrouping>
 800219e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	6978      	ldr	r0, [r7, #20]
 80021a6:	f7ff ffb1 	bl	800210c <NVIC_EncodePriority>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff80 	bl	80020b8 <__NVIC_SetPriority>
}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff54 	bl	800207c <__NVIC_EnableIRQ>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80021ec:	4ba9      	ldr	r3, [pc, #676]	; (8002494 <HAL_ETH_Init+0x2b8>)
 80021ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e183      	b.n	800250a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f004 f9b4 	bl	8006584 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221c:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_ETH_Init+0x2bc>)
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	4a9d      	ldr	r2, [pc, #628]	; (8002498 <HAL_ETH_Init+0x2bc>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	6453      	str	r3, [r2, #68]	; 0x44
 8002228:	4b9b      	ldr	r3, [pc, #620]	; (8002498 <HAL_ETH_Init+0x2bc>)
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002234:	4b99      	ldr	r3, [pc, #612]	; (800249c <HAL_ETH_Init+0x2c0>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a98      	ldr	r2, [pc, #608]	; (800249c <HAL_ETH_Init+0x2c0>)
 800223a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800223e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002240:	4b96      	ldr	r3, [pc, #600]	; (800249c <HAL_ETH_Init+0x2c0>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4994      	ldr	r1, [pc, #592]	; (800249c <HAL_ETH_Init+0x2c0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002266:	f7ff fea9 	bl	8001fbc <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800226c:	e011      	b.n	8002292 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800226e:	f7ff fea5 	bl	8001fbc <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800227c:	d909      	bls.n	8002292 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e13b      	b.n	800250a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e4      	bne.n	800226e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f023 031c 	bic.w	r3, r3, #28
 80022b2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022b4:	f002 f95c 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80022b8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4a78      	ldr	r2, [pc, #480]	; (80024a0 <HAL_ETH_Init+0x2c4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d908      	bls.n	80022d4 <HAL_ETH_Init+0xf8>
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4a77      	ldr	r2, [pc, #476]	; (80024a4 <HAL_ETH_Init+0x2c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d804      	bhi.n	80022d4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e027      	b.n	8002324 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4a73      	ldr	r2, [pc, #460]	; (80024a4 <HAL_ETH_Init+0x2c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d908      	bls.n	80022ee <HAL_ETH_Init+0x112>
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	4a72      	ldr	r2, [pc, #456]	; (80024a8 <HAL_ETH_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d804      	bhi.n	80022ee <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f043 030c 	orr.w	r3, r3, #12
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	e01a      	b.n	8002324 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4a6d      	ldr	r2, [pc, #436]	; (80024a8 <HAL_ETH_Init+0x2cc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d903      	bls.n	80022fe <HAL_ETH_Init+0x122>
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <HAL_ETH_Init+0x2d0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d911      	bls.n	8002322 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4a6a      	ldr	r2, [pc, #424]	; (80024ac <HAL_ETH_Init+0x2d0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d908      	bls.n	8002318 <HAL_ETH_Init+0x13c>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4a69      	ldr	r2, [pc, #420]	; (80024b0 <HAL_ETH_Init+0x2d4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d804      	bhi.n	8002318 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e005      	b.n	8002324 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	e000      	b.n	8002324 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002322:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800232c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002330:	2100      	movs	r1, #0
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fc19 	bl	8002b6a <HAL_ETH_WritePHYRegister>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002342:	6939      	ldr	r1, [r7, #16]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fca5 	bl	8002c94 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0d9      	b.n	800250a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002356:	20ff      	movs	r0, #255	; 0xff
 8002358:	f7ff fe3c 	bl	8001fd4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a7 	beq.w	80024b4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002366:	f7ff fe29 	bl	8001fbc <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	461a      	mov	r2, r3
 8002372:	2101      	movs	r1, #1
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb90 	bl	8002a9a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800237a:	f7ff fe1f 	bl	8001fbc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d90f      	bls.n	80023ac <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002390:	6939      	ldr	r1, [r7, #16]
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fc7e 	bl	8002c94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0ae      	b.n	800250a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0da      	beq.n	800236c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80023b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ba:	2100      	movs	r1, #0
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fbd4 	bl	8002b6a <HAL_ETH_WritePHYRegister>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023cc:	6939      	ldr	r1, [r7, #16]
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fc60 	bl	8002c94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80023dc:	2301      	movs	r3, #1
 80023de:	e094      	b.n	800250a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fdec 	bl	8001fbc <HAL_GetTick>
 80023e4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	461a      	mov	r2, r3
 80023ec:	2101      	movs	r1, #1
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fb53 	bl	8002a9a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023f4:	f7ff fde2 	bl	8001fbc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d90f      	bls.n	8002426 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fc41 	bl	8002c94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e071      	b.n	800250a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0da      	beq.n	80023e6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	461a      	mov	r2, r3
 8002436:	211f      	movs	r1, #31
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fb2e 	bl	8002a9a <HAL_ETH_ReadPHYRegister>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fc22 	bl	8002c94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002458:	2301      	movs	r3, #1
 800245a:	e056      	b.n	800250a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	e002      	b.n	8002476 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	e037      	b.n	80024f8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e032      	b.n	80024f8 <HAL_ETH_Init+0x31c>
 8002492:	bf00      	nop
 8002494:	03938700 	.word	0x03938700
 8002498:	40023800 	.word	0x40023800
 800249c:	40013800 	.word	0x40013800
 80024a0:	01312cff 	.word	0x01312cff
 80024a4:	02160ebf 	.word	0x02160ebf
 80024a8:	039386ff 	.word	0x039386ff
 80024ac:	05f5e0ff 	.word	0x05f5e0ff
 80024b0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fb4c 	bl	8002b6a <HAL_ETH_WritePHYRegister>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fbd8 	bl	8002c94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e00c      	b.n	800250a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80024f0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80024f4:	f7ff fd6e 	bl	8001fd4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80024f8:	6939      	ldr	r1, [r7, #16]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fbca 	bl	8002c94 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop

08002514 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_ETH_DMATxDescListInit+0x20>
 8002530:	2302      	movs	r3, #2
 8002532:	e052      	b.n	80025da <HAL_ETH_DMATxDescListInit+0xc6>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e030      	b.n	80025b2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	4413      	add	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002560:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	461a      	mov	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	3b01      	subs	r3, #1
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d208      	bcs.n	80025a6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	015b      	lsls	r3, r3, #5
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4413      	add	r3, r2
 800259e:	461a      	mov	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e002      	b.n	80025ac <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3ca      	bcc.n	8002550 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f241 0310 	movw	r3, #4112	; 0x1010
 80025c4:	440b      	add	r3, r1
 80025c6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_ETH_DMARxDescListInit+0x20>
 8002602:	2302      	movs	r3, #2
 8002604:	e056      	b.n	80026b4 <HAL_ETH_DMARxDescListInit+0xce>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	e034      	b.n	800268c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015b      	lsls	r3, r3, #5
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002632:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800263a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	461a      	mov	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	429a      	cmp	r2, r3
 800266c:	d208      	bcs.n	8002680 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	015b      	lsls	r3, r3, #5
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	4413      	add	r3, r2
 8002678:	461a      	mov	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	e002      	b.n	8002686 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3c6      	bcc.n	8002622 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	f241 030c 	movw	r3, #4108	; 0x100c
 800269e:	440b      	add	r3, r1
 80026a0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ETH_TransmitFrame+0x24>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0cd      	b.n	8002880 <HAL_ETH_TransmitFrame+0x1c0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800270a:	2301      	movs	r3, #1
 800270c:	e0b8      	b.n	8002880 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da09      	bge.n	800272c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2212      	movs	r2, #18
 800271c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0a9      	b.n	8002880 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002732:	4293      	cmp	r3, r2
 8002734:	d915      	bls.n	8002762 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	4a54      	ldr	r2, [pc, #336]	; (800288c <HAL_ETH_TransmitFrame+0x1cc>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_ETH_TransmitFrame+0x1cc>)
 8002746:	fba3 1302 	umull	r1, r3, r3, r2
 800274a:	0a9b      	lsrs	r3, r3, #10
 800274c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	e001      	b.n	8002766 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d11c      	bne.n	80027a6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800277a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002786:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002796:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80027a4:	e04b      	b.n	800283e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e044      	b.n	8002836 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027ba:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027da:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3b01      	subs	r3, #1
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d116      	bne.n	8002814 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027f4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_ETH_TransmitFrame+0x1d0>)
 80027fa:	fb02 f203 	mul.w	r2, r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002806:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002812:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002822:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	3301      	adds	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	429a      	cmp	r2, r3
 800283c:	d3b6      	bcc.n	80027ac <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f241 0314 	movw	r3, #4116	; 0x1014
 8002846:	4413      	add	r3, r2
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f241 0314 	movw	r3, #4116	; 0x1014
 800285a:	4413      	add	r3, r2
 800285c:	2204      	movs	r2, #4
 800285e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	f241 0304 	movw	r3, #4100	; 0x1004
 8002868:	4413      	add	r3, r2
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	ac02b00b 	.word	0xac02b00b
 8002890:	fffffa0c 	.word	0xfffffa0c

08002894 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e074      	b.n	8002998 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80028be:	e05a      	b.n	8002976 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	d10d      	bne.n	80028f2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
 80028f0:	e041      	b.n	8002976 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	461a      	mov	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
 8002916:	e02e      	b.n	8002976 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	2b01      	cmp	r3, #1
 8002930:	d103      	bne.n	800293a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002946:	1f1a      	subs	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e010      	b.n	8002998 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db02      	blt.n	8002986 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d99c      	bls.n	80028c0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80029b4:	4413      	add	r3, r2
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d112      	bne.n	80029e6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f003 fe9f 	bl	8006704 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80029ce:	4413      	add	r3, r2
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e4:	e01b      	b.n	8002a1e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f241 0314 	movw	r3, #4116	; 0x1014
 80029ee:	4413      	add	r3, r2
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d111      	bne.n	8002a1e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f839 	bl	8002a72 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f241 0314 	movw	r3, #4116	; 0x1014
 8002a08:	4413      	add	r3, r2
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f241 0314 	movw	r3, #4116	; 0x1014
 8002a26:	4413      	add	r3, r2
 8002a28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a2c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f241 0314 	movw	r3, #4116	; 0x1014
 8002a36:	4413      	add	r3, r2
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a42:	d112      	bne.n	8002a6a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f81e 	bl	8002a86 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002a52:	4413      	add	r3, r2
 8002a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a58:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b82      	cmp	r3, #130	; 0x82
 8002aba:	d101      	bne.n	8002ac0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	e050      	b.n	8002b62 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2282      	movs	r2, #130	; 0x82
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 031c 	and.w	r3, r3, #28
 8002ad6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8a1b      	ldrh	r3, [r3, #16]
 8002adc:	02db      	lsls	r3, r3, #11
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0302 	bic.w	r3, r3, #2
 8002afa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b0c:	f7ff fa56 	bl	8001fbc <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b12:	e015      	b.n	8002b40 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002b14:	f7ff fa52 	bl	8001fbc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d309      	bcc.n	8002b38 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e014      	b.n	8002b62 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e4      	bne.n	8002b14 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	460b      	mov	r3, r1
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b42      	cmp	r3, #66	; 0x42
 8002b8a:	d101      	bne.n	8002b90 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e04e      	b.n	8002c2e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2242      	movs	r2, #66	; 0x42
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 031c 	and.w	r3, r3, #28
 8002ba6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8a1b      	ldrh	r3, [r3, #16]
 8002bac:	02db      	lsls	r3, r3, #11
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002be6:	f7ff f9e9 	bl	8001fbc <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bec:	e015      	b.n	8002c1a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002bee:	f7ff f9e5 	bl	8001fbc <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d309      	bcc.n	8002c12 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e00d      	b.n	8002c2e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e4      	bne.n	8002bee <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_ETH_Start+0x16>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e01f      	b.n	8002c8c <HAL_ETH_Start+0x56>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa1b 	bl	8003098 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa35 	bl	80030d2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fa7f 	bl	800316c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa4c 	bl	800310c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fa61 	bl	800313c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0b0      	sub	sp, #192	; 0xc0
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cde:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce0:	e001      	b.n	8002ce6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002d00:	2340      	movs	r3, #64	; 0x40
 8002d02:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002d68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d6c:	4bab      	ldr	r3, [pc, #684]	; (800301c <ETH_MACDMAConfig+0x388>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002d78:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002d7c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002d80:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002d86:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002d8a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002d8e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002d94:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002d98:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002d9c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002da0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002da4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002da8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002daa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7ff f903 	bl	8001fd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dd6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002dd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ddc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002de0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002de6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002dec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002df2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002df8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002dfc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002e04:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e06:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f7ff f8de 	bl	8001fd4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e20:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e2a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e34:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002e40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e44:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e48:	4013      	ands	r3, r2
 8002e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e52:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002e54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002e58:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002e5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002e5e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002e64:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002e6a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002e6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002e70:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002e72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e84:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7ff f89f 	bl	8001fd4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e9e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ea0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002ea4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7ff f88a 	bl	8001fd4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ec8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002edc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002eee:	2304      	movs	r3, #4
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f12:	2300      	movs	r3, #0
 8002f14:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f1e:	4413      	add	r3, r2
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002f26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <ETH_MACDMAConfig+0x38c>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f32:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002f34:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f36:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002f38:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002f3a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002f3c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002f3e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002f40:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002f42:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002f44:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002f46:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002f48:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002f4a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002f4e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002f52:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f66:	4413      	add	r3, r2
 8002f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f76:	4413      	add	r3, r2
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7ff f828 	bl	8001fd4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f92:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f98:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002f9c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002fa0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002fa4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002faa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002fae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f7ff f801 	bl	8001fd4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fde:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10d      	bne.n	8003004 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ff0:	4413      	add	r3, r2
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6811      	ldr	r1, [r2, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <ETH_MACDMAConfig+0x390>)
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	f241 031c 	movw	r3, #4124	; 0x101c
 8003000:	440b      	add	r3, r1
 8003002:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	461a      	mov	r2, r3
 800300a:	2100      	movs	r1, #0
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f80b 	bl	8003028 <ETH_MACAddressConfig>
}
 8003012:	bf00      	nop
 8003014:	37c0      	adds	r7, #192	; 0xc0
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	ff20810f 	.word	0xff20810f
 8003020:	f8de3f23 	.word	0xf8de3f23
 8003024:	00010040 	.word	0x00010040

08003028 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3305      	adds	r3, #5
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	3204      	adds	r2, #4
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <ETH_MACAddressConfig+0x68>)
 800304a:	4413      	add	r3, r2
 800304c:	461a      	mov	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3303      	adds	r3, #3
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	061a      	lsls	r2, r3, #24
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3302      	adds	r3, #2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3301      	adds	r3, #1
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	4313      	orrs	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <ETH_MACAddressConfig+0x6c>)
 800307a:	4413      	add	r3, r2
 800307c:	461a      	mov	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40028040 	.word	0x40028040
 8003094:	40028044 	.word	0x40028044

08003098 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0208 	orr.w	r2, r2, #8
 80030b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030bc:	2001      	movs	r0, #1
 80030be:	f7fe ff89 	bl	8001fd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0204 	orr.w	r2, r2, #4
 80030ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fe ff6c 	bl	8001fd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	f241 0318 	movw	r3, #4120	; 0x1018
 800311c:	4413      	add	r3, r2
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6811      	ldr	r1, [r2, #0]
 8003124:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003128:	f241 0318 	movw	r3, #4120	; 0x1018
 800312c:	440b      	add	r3, r1
 800312e:	601a      	str	r2, [r3, #0]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f241 0318 	movw	r3, #4120	; 0x1018
 800314c:	4413      	add	r3, r2
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6811      	ldr	r1, [r2, #0]
 8003154:	f043 0202 	orr.w	r2, r3, #2
 8003158:	f241 0318 	movw	r3, #4120	; 0x1018
 800315c:	440b      	add	r3, r1
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003180:	4413      	add	r3, r2
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6811      	ldr	r1, [r2, #0]
 8003188:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800318c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003190:	440b      	add	r3, r1
 8003192:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	f241 0318 	movw	r3, #4120	; 0x1018
 800319c:	4413      	add	r3, r2
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7fe ff16 	bl	8001fd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80031b2:	440b      	add	r3, r1
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_FLASH_Program+0xb0>)
 80031d4:	7d1b      	ldrb	r3, [r3, #20]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_FLASH_Program+0x1e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e043      	b.n	8003266 <HAL_FLASH_Program+0xa6>
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_FLASH_Program+0xb0>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031e8:	f000 f868 	bl	80032bc <FLASH_WaitForLastOperation>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d133      	bne.n	800325e <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d823      	bhi.n	8003244 <HAL_FLASH_Program+0x84>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <HAL_FLASH_Program+0x44>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003221 	.word	0x08003221
 800320c:	0800322d 	.word	0x0800322d
 8003210:	08003239 	.word	0x08003239
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003214:	783b      	ldrb	r3, [r7, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	68b8      	ldr	r0, [r7, #8]
 800321a:	f000 f909 	bl	8003430 <FLASH_Program_Byte>
        break;
 800321e:	e012      	b.n	8003246 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003220:	883b      	ldrh	r3, [r7, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	68b8      	ldr	r0, [r7, #8]
 8003226:	f000 f8dd 	bl	80033e4 <FLASH_Program_HalfWord>
        break;
 800322a:	e00c      	b.n	8003246 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f000 f8b3 	bl	800339c <FLASH_Program_Word>
        break;
 8003236:	e006      	b.n	8003246 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	68b8      	ldr	r0, [r7, #8]
 800323e:	f000 f87d 	bl	800333c <FLASH_Program_DoubleWord>
        break;
 8003242:	e000      	b.n	8003246 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8003244:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003246:	f24c 3050 	movw	r0, #50000	; 0xc350
 800324a:	f000 f837 	bl	80032bc <FLASH_WaitForLastOperation>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_FLASH_Program+0xb4>)
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_FLASH_Program+0xb4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_FLASH_Program+0xb0>)
 8003260:	2200      	movs	r2, #0
 8003262:	751a      	strb	r2, [r3, #20]

  return status;
 8003264:	7dfb      	ldrb	r3, [r7, #23]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20004850 	.word	0x20004850
 8003274:	40023c00 	.word	0x40023c00

08003278 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_FLASH_Unlock+0x38>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0b      	bge.n	80032a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_FLASH_Unlock+0x38>)
 800328c:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_FLASH_Unlock+0x3c>)
 800328e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_FLASH_Unlock+0x38>)
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_FLASH_Unlock+0x40>)
 8003294:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_FLASH_Unlock+0x38>)
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	da01      	bge.n	80032a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032a2:	79fb      	ldrb	r3, [r7, #7]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40023c00 	.word	0x40023c00
 80032b4:	45670123 	.word	0x45670123
 80032b8:	cdef89ab 	.word	0xcdef89ab

080032bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <FLASH_WaitForLastOperation+0x78>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80032ce:	f7fe fe75 	bl	8001fbc <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80032d4:	e010      	b.n	80032f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d00c      	beq.n	80032f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <FLASH_WaitForLastOperation+0x38>
 80032e4:	f7fe fe6a 	bl	8001fbc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d201      	bcs.n	80032f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e019      	b.n	800332c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <FLASH_WaitForLastOperation+0x7c>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e8      	bne.n	80032d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <FLASH_WaitForLastOperation+0x7c>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003310:	f000 f8b2 	bl	8003478 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e009      	b.n	800332c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <FLASH_WaitForLastOperation+0x7c>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <FLASH_WaitForLastOperation+0x7c>)
 8003326:	2201      	movs	r2, #1
 8003328:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
  
}  
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20004850 	.word	0x20004850
 8003338:	40023c00 	.word	0x40023c00

0800333c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800333c:	b490      	push	{r4, r7}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <FLASH_Program_DoubleWord+0x5c>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	4a12      	ldr	r2, [pc, #72]	; (8003398 <FLASH_Program_DoubleWord+0x5c>)
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <FLASH_Program_DoubleWord+0x5c>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <FLASH_Program_DoubleWord+0x5c>)
 800335a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800335e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <FLASH_Program_DoubleWord+0x5c>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <FLASH_Program_DoubleWord+0x5c>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003372:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	0013      	movs	r3, r2
 8003380:	2400      	movs	r4, #0
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	3204      	adds	r2, #4
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bc90      	pop	{r4, r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00

0800339c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <FLASH_Program_Word+0x44>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <FLASH_Program_Word+0x44>)
 80033ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <FLASH_Program_Word+0x44>)
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <FLASH_Program_Word+0x44>)
 80033b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <FLASH_Program_Word+0x44>)
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <FLASH_Program_Word+0x44>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80033f0:	4b0e      	ldr	r3, [pc, #56]	; (800342c <FLASH_Program_HalfWord+0x48>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <FLASH_Program_HalfWord+0x48>)
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <FLASH_Program_HalfWord+0x48>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <FLASH_Program_HalfWord+0x48>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <FLASH_Program_HalfWord+0x48>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a07      	ldr	r2, [pc, #28]	; (800342c <FLASH_Program_HalfWord+0x48>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	801a      	strh	r2, [r3, #0]
 800341a:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40023c00 	.word	0x40023c00

08003430 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <FLASH_Program_Byte+0x44>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <FLASH_Program_Byte+0x44>)
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <FLASH_Program_Byte+0x44>)
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <FLASH_Program_Byte+0x44>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <FLASH_Program_Byte+0x44>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4a07      	ldr	r2, [pc, #28]	; (8003474 <FLASH_Program_Byte+0x44>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023c00 	.word	0x40023c00

08003478 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <FLASH_SetErrorCode+0x8c>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003488:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <FLASH_SetErrorCode+0x90>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f043 0320 	orr.w	r3, r3, #32
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <FLASH_SetErrorCode+0x90>)
 8003492:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <FLASH_SetErrorCode+0x8c>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f043 0310 	orr.w	r3, r3, #16
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034aa:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <FLASH_SetErrorCode+0x8c>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f043 0308 	orr.w	r3, r3, #8
 80034c0:	4a11      	ldr	r2, [pc, #68]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034c2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <FLASH_SetErrorCode+0x8c>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034da:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <FLASH_SetErrorCode+0x8c>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	4a05      	ldr	r2, [pc, #20]	; (8003508 <FLASH_SetErrorCode+0x90>)
 80034f2:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <FLASH_SetErrorCode+0x8c>)
 80034f6:	22f2      	movs	r2, #242	; 0xf2
 80034f8:	60da      	str	r2, [r3, #12]
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40023c00 	.word	0x40023c00
 8003508:	20004850 	.word	0x20004850

0800350c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800351e:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_FLASHEx_Erase+0xd0>)
 8003520:	7d1b      	ldrb	r3, [r3, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_FLASHEx_Erase+0x1e>
 8003526:	2302      	movs	r3, #2
 8003528:	e053      	b.n	80035d2 <HAL_FLASHEx_Erase+0xc6>
 800352a:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <HAL_FLASHEx_Erase+0xd0>)
 800352c:	2201      	movs	r2, #1
 800352e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003530:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003534:	f7ff fec2 	bl	80032bc <FLASH_WaitForLastOperation>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d143      	bne.n	80035ca <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d112      	bne.n	8003578 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f843 	bl	80035e4 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800355e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003562:	f7ff feab 	bl	80032bc <FLASH_WaitForLastOperation>
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_FLASHEx_Erase+0xd4>)
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_FLASHEx_Erase+0xd4>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6113      	str	r3, [r2, #16]
 8003576:	e028      	b.n	80035ca <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	e01c      	b.n	80035ba <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4619      	mov	r1, r3
 8003588:	68b8      	ldr	r0, [r7, #8]
 800358a:	f000 f84f 	bl	800362c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800358e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003592:	f7ff fe93 	bl	80032bc <FLASH_WaitForLastOperation>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_FLASHEx_Erase+0xd4>)
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_FLASHEx_Erase+0xd4>)
 80035a0:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 80035a4:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	601a      	str	r2, [r3, #0]
          break;
 80035b2:	e00a      	b.n	80035ca <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	3301      	adds	r3, #1
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d3da      	bcc.n	8003580 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_FLASHEx_Erase+0xd0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	751a      	strb	r2, [r3, #20]

  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20004850 	.word	0x20004850
 80035e0:	40023c00 	.word	0x40023c00

080035e4 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <FLASH_MassErase+0x44>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <FLASH_MassErase+0x44>)
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <FLASH_MassErase+0x44>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <FLASH_MassErase+0x44>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <FLASH_MassErase+0x44>)
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4313      	orrs	r3, r2
 8003610:	4a05      	ldr	r2, [pc, #20]	; (8003628 <FLASH_MassErase+0x44>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	6113      	str	r3, [r2, #16]
 8003618:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40023c00 	.word	0x40023c00

0800362c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e010      	b.n	800366a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d103      	bne.n	8003656 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800364e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e009      	b.n	800366a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d103      	bne.n	8003664 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800365c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e002      	b.n	800366a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003668:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <FLASH_Erase_Sector+0x90>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4a13      	ldr	r2, [pc, #76]	; (80036bc <FLASH_Erase_Sector+0x90>)
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <FLASH_Erase_Sector+0x90>)
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	4910      	ldr	r1, [pc, #64]	; (80036bc <FLASH_Erase_Sector+0x90>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <FLASH_Erase_Sector+0x90>)
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <FLASH_Erase_Sector+0x90>)
 8003688:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800368c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <FLASH_Erase_Sector+0x90>)
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4313      	orrs	r3, r2
 8003698:	4a08      	ldr	r2, [pc, #32]	; (80036bc <FLASH_Erase_Sector+0x90>)
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <FLASH_Erase_Sector+0x90>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a05      	ldr	r2, [pc, #20]	; (80036bc <FLASH_Erase_Sector+0x90>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	6113      	str	r3, [r2, #16]
 80036ac:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40023c00 	.word	0x40023c00

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e175      	b.n	80039cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 8164 	bne.w	80039c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x4e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b12      	cmp	r3, #18
 800370c:	d123      	bne.n	8003756 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	08da      	lsrs	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3208      	adds	r2, #8
 8003716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	220f      	movs	r2, #15
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00b      	beq.n	80037aa <HAL_GPIO_Init+0xea>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d007      	beq.n	80037aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800379e:	2b11      	cmp	r3, #17
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b12      	cmp	r3, #18
 80037a8:	d130      	bne.n	800380c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0201 	and.w	r2, r3, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80be 	beq.w	80039c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <HAL_GPIO_Init+0x320>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a64      	ldr	r2, [pc, #400]	; (80039e0 <HAL_GPIO_Init+0x320>)
 8003850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b62      	ldr	r3, [pc, #392]	; (80039e0 <HAL_GPIO_Init+0x320>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003862:	4a60      	ldr	r2, [pc, #384]	; (80039e4 <HAL_GPIO_Init+0x324>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <HAL_GPIO_Init+0x328>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d037      	beq.n	80038fe <HAL_GPIO_Init+0x23e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a56      	ldr	r2, [pc, #344]	; (80039ec <HAL_GPIO_Init+0x32c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d031      	beq.n	80038fa <HAL_GPIO_Init+0x23a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a55      	ldr	r2, [pc, #340]	; (80039f0 <HAL_GPIO_Init+0x330>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <HAL_GPIO_Init+0x236>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a54      	ldr	r2, [pc, #336]	; (80039f4 <HAL_GPIO_Init+0x334>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x232>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a53      	ldr	r2, [pc, #332]	; (80039f8 <HAL_GPIO_Init+0x338>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x22e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_GPIO_Init+0x33c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x22a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_GPIO_Init+0x340>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x226>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a50      	ldr	r2, [pc, #320]	; (8003a04 <HAL_GPIO_Init+0x344>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x222>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4f      	ldr	r2, [pc, #316]	; (8003a08 <HAL_GPIO_Init+0x348>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x21e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4e      	ldr	r2, [pc, #312]	; (8003a0c <HAL_GPIO_Init+0x34c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x21a>
 80038d6:	2309      	movs	r3, #9
 80038d8:	e012      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038da:	230a      	movs	r3, #10
 80038dc:	e010      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038de:	2308      	movs	r3, #8
 80038e0:	e00e      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00c      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038e6:	2306      	movs	r3, #6
 80038e8:	e00a      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e008      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038fe:	2300      	movs	r3, #0
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f002 0203 	and.w	r2, r2, #3
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	4093      	lsls	r3, r2
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003910:	4934      	ldr	r1, [pc, #208]	; (80039e4 <HAL_GPIO_Init+0x324>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391e:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <HAL_GPIO_Init+0x350>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003942:	4a33      	ldr	r2, [pc, #204]	; (8003a10 <HAL_GPIO_Init+0x350>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003948:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_GPIO_Init+0x350>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_GPIO_Init+0x350>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003972:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_GPIO_Init+0x350>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <HAL_GPIO_Init+0x350>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <HAL_GPIO_Init+0x350>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <HAL_GPIO_Init+0x350>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	f67f ae86 	bls.w	80036e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	3724      	adds	r7, #36	; 0x24
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40021c00 	.word	0x40021c00
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40022400 	.word	0x40022400
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fc54 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7a:	b08f      	sub	sp, #60	; 0x3c
 8003a7c:	af0a      	add	r7, sp, #40	; 0x28
 8003a7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e10a      	b.n	8003ca0 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe f886 	bl	8001bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 f90d 	bl	8005cd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	687e      	ldr	r6, [r7, #4]
 8003abe:	466d      	mov	r5, sp
 8003ac0:	f106 0410 	add.w	r4, r6, #16
 8003ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad4:	1d33      	adds	r3, r6, #4
 8003ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad8:	6838      	ldr	r0, [r7, #0]
 8003ada:	f002 f8a1 	bl	8005c20 <USB_CoreInit>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0d7      	b.n	8003ca0 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 f8fb 	bl	8005cf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e04a      	b.n	8003b98 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	333d      	adds	r3, #61	; 0x3d
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	333c      	adds	r3, #60	; 0x3c
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	b298      	uxth	r0, r3
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3342      	adds	r3, #66	; 0x42
 8003b3e:	4602      	mov	r2, r0
 8003b40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	333f      	adds	r3, #63	; 0x3f
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	3344      	adds	r3, #68	; 0x44
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3348      	adds	r3, #72	; 0x48
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3350      	adds	r3, #80	; 0x50
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	3301      	adds	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3af      	bcc.n	8003b02 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e044      	b.n	8003c32 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3b5      	bcc.n	8003ba8 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	687e      	ldr	r6, [r7, #4]
 8003c44:	466d      	mov	r5, sp
 8003c46:	f106 0410 	add.w	r4, r6, #16
 8003c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5a:	1d33      	adds	r3, r6, #4
 8003c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f002 f872 	bl	8005d48 <USB_DevInit>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e014      	b.n	8003ca0 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f80a 	bl	8003ca8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f002 fa32 	bl	8006102 <USB_DevDisconnect>

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ca8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_PCDEx_ActivateLPM+0x44>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	10000003 	.word	0x10000003

08003cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e25c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8087 	beq.w	8003e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00c      	beq.n	8003d5a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d40:	4b93      	ldr	r3, [pc, #588]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d112      	bne.n	8003d72 <HAL_RCC_OscConfig+0x62>
 8003d4c:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d58:	d10b      	bne.n	8003d72 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d06c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x130>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d168      	bne.n	8003e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e236      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCC_OscConfig+0x7a>
 8003d7c:	4b84      	ldr	r3, [pc, #528]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a83      	ldr	r2, [pc, #524]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e02e      	b.n	8003de8 <HAL_RCC_OscConfig+0xd8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0x9c>
 8003d92:	4b7f      	ldr	r3, [pc, #508]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a7e      	ldr	r2, [pc, #504]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7b      	ldr	r2, [pc, #492]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xd8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xc0>
 8003db6:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a75      	ldr	r2, [pc, #468]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b73      	ldr	r3, [pc, #460]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xd8>
 8003dd0:	4b6f      	ldr	r3, [pc, #444]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6e      	ldr	r2, [pc, #440]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b6c      	ldr	r3, [pc, #432]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a6b      	ldr	r2, [pc, #428]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe f8e4 	bl	8001fbc <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe f8e0 	bl	8001fbc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1ea      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe8>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fe f8d0 	bl	8001fbc <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fe f8cc 	bl	8001fbc <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1d6      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b57      	ldr	r3, [pc, #348]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x110>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d069      	beq.n	8003f22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e4e:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x190>
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x17a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1aa      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	493d      	ldr	r1, [pc, #244]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e040      	b.n	8003f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f882 	bl	8001fbc <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fe f87e 	bl	8001fbc <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e188      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4929      	ldr	r1, [pc, #164]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
 8003eee:	e018      	b.n	8003f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f85e 	bl	8001fbc <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fe f85a 	bl	8001fbc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e164      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d038      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d019      	beq.n	8003f6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3a:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe f83b 	bl	8001fbc <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe f837 	bl	8001fbc <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e141      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x23a>
 8003f68:	e01a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <HAL_RCC_OscConfig+0x280>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe f821 	bl	8001fbc <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7fe f81d 	bl	8001fbc <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d903      	bls.n	8003f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e127      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
 8003f90:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	4b94      	ldr	r3, [pc, #592]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a4 	beq.w	80040f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b8e      	ldr	r3, [pc, #568]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10d      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	4b8b      	ldr	r3, [pc, #556]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	4a8a      	ldr	r2, [pc, #552]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc6:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd6:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCC_OscConfig+0x4dc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d118      	bne.n	8004014 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fe2:	4b82      	ldr	r3, [pc, #520]	; (80041ec <HAL_RCC_OscConfig+0x4dc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a81      	ldr	r2, [pc, #516]	; (80041ec <HAL_RCC_OscConfig+0x4dc>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fee:	f7fd ffe5 	bl	8001fbc <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7fd ffe1 	bl	8001fbc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b64      	cmp	r3, #100	; 0x64
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0eb      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004008:	4b78      	ldr	r3, [pc, #480]	; (80041ec <HAL_RCC_OscConfig+0x4dc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x31a>
 800401c:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a71      	ldr	r2, [pc, #452]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	e02d      	b.n	8004086 <HAL_RCC_OscConfig+0x376>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x33c>
 8004032:	4b6d      	ldr	r3, [pc, #436]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	4a6c      	ldr	r2, [pc, #432]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6713      	str	r3, [r2, #112]	; 0x70
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a69      	ldr	r2, [pc, #420]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	e01c      	b.n	8004086 <HAL_RCC_OscConfig+0x376>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0x35e>
 8004054:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a63      	ldr	r2, [pc, #396]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a60      	ldr	r2, [pc, #384]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
 800406c:	e00b      	b.n	8004086 <HAL_RCC_OscConfig+0x376>
 800406e:	4b5e      	ldr	r3, [pc, #376]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a5d      	ldr	r2, [pc, #372]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a5a      	ldr	r2, [pc, #360]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d015      	beq.n	80040ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408e:	f7fd ff95 	bl	8001fbc <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fd ff91 	bl	8001fbc <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e099      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	4b4e      	ldr	r3, [pc, #312]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ee      	beq.n	8004096 <HAL_RCC_OscConfig+0x386>
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fd ff7f 	bl	8001fbc <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd ff7b 	bl	8001fbc <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e083      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ee      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a3e      	ldr	r2, [pc, #248]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d06f      	beq.n	80041de <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fe:	4b3a      	ldr	r3, [pc, #232]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b08      	cmp	r3, #8
 8004108:	d067      	beq.n	80041da <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d149      	bne.n	80041a6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a34      	ldr	r2, [pc, #208]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fd ff4d 	bl	8001fbc <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004126:	f7fd ff49 	bl	8001fbc <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e053      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004138:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f0      	bne.n	8004126 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	019b      	lsls	r3, r3, #6
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	3b01      	subs	r3, #1
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	4313      	orrs	r3, r2
 800416a:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 800416c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004170:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 8004178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fd ff1d 	bl	8001fbc <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fd ff19 	bl	8001fbc <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e023      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x476>
 80041a4:	e01b      	b.n	80041de <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80041ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fd ff03 	bl	8001fbc <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fd feff 	bl	8001fbc <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e009      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCC_OscConfig+0x4d8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x4aa>
 80041d8:	e001      	b.n	80041de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0ce      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004208:	4b69      	ldr	r3, [pc, #420]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d910      	bls.n	8004238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 020f 	bic.w	r2, r3, #15
 800421e:	4964      	ldr	r1, [pc, #400]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b6      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a57      	ldr	r2, [pc, #348]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800425a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a51      	ldr	r2, [pc, #324]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494c      	ldr	r1, [pc, #304]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d040      	beq.n	8004314 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d115      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07d      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e071      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c2:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e069      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4935      	ldr	r1, [pc, #212]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e4:	f7fd fe6a 	bl	8001fbc <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fd fe66 	bl	8001fbc <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e051      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004314:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d210      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 020f 	bic.w	r2, r3, #15
 800432a:	4921      	ldr	r1, [pc, #132]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e030      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4915      	ldr	r1, [pc, #84]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490d      	ldr	r1, [pc, #52]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004382:	f000 f81d 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004386:	4601      	mov	r1, r0
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	5cd3      	ldrb	r3, [r2, r3]
 8004396:	fa21 f303 	lsr.w	r3, r1, r3
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <HAL_RCC_ClockConfig+0x1cc>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fd fc62 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08019930 	.word	0x08019930
 80043bc:	20000018 	.word	0x20000018

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	2300      	movs	r3, #0
 80043d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d007      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x32>
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d008      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x38>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 80b4 	bne.w	8004554 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b5e      	ldr	r3, [pc, #376]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043ee:	60bb      	str	r3, [r7, #8]
       break;
 80043f0:	e0b3      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f2:	4b5e      	ldr	r3, [pc, #376]	; (800456c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043f4:	60bb      	str	r3, [r7, #8]
      break;
 80043f6:	e0b0      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f8:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004400:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004402:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04a      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b55      	ldr	r3, [pc, #340]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	f04f 0400 	mov.w	r4, #0
 8004418:	f240 11ff 	movw	r1, #511	; 0x1ff
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	ea03 0501 	and.w	r5, r3, r1
 8004424:	ea04 0602 	and.w	r6, r4, r2
 8004428:	4629      	mov	r1, r5
 800442a:	4632      	mov	r2, r6
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	f04f 0400 	mov.w	r4, #0
 8004434:	0154      	lsls	r4, r2, #5
 8004436:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800443a:	014b      	lsls	r3, r1, #5
 800443c:	4619      	mov	r1, r3
 800443e:	4622      	mov	r2, r4
 8004440:	1b49      	subs	r1, r1, r5
 8004442:	eb62 0206 	sbc.w	r2, r2, r6
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f04f 0400 	mov.w	r4, #0
 800444e:	0194      	lsls	r4, r2, #6
 8004450:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004454:	018b      	lsls	r3, r1, #6
 8004456:	1a5b      	subs	r3, r3, r1
 8004458:	eb64 0402 	sbc.w	r4, r4, r2
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	00e2      	lsls	r2, r4, #3
 8004466:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800446a:	00d9      	lsls	r1, r3, #3
 800446c:	460b      	mov	r3, r1
 800446e:	4614      	mov	r4, r2
 8004470:	195b      	adds	r3, r3, r5
 8004472:	eb44 0406 	adc.w	r4, r4, r6
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	0262      	lsls	r2, r4, #9
 8004480:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004484:	0259      	lsls	r1, r3, #9
 8004486:	460b      	mov	r3, r1
 8004488:	4614      	mov	r4, r2
 800448a:	4618      	mov	r0, r3
 800448c:	4621      	mov	r1, r4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f04f 0400 	mov.w	r4, #0
 8004494:	461a      	mov	r2, r3
 8004496:	4623      	mov	r3, r4
 8004498:	f7fb ff1a 	bl	80002d0 <__aeabi_uldivmod>
 800449c:	4603      	mov	r3, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e049      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a4:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	f04f 0400 	mov.w	r4, #0
 80044ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	ea03 0501 	and.w	r5, r3, r1
 80044ba:	ea04 0602 	and.w	r6, r4, r2
 80044be:	4629      	mov	r1, r5
 80044c0:	4632      	mov	r2, r6
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	f04f 0400 	mov.w	r4, #0
 80044ca:	0154      	lsls	r4, r2, #5
 80044cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044d0:	014b      	lsls	r3, r1, #5
 80044d2:	4619      	mov	r1, r3
 80044d4:	4622      	mov	r2, r4
 80044d6:	1b49      	subs	r1, r1, r5
 80044d8:	eb62 0206 	sbc.w	r2, r2, r6
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f04f 0400 	mov.w	r4, #0
 80044e4:	0194      	lsls	r4, r2, #6
 80044e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044ea:	018b      	lsls	r3, r1, #6
 80044ec:	1a5b      	subs	r3, r3, r1
 80044ee:	eb64 0402 	sbc.w	r4, r4, r2
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	00e2      	lsls	r2, r4, #3
 80044fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004500:	00d9      	lsls	r1, r3, #3
 8004502:	460b      	mov	r3, r1
 8004504:	4614      	mov	r4, r2
 8004506:	195b      	adds	r3, r3, r5
 8004508:	eb44 0406 	adc.w	r4, r4, r6
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	02a2      	lsls	r2, r4, #10
 8004516:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800451a:	0299      	lsls	r1, r3, #10
 800451c:	460b      	mov	r3, r1
 800451e:	4614      	mov	r4, r2
 8004520:	4618      	mov	r0, r3
 8004522:	4621      	mov	r1, r4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f04f 0400 	mov.w	r4, #0
 800452a:	461a      	mov	r2, r3
 800452c:	4623      	mov	r3, r4
 800452e:	f7fb fecf 	bl	80002d0 <__aeabi_uldivmod>
 8004532:	4603      	mov	r3, r0
 8004534:	460c      	mov	r4, r1
 8004536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	3301      	adds	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	60bb      	str	r3, [r7, #8]
      break;
 8004552:	e002      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004556:	60bb      	str	r3, [r7, #8]
      break;
 8004558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800455a:	68bb      	ldr	r3, [r7, #8]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004564:	40023800 	.word	0x40023800
 8004568:	00f42400 	.word	0x00f42400
 800456c:	007a1200 	.word	0x007a1200

08004570 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_RCC_GetHCLKFreq+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000018 	.word	0x20000018

08004588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800458c:	f7ff fff0 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8004590:	4601      	mov	r1, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0a9b      	lsrs	r3, r3, #10
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4a03      	ldr	r2, [pc, #12]	; (80045ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	08019940 	.word	0x08019940

080045b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045b4:	f7ff ffdc 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80045b8:	4601      	mov	r1, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0b5b      	lsrs	r3, r3, #13
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4a03      	ldr	r2, [pc, #12]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c6:	5cd3      	ldrb	r3, [r2, r3]
 80045c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08019940 	.word	0x08019940

080045d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	220f      	movs	r2, #15
 80045e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <HAL_RCC_GetClockConfig+0x5c>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0203 	and.w	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCC_GetClockConfig+0x5c>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCC_GetClockConfig+0x5c>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCC_GetClockConfig+0x5c>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <HAL_RCC_GetClockConfig+0x60>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	40023c00 	.word	0x40023c00

0800463c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004664:	4b69      	ldr	r3, [pc, #420]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a68      	ldr	r2, [pc, #416]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800466e:	6093      	str	r3, [r2, #8]
 8004670:	4b66      	ldr	r3, [pc, #408]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	4964      	ldr	r1, [pc, #400]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d017      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004696:	4b5d      	ldr	r3, [pc, #372]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	4959      	ldr	r1, [pc, #356]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	d101      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d017      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046d2:	4b4e      	ldr	r3, [pc, #312]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	494a      	ldr	r1, [pc, #296]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f0:	d101      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046f2:	2301      	movs	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 808b 	beq.w	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b3a      	ldr	r3, [pc, #232]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a39      	ldr	r2, [pc, #228]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
 800472c:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004738:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a34      	ldr	r2, [pc, #208]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fd fc3a 	bl	8001fbc <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fd fc36 	bl	8001fbc <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e355      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800476a:	4b28      	ldr	r3, [pc, #160]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d035      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d02e      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	4a1d      	ldr	r2, [pc, #116]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800479e:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	4a1a      	ldr	r2, [pc, #104]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047b0:	4b16      	ldr	r3, [pc, #88]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d114      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd fbfe 	bl	8001fbc <HAL_GetTick>
 80047c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd fbfa 	bl	8001fbc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e317      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ee      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f2:	d111      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004802:	400b      	ands	r3, r1
 8004804:	4901      	ldr	r1, [pc, #4]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
 800480a:	e00b      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800480c:	40023800 	.word	0x40023800
 8004810:	40007000 	.word	0x40007000
 8004814:	0ffffcff 	.word	0x0ffffcff
 8004818:	4bb0      	ldr	r3, [pc, #704]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4aaf      	ldr	r2, [pc, #700]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800481e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004822:	6093      	str	r3, [r2, #8]
 8004824:	4bad      	ldr	r3, [pc, #692]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	49aa      	ldr	r1, [pc, #680]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d010      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004842:	4ba6      	ldr	r3, [pc, #664]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004848:	4aa4      	ldr	r2, [pc, #656]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800484a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004852:	4ba2      	ldr	r3, [pc, #648]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004854:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	499f      	ldr	r1, [pc, #636]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004870:	4b9a      	ldr	r3, [pc, #616]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487e:	4997      	ldr	r1, [pc, #604]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004892:	4b92      	ldr	r3, [pc, #584]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a0:	498e      	ldr	r1, [pc, #568]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b4:	4b89      	ldr	r3, [pc, #548]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c2:	4986      	ldr	r1, [pc, #536]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048d6:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	497d      	ldr	r1, [pc, #500]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f8:	4b78      	ldr	r3, [pc, #480]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	4975      	ldr	r1, [pc, #468]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800491a:	4b70      	ldr	r3, [pc, #448]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f023 020c 	bic.w	r2, r3, #12
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	496c      	ldr	r1, [pc, #432]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800493c:	4b67      	ldr	r3, [pc, #412]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	4964      	ldr	r1, [pc, #400]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	495b      	ldr	r1, [pc, #364]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004980:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	4953      	ldr	r1, [pc, #332]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049a2:	4b4e      	ldr	r3, [pc, #312]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	494a      	ldr	r1, [pc, #296]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049c4:	4b45      	ldr	r3, [pc, #276]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	4942      	ldr	r1, [pc, #264]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049e6:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f4:	4939      	ldr	r1, [pc, #228]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a08:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a16:	4931      	ldr	r1, [pc, #196]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d011      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a38:	4928      	ldr	r1, [pc, #160]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d101      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a78:	4918      	ldr	r1, [pc, #96]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a8c:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9c:	490f      	ldr	r1, [pc, #60]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d005      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab2:	f040 80d8 	bne.w	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a08      	ldr	r2, [pc, #32]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004abc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac2:	f7fd fa7b 	bl	8001fbc <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aca:	f7fd fa77 	bl	8001fbc <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b64      	cmp	r3, #100	; 0x64
 8004ad6:	d903      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e196      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004adc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ae0:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1ee      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d021      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11d      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b00:	4b64      	ldr	r3, [pc, #400]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b0e:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b14:	0e1b      	lsrs	r3, r3, #24
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	019a      	lsls	r2, r3, #6
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	071b      	lsls	r3, r3, #28
 8004b34:	4957      	ldr	r1, [pc, #348]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d02e      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b66:	d129      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6e:	0c1b      	lsrs	r3, r3, #16
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7c:	0f1b      	lsrs	r3, r3, #28
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	019a      	lsls	r2, r3, #6
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	431a      	orrs	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	071b      	lsls	r3, r3, #28
 8004b9c:	493d      	ldr	r1, [pc, #244]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004baa:	f023 021f 	bic.w	r2, r3, #31
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	4937      	ldr	r1, [pc, #220]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01d      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bc8:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	0e1b      	lsrs	r3, r3, #24
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bd6:	4b2f      	ldr	r3, [pc, #188]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bdc:	0f1b      	lsrs	r3, r3, #28
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	019a      	lsls	r2, r3, #6
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	071b      	lsls	r3, r3, #28
 8004bfc:	4925      	ldr	r1, [pc, #148]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d011      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	019a      	lsls	r2, r3, #6
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	071b      	lsls	r3, r3, #28
 8004c2c:	4919      	ldr	r1, [pc, #100]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a16      	ldr	r2, [pc, #88]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fd f9bc 	bl	8001fbc <HAL_GetTick>
 8004c44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c48:	f7fd f9b8 	bl	8001fbc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0d7      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 80cd 	bne.w	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fd f99f 	bl	8001fbc <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c82:	f7fd f99b 	bl	8001fbc <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d903      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e0ba      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004c94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c98:	4b5e      	ldr	r3, [pc, #376]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca4:	d0ed      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d02e      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d12a      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cce:	4b51      	ldr	r3, [pc, #324]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cdc:	4b4d      	ldr	r3, [pc, #308]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	0f1b      	lsrs	r3, r3, #28
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	019a      	lsls	r2, r3, #6
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	4944      	ldr	r1, [pc, #272]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d0a:	4b42      	ldr	r3, [pc, #264]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	493d      	ldr	r1, [pc, #244]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d022      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d38:	d11d      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	0e1b      	lsrs	r3, r3, #24
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d48:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	0f1b      	lsrs	r3, r3, #28
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	019a      	lsls	r2, r3, #6
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	431a      	orrs	r2, r3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	071b      	lsls	r3, r3, #28
 8004d6e:	4929      	ldr	r1, [pc, #164]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d028      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d82:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	0e1b      	lsrs	r3, r3, #24
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	019a      	lsls	r2, r3, #6
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	431a      	orrs	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	071b      	lsls	r3, r3, #28
 8004db6:	4917      	ldr	r1, [pc, #92]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	4911      	ldr	r1, [pc, #68]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a0e      	ldr	r2, [pc, #56]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de0:	f7fd f8ec 	bl	8001fbc <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de8:	f7fd f8e8 	bl	8001fbc <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	; 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e007      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e06:	d1ef      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e01d      	b.n	8004e66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f815 	bl	8004e6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 f986 	bl	8005168 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <HAL_TIM_Base_Start_IT+0x50>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d00b      	beq.n	8004ec6 <HAL_TIM_Base_Start_IT+0x42>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d007      	beq.n	8004ec6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	00010007 	.word	0x00010007

08004ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d122      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d11b      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0202 	mvn.w	r2, #2
 8004f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f905 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8f7 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f908 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0204 	mvn.w	r2, #4
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8db 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8cd 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f8de 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0208 	mvn.w	r2, #8
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8b1 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8a3 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8b4 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0210 	mvn.w	r2, #16
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2208      	movs	r2, #8
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f887 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f879 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f88a 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d10e      	bne.n	800505c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d107      	bne.n	800505c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0201 	mvn.w	r2, #1
 8005054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc fd24 	bl	8001aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d10e      	bne.n	8005088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	2b80      	cmp	r3, #128	; 0x80
 8005076:	d107      	bne.n	8005088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f91a 	bl	80052bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d10e      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d107      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f90d 	bl	80052d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d10e      	bne.n	80050e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f838 	bl	8005152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d10e      	bne.n	800510e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d107      	bne.n	800510e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f06f 0220 	mvn.w	r2, #32
 8005106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8cd 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a40      	ldr	r2, [pc, #256]	; (800527c <TIM_Base_SetConfig+0x114>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d013      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d00f      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a3d      	ldr	r2, [pc, #244]	; (8005280 <TIM_Base_SetConfig+0x118>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <TIM_Base_SetConfig+0x11c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3b      	ldr	r2, [pc, #236]	; (8005288 <TIM_Base_SetConfig+0x120>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a3a      	ldr	r2, [pc, #232]	; (800528c <TIM_Base_SetConfig+0x124>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d108      	bne.n	80051ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2f      	ldr	r2, [pc, #188]	; (800527c <TIM_Base_SetConfig+0x114>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02b      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d027      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <TIM_Base_SetConfig+0x118>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d023      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <TIM_Base_SetConfig+0x11c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01f      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <TIM_Base_SetConfig+0x120>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01b      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a29      	ldr	r2, [pc, #164]	; (800528c <TIM_Base_SetConfig+0x124>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d017      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a28      	ldr	r2, [pc, #160]	; (8005290 <TIM_Base_SetConfig+0x128>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a27      	ldr	r2, [pc, #156]	; (8005294 <TIM_Base_SetConfig+0x12c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00f      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <TIM_Base_SetConfig+0x130>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00b      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a25      	ldr	r2, [pc, #148]	; (800529c <TIM_Base_SetConfig+0x134>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <TIM_Base_SetConfig+0x138>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a23      	ldr	r2, [pc, #140]	; (80052a4 <TIM_Base_SetConfig+0x13c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d108      	bne.n	800522c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <TIM_Base_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_Base_SetConfig+0xf8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a0c      	ldr	r2, [pc, #48]	; (800528c <TIM_Base_SetConfig+0x124>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d103      	bne.n	8005268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	615a      	str	r2, [r3, #20]
}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40010400 	.word	0x40010400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800
 800529c:	40001800 	.word	0x40001800
 80052a0:	40001c00 	.word	0x40001c00
 80052a4:	40002000 	.word	0x40002000

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e040      	b.n	8005378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fc0e 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8be 	bl	80054a4 <UART_SetConfig>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e022      	b.n	8005378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb56 	bl	80059ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800534e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800535e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fbdd 	bl	8005b30 <UART_CheckIdleState>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005394:	2b20      	cmp	r3, #32
 8005396:	d17f      	bne.n	8005498 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Transmit+0x24>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e078      	b.n	800549a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UART_Transmit+0x36>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e071      	b.n	800549a <HAL_UART_Transmit+0x11a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2221      	movs	r2, #33	; 0x21
 80053c8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80053ca:	f7fc fdf7 	bl	8001fbc <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e8:	d108      	bne.n	80053fc <HAL_UART_Transmit+0x7c>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e003      	b.n	8005404 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005404:	e02c      	b.n	8005460 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fbbc 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e03c      	b.n	800549a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005434:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3302      	adds	r3, #2
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	e007      	b.n	800544e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3301      	adds	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1cc      	bne.n	8005406 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	2140      	movs	r1, #64	; 0x40
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fb89 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e009      	b.n	800549a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4bb1      	ldr	r3, [pc, #708]	; (8005798 <UART_SetConfig+0x2f4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	6939      	ldr	r1, [r7, #16]
 80054dc:	430b      	orrs	r3, r1
 80054de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a9f      	ldr	r2, [pc, #636]	; (800579c <UART_SetConfig+0x2f8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d121      	bne.n	8005568 <UART_SetConfig+0xc4>
 8005524:	4b9e      	ldr	r3, [pc, #632]	; (80057a0 <UART_SetConfig+0x2fc>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b03      	cmp	r3, #3
 8005530:	d816      	bhi.n	8005560 <UART_SetConfig+0xbc>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x94>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005549 	.word	0x08005549
 800553c:	08005555 	.word	0x08005555
 8005540:	0800554f 	.word	0x0800554f
 8005544:	0800555b 	.word	0x0800555b
 8005548:	2301      	movs	r3, #1
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e151      	b.n	80057f2 <UART_SetConfig+0x34e>
 800554e:	2302      	movs	r3, #2
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e14e      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005554:	2304      	movs	r3, #4
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e14b      	b.n	80057f2 <UART_SetConfig+0x34e>
 800555a:	2308      	movs	r3, #8
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e148      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005560:	2310      	movs	r3, #16
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	bf00      	nop
 8005566:	e144      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a8d      	ldr	r2, [pc, #564]	; (80057a4 <UART_SetConfig+0x300>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d134      	bne.n	80055dc <UART_SetConfig+0x138>
 8005572:	4b8b      	ldr	r3, [pc, #556]	; (80057a0 <UART_SetConfig+0x2fc>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d829      	bhi.n	80055d4 <UART_SetConfig+0x130>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0xe4>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055d5 	.word	0x080055d5
 8005594:	080055d5 	.word	0x080055d5
 8005598:	080055c9 	.word	0x080055c9
 800559c:	080055d5 	.word	0x080055d5
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	080055d5 	.word	0x080055d5
 80055a8:	080055c3 	.word	0x080055c3
 80055ac:	080055d5 	.word	0x080055d5
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055d5 	.word	0x080055d5
 80055b8:	080055cf 	.word	0x080055cf
 80055bc:	2300      	movs	r3, #0
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e117      	b.n	80057f2 <UART_SetConfig+0x34e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e114      	b.n	80057f2 <UART_SetConfig+0x34e>
 80055c8:	2304      	movs	r3, #4
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e111      	b.n	80057f2 <UART_SetConfig+0x34e>
 80055ce:	2308      	movs	r3, #8
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e10e      	b.n	80057f2 <UART_SetConfig+0x34e>
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	bf00      	nop
 80055da:	e10a      	b.n	80057f2 <UART_SetConfig+0x34e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <UART_SetConfig+0x304>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d120      	bne.n	8005628 <UART_SetConfig+0x184>
 80055e6:	4b6e      	ldr	r3, [pc, #440]	; (80057a0 <UART_SetConfig+0x2fc>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d00f      	beq.n	8005614 <UART_SetConfig+0x170>
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d802      	bhi.n	80055fe <UART_SetConfig+0x15a>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <UART_SetConfig+0x164>
 80055fc:	e010      	b.n	8005620 <UART_SetConfig+0x17c>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d005      	beq.n	800560e <UART_SetConfig+0x16a>
 8005602:	2b30      	cmp	r3, #48	; 0x30
 8005604:	d009      	beq.n	800561a <UART_SetConfig+0x176>
 8005606:	e00b      	b.n	8005620 <UART_SetConfig+0x17c>
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e0f1      	b.n	80057f2 <UART_SetConfig+0x34e>
 800560e:	2302      	movs	r3, #2
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e0ee      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005614:	2304      	movs	r3, #4
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e0eb      	b.n	80057f2 <UART_SetConfig+0x34e>
 800561a:	2308      	movs	r3, #8
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e0e8      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005620:	2310      	movs	r3, #16
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	bf00      	nop
 8005626:	e0e4      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5f      	ldr	r2, [pc, #380]	; (80057ac <UART_SetConfig+0x308>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d120      	bne.n	8005674 <UART_SetConfig+0x1d0>
 8005632:	4b5b      	ldr	r3, [pc, #364]	; (80057a0 <UART_SetConfig+0x2fc>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005638:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d00f      	beq.n	8005660 <UART_SetConfig+0x1bc>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d802      	bhi.n	800564a <UART_SetConfig+0x1a6>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <UART_SetConfig+0x1b0>
 8005648:	e010      	b.n	800566c <UART_SetConfig+0x1c8>
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d005      	beq.n	800565a <UART_SetConfig+0x1b6>
 800564e:	2bc0      	cmp	r3, #192	; 0xc0
 8005650:	d009      	beq.n	8005666 <UART_SetConfig+0x1c2>
 8005652:	e00b      	b.n	800566c <UART_SetConfig+0x1c8>
 8005654:	2300      	movs	r3, #0
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e0cb      	b.n	80057f2 <UART_SetConfig+0x34e>
 800565a:	2302      	movs	r3, #2
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e0c8      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005660:	2304      	movs	r3, #4
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e0c5      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005666:	2308      	movs	r3, #8
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e0c2      	b.n	80057f2 <UART_SetConfig+0x34e>
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	bf00      	nop
 8005672:	e0be      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a4d      	ldr	r2, [pc, #308]	; (80057b0 <UART_SetConfig+0x30c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d124      	bne.n	80056c8 <UART_SetConfig+0x224>
 800567e:	4b48      	ldr	r3, [pc, #288]	; (80057a0 <UART_SetConfig+0x2fc>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568c:	d012      	beq.n	80056b4 <UART_SetConfig+0x210>
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d802      	bhi.n	800569a <UART_SetConfig+0x1f6>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <UART_SetConfig+0x204>
 8005698:	e012      	b.n	80056c0 <UART_SetConfig+0x21c>
 800569a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569e:	d006      	beq.n	80056ae <UART_SetConfig+0x20a>
 80056a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a4:	d009      	beq.n	80056ba <UART_SetConfig+0x216>
 80056a6:	e00b      	b.n	80056c0 <UART_SetConfig+0x21c>
 80056a8:	2300      	movs	r3, #0
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e0a1      	b.n	80057f2 <UART_SetConfig+0x34e>
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e09e      	b.n	80057f2 <UART_SetConfig+0x34e>
 80056b4:	2304      	movs	r3, #4
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e09b      	b.n	80057f2 <UART_SetConfig+0x34e>
 80056ba:	2308      	movs	r3, #8
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e098      	b.n	80057f2 <UART_SetConfig+0x34e>
 80056c0:	2310      	movs	r3, #16
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	bf00      	nop
 80056c6:	e094      	b.n	80057f2 <UART_SetConfig+0x34e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a39      	ldr	r2, [pc, #228]	; (80057b4 <UART_SetConfig+0x310>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d124      	bne.n	800571c <UART_SetConfig+0x278>
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <UART_SetConfig+0x2fc>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	d012      	beq.n	8005708 <UART_SetConfig+0x264>
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e6:	d802      	bhi.n	80056ee <UART_SetConfig+0x24a>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <UART_SetConfig+0x258>
 80056ec:	e012      	b.n	8005714 <UART_SetConfig+0x270>
 80056ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f2:	d006      	beq.n	8005702 <UART_SetConfig+0x25e>
 80056f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f8:	d009      	beq.n	800570e <UART_SetConfig+0x26a>
 80056fa:	e00b      	b.n	8005714 <UART_SetConfig+0x270>
 80056fc:	2301      	movs	r3, #1
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e077      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e074      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005708:	2304      	movs	r3, #4
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e071      	b.n	80057f2 <UART_SetConfig+0x34e>
 800570e:	2308      	movs	r3, #8
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e06e      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005714:	2310      	movs	r3, #16
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	bf00      	nop
 800571a:	e06a      	b.n	80057f2 <UART_SetConfig+0x34e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <UART_SetConfig+0x314>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d124      	bne.n	8005770 <UART_SetConfig+0x2cc>
 8005726:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <UART_SetConfig+0x2fc>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005734:	d012      	beq.n	800575c <UART_SetConfig+0x2b8>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d802      	bhi.n	8005742 <UART_SetConfig+0x29e>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <UART_SetConfig+0x2ac>
 8005740:	e012      	b.n	8005768 <UART_SetConfig+0x2c4>
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005746:	d006      	beq.n	8005756 <UART_SetConfig+0x2b2>
 8005748:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800574c:	d009      	beq.n	8005762 <UART_SetConfig+0x2be>
 800574e:	e00b      	b.n	8005768 <UART_SetConfig+0x2c4>
 8005750:	2300      	movs	r3, #0
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e04d      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005756:	2302      	movs	r3, #2
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e04a      	b.n	80057f2 <UART_SetConfig+0x34e>
 800575c:	2304      	movs	r3, #4
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e047      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005762:	2308      	movs	r3, #8
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e044      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005768:	2310      	movs	r3, #16
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	bf00      	nop
 800576e:	e040      	b.n	80057f2 <UART_SetConfig+0x34e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a11      	ldr	r2, [pc, #68]	; (80057bc <UART_SetConfig+0x318>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d139      	bne.n	80057ee <UART_SetConfig+0x34a>
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <UART_SetConfig+0x2fc>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005788:	d027      	beq.n	80057da <UART_SetConfig+0x336>
 800578a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800578e:	d817      	bhi.n	80057c0 <UART_SetConfig+0x31c>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01c      	beq.n	80057ce <UART_SetConfig+0x32a>
 8005794:	e027      	b.n	80057e6 <UART_SetConfig+0x342>
 8005796:	bf00      	nop
 8005798:	efff69f3 	.word	0xefff69f3
 800579c:	40011000 	.word	0x40011000
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40004400 	.word	0x40004400
 80057a8:	40004800 	.word	0x40004800
 80057ac:	40004c00 	.word	0x40004c00
 80057b0:	40005000 	.word	0x40005000
 80057b4:	40011400 	.word	0x40011400
 80057b8:	40007800 	.word	0x40007800
 80057bc:	40007c00 	.word	0x40007c00
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c4:	d006      	beq.n	80057d4 <UART_SetConfig+0x330>
 80057c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ca:	d009      	beq.n	80057e0 <UART_SetConfig+0x33c>
 80057cc:	e00b      	b.n	80057e6 <UART_SetConfig+0x342>
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e00e      	b.n	80057f2 <UART_SetConfig+0x34e>
 80057d4:	2302      	movs	r3, #2
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e00b      	b.n	80057f2 <UART_SetConfig+0x34e>
 80057da:	2304      	movs	r3, #4
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e008      	b.n	80057f2 <UART_SetConfig+0x34e>
 80057e0:	2308      	movs	r3, #8
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e005      	b.n	80057f2 <UART_SetConfig+0x34e>
 80057e6:	2310      	movs	r3, #16
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	bf00      	nop
 80057ec:	e001      	b.n	80057f2 <UART_SetConfig+0x34e>
 80057ee:	2310      	movs	r3, #16
 80057f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fa:	d17c      	bne.n	80058f6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d859      	bhi.n	80058b6 <UART_SetConfig+0x412>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x364>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800582d 	.word	0x0800582d
 800580c:	0800584b 	.word	0x0800584b
 8005810:	08005869 	.word	0x08005869
 8005814:	080058b7 	.word	0x080058b7
 8005818:	08005881 	.word	0x08005881
 800581c:	080058b7 	.word	0x080058b7
 8005820:	080058b7 	.word	0x080058b7
 8005824:	080058b7 	.word	0x080058b7
 8005828:	0800589f 	.word	0x0800589f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800582c:	f7fe feac 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8005830:	4603      	mov	r3, r0
 8005832:	005a      	lsls	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	441a      	add	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	b29b      	uxth	r3, r3
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e038      	b.n	80058bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800584a:	f7fe feb1 	bl	80045b0 <HAL_RCC_GetPCLK2Freq>
 800584e:	4603      	mov	r3, r0
 8005850:	005a      	lsls	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	61bb      	str	r3, [r7, #24]
        break;
 8005866:	e029      	b.n	80058bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	085a      	lsrs	r2, r3, #1
 800586e:	4b5d      	ldr	r3, [pc, #372]	; (80059e4 <UART_SetConfig+0x540>)
 8005870:	4413      	add	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6852      	ldr	r2, [r2, #4]
 8005876:	fbb3 f3f2 	udiv	r3, r3, r2
 800587a:	b29b      	uxth	r3, r3
 800587c:	61bb      	str	r3, [r7, #24]
        break;
 800587e:	e01d      	b.n	80058bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005880:	f7fe fd9e 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005884:	4603      	mov	r3, r0
 8005886:	005a      	lsls	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	441a      	add	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	fbb2 f3f3 	udiv	r3, r2, r3
 8005898:	b29b      	uxth	r3, r3
 800589a:	61bb      	str	r3, [r7, #24]
        break;
 800589c:	e00e      	b.n	80058bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	61bb      	str	r3, [r7, #24]
        break;
 80058b4:	e002      	b.n	80058bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
        break;
 80058ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	d916      	bls.n	80058f0 <UART_SetConfig+0x44c>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c8:	d212      	bcs.n	80058f0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f023 030f 	bic.w	r3, r3, #15
 80058d2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	b29a      	uxth	r2, r3
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	89fa      	ldrh	r2, [r7, #14]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	e06e      	b.n	80059ce <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
 80058f4:	e06b      	b.n	80059ce <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d857      	bhi.n	80059ac <UART_SetConfig+0x508>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x460>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005945 	.word	0x08005945
 800590c:	08005961 	.word	0x08005961
 8005910:	080059ad 	.word	0x080059ad
 8005914:	08005979 	.word	0x08005979
 8005918:	080059ad 	.word	0x080059ad
 800591c:	080059ad 	.word	0x080059ad
 8005920:	080059ad 	.word	0x080059ad
 8005924:	08005995 	.word	0x08005995
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005928:	f7fe fe2e 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	b29b      	uxth	r3, r3
 8005940:	61bb      	str	r3, [r7, #24]
        break;
 8005942:	e036      	b.n	80059b2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005944:	f7fe fe34 	bl	80045b0 <HAL_RCC_GetPCLK2Freq>
 8005948:	4602      	mov	r2, r0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	441a      	add	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	fbb2 f3f3 	udiv	r3, r2, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	61bb      	str	r3, [r7, #24]
        break;
 800595e:	e028      	b.n	80059b2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	085a      	lsrs	r2, r3, #1
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <UART_SetConfig+0x544>)
 8005968:	4413      	add	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6852      	ldr	r2, [r2, #4]
 800596e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	61bb      	str	r3, [r7, #24]
        break;
 8005976:	e01c      	b.n	80059b2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005978:	f7fe fd22 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	441a      	add	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	b29b      	uxth	r3, r3
 8005990:	61bb      	str	r3, [r7, #24]
        break;
 8005992:	e00e      	b.n	80059b2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	61bb      	str	r3, [r7, #24]
        break;
 80059aa:	e002      	b.n	80059b2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
        break;
 80059b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b0f      	cmp	r3, #15
 80059b6:	d908      	bls.n	80059ca <UART_SetConfig+0x526>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059be:	d204      	bcs.n	80059ca <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	60da      	str	r2, [r3, #12]
 80059c8:	e001      	b.n	80059ce <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80059da:	7dfb      	ldrb	r3, [r7, #23]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	01e84800 	.word	0x01e84800
 80059e8:	00f42400 	.word	0x00f42400

080059ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01a      	beq.n	8005b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aea:	d10a      	bne.n	8005b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b3e:	f7fc fa3d 	bl	8001fbc <HAL_GetTick>
 8005b42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d10e      	bne.n	8005b70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f814 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e00a      	b.n	8005b86 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9e:	e02a      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d026      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba8:	f7fc fa08 	bl	8001fbc <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d302      	bcc.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11b      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e00f      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d0c5      	beq.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c20:	b084      	sub	sp, #16
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	f107 001c 	add.w	r0, r7, #28
 8005c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d120      	bne.n	8005c7a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <USB_CoreInit+0xac>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d105      	bne.n	8005c6e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa60 	bl	8006134 <USB_CoreReset>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	e010      	b.n	8005c9c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa54 	bl	8006134 <USB_CoreReset>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d10b      	bne.n	8005cba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f043 0206 	orr.w	r2, r3, #6
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cc6:	b004      	add	sp, #16
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	ffbdffbf 	.word	0xffbdffbf

08005cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f023 0201 	bic.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d106      	bne.n	8005d1e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e00b      	b.n	8005d36 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	e001      	b.n	8005d36 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e003      	b.n	8005d3e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d36:	2032      	movs	r0, #50	; 0x32
 8005d38:	f7fc f94c 	bl	8001fd4 <HAL_Delay>

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d48:	b084      	sub	sp, #16
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e009      	b.n	8005d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3340      	adds	r3, #64	; 0x40
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b0e      	cmp	r3, #14
 8005d80:	d9f2      	bls.n	8005d68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d112      	bne.n	8005dae <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e005      	b.n	8005dba <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dcc:	4619      	mov	r1, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	680b      	ldr	r3, [r1, #0]
 8005dd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10c      	bne.n	8005dfa <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005de6:	2100      	movs	r1, #0
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f971 	bl	80060d0 <USB_SetDevSpeed>
 8005dee:	e018      	b.n	8005e22 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005df0:	2101      	movs	r1, #1
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f96c 	bl	80060d0 <USB_SetDevSpeed>
 8005df8:	e013      	b.n	8005e22 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d10c      	bne.n	8005e1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e06:	2100      	movs	r1, #0
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f961 	bl	80060d0 <USB_SetDevSpeed>
 8005e0e:	e008      	b.n	8005e22 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e10:	2101      	movs	r1, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f95c 	bl	80060d0 <USB_SetDevSpeed>
 8005e18:	e003      	b.n	8005e22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e1a:	2103      	movs	r1, #3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f957 	bl	80060d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e22:	2110      	movs	r1, #16
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f90b 	bl	8006040 <USB_FlushTxFifo>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f929 	bl	800608c <USB_FlushRxFifo>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	461a      	mov	r2, r3
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	461a      	mov	r2, r3
 8005e64:	2300      	movs	r3, #0
 8005e66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e043      	b.n	8005ef6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e84:	d118      	bne.n	8005eb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	e013      	b.n	8005eca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e008      	b.n	8005eca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d3b7      	bcc.n	8005e6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	e043      	b.n	8005f8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1a:	d118      	bne.n	8005f4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e013      	b.n	8005f60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	461a      	mov	r2, r3
 8005f46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e008      	b.n	8005f60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d3b7      	bcc.n	8005f04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d110      	bne.n	8005fd0 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <USB_DevInit+0x2e8>)
 8005fb8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <USB_DevInit+0x2ec>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f043 0210 	orr.w	r2, r3, #16
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	4b10      	ldr	r3, [pc, #64]	; (8006038 <USB_DevInit+0x2f0>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f043 0208 	orr.w	r2, r3, #8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d105      	bne.n	8006020 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <USB_DevInit+0x2f4>)
 800601a:	4313      	orrs	r3, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602c:	b004      	add	sp, #16
 800602e:	4770      	bx	lr
 8006030:	00800100 	.word	0x00800100
 8006034:	00010003 	.word	0x00010003
 8006038:	803c3800 	.word	0x803c3800
 800603c:	40000004 	.word	0x40000004

08006040 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3301      	adds	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <USB_FlushTxFifo+0x48>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e006      	b.n	800607a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b20      	cmp	r3, #32
 8006076:	d0f0      	beq.n	800605a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	00030d40 	.word	0x00030d40

0800608c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2210      	movs	r2, #16
 800609c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <USB_FlushRxFifo+0x40>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d901      	bls.n	80060b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e006      	b.n	80060be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d0f0      	beq.n	800609e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	00030d40 	.word	0x00030d40

080060d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	68f9      	ldr	r1, [r7, #12]
 80060ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f0:	4313      	orrs	r3, r2
 80060f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611c:	f043 0302 	orr.w	r3, r3, #2
 8006120:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006122:	2003      	movs	r0, #3
 8006124:	f7fb ff56 	bl	8001fd4 <HAL_Delay>

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <USB_CoreReset+0x64>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e01b      	b.n	800618a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	daf2      	bge.n	8006140 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f043 0201 	orr.w	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a09      	ldr	r2, [pc, #36]	; (8006198 <USB_CoreReset+0x64>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d901      	bls.n	800617c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e006      	b.n	800618a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d0f0      	beq.n	800616a <USB_CoreReset+0x36>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	00030d40 	.word	0x00030d40

0800619c <__NVIC_SystemReset>:
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
 80061a0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <__NVIC_SystemReset+0x20>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061ac:	4903      	ldr	r1, [pc, #12]	; (80061bc <__NVIC_SystemReset+0x20>)
 80061ae:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <__NVIC_SystemReset+0x24>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
 80061b4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <__NVIC_SystemReset+0x1c>
 80061bc:	e000ed00 	.word	0xe000ed00
 80061c0:	05fa0004 	.word	0x05fa0004

080061c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af04      	add	r7, sp, #16
	/* check the flag on Sector 5 */
	if(*ptr_FlagFirstboot==0xFF)
 80061ca:	4b1c      	ldr	r3, [pc, #112]	; (800623c <MX_LWIP_Init+0x78>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2bff      	cmp	r3, #255	; 0xff
 80061d2:	d13d      	bne.n	8006250 <MX_LWIP_Init+0x8c>
	{
		/* Flag=255 => First boot => Write Factory config */
		IP_ADDRESS[0] = 192;
 80061d4:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <MX_LWIP_Init+0x7c>)
 80061d6:	22c0      	movs	r2, #192	; 0xc0
 80061d8:	801a      	strh	r2, [r3, #0]
		IP_ADDRESS[1] = 168;
 80061da:	4b19      	ldr	r3, [pc, #100]	; (8006240 <MX_LWIP_Init+0x7c>)
 80061dc:	22a8      	movs	r2, #168	; 0xa8
 80061de:	805a      	strh	r2, [r3, #2]
		IP_ADDRESS[2] = 0;
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <MX_LWIP_Init+0x7c>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	809a      	strh	r2, [r3, #4]
		IP_ADDRESS[3] = 9;
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <MX_LWIP_Init+0x7c>)
 80061e8:	2209      	movs	r2, #9
 80061ea:	80da      	strh	r2, [r3, #6]
		NETMASK_ADDRESS[0] = 255;
 80061ec:	4b15      	ldr	r3, [pc, #84]	; (8006244 <MX_LWIP_Init+0x80>)
 80061ee:	22ff      	movs	r2, #255	; 0xff
 80061f0:	801a      	strh	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 80061f2:	4b14      	ldr	r3, [pc, #80]	; (8006244 <MX_LWIP_Init+0x80>)
 80061f4:	22ff      	movs	r2, #255	; 0xff
 80061f6:	805a      	strh	r2, [r3, #2]
		NETMASK_ADDRESS[2] = 255;
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <MX_LWIP_Init+0x80>)
 80061fa:	22ff      	movs	r2, #255	; 0xff
 80061fc:	809a      	strh	r2, [r3, #4]
		NETMASK_ADDRESS[3] = 0;
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <MX_LWIP_Init+0x80>)
 8006200:	2200      	movs	r2, #0
 8006202:	80da      	strh	r2, [r3, #6]
		GATEWAY_ADDRESS[0] = 192;
 8006204:	4b10      	ldr	r3, [pc, #64]	; (8006248 <MX_LWIP_Init+0x84>)
 8006206:	22c0      	movs	r2, #192	; 0xc0
 8006208:	801a      	strh	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = 168;
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <MX_LWIP_Init+0x84>)
 800620c:	22a8      	movs	r2, #168	; 0xa8
 800620e:	805a      	strh	r2, [r3, #2]
		GATEWAY_ADDRESS[2] = 0;
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <MX_LWIP_Init+0x84>)
 8006212:	2200      	movs	r2, #0
 8006214:	809a      	strh	r2, [r3, #4]
		GATEWAY_ADDRESS[3] = 1;
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <MX_LWIP_Init+0x84>)
 8006218:	2201      	movs	r2, #1
 800621a:	80da      	strh	r2, [r3, #6]

	   /* Write config on EEPROM */
	   Write_NewIPConfig(IP_ADDRESS,NETMASK_ADDRESS,GATEWAY_ADDRESS);
 800621c:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <MX_LWIP_Init+0x84>)
 800621e:	4909      	ldr	r1, [pc, #36]	; (8006244 <MX_LWIP_Init+0x80>)
 8006220:	4807      	ldr	r0, [pc, #28]	; (8006240 <MX_LWIP_Init+0x7c>)
 8006222:	f7fb fba1 	bl	8001968 <Write_NewIPConfig>

	   /* Set the flag to 0 for folowing  boot */
	   HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08040000, 0);
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	4907      	ldr	r1, [pc, #28]	; (800624c <MX_LWIP_Init+0x88>)
 8006230:	2000      	movs	r0, #0
 8006232:	f7fc ffc5 	bl	80031c0 <HAL_FLASH_Program>
	   /* Reboot board */
	   NVIC_SystemReset();
 8006236:	f7ff ffb1 	bl	800619c <__NVIC_SystemReset>
 800623a:	bf00      	nop
 800623c:	20000020 	.word	0x20000020
 8006240:	200048b0 	.word	0x200048b0
 8006244:	200048a8 	.word	0x200048a8
 8006248:	2000486c 	.word	0x2000486c
 800624c:	08040000 	.word	0x08040000
	}

	/* not the first boot => Read config on EEPROM */
	EE_ReadVariable(VirtAddVarTab[0],&IP_ADDRESS[0]);
 8006250:	4ba9      	ldr	r3, [pc, #676]	; (80064f8 <MX_LWIP_Init+0x334>)
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	49a9      	ldr	r1, [pc, #676]	; (80064fc <MX_LWIP_Init+0x338>)
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa fc06 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[1],&IP_ADDRESS[1]);
 800625c:	4ba6      	ldr	r3, [pc, #664]	; (80064f8 <MX_LWIP_Init+0x334>)
 800625e:	885b      	ldrh	r3, [r3, #2]
 8006260:	49a7      	ldr	r1, [pc, #668]	; (8006500 <MX_LWIP_Init+0x33c>)
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa fc00 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[2],&IP_ADDRESS[2]);
 8006268:	4ba3      	ldr	r3, [pc, #652]	; (80064f8 <MX_LWIP_Init+0x334>)
 800626a:	889b      	ldrh	r3, [r3, #4]
 800626c:	49a5      	ldr	r1, [pc, #660]	; (8006504 <MX_LWIP_Init+0x340>)
 800626e:	4618      	mov	r0, r3
 8006270:	f7fa fbfa 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[3],&IP_ADDRESS[3]);
 8006274:	4ba0      	ldr	r3, [pc, #640]	; (80064f8 <MX_LWIP_Init+0x334>)
 8006276:	88db      	ldrh	r3, [r3, #6]
 8006278:	49a3      	ldr	r1, [pc, #652]	; (8006508 <MX_LWIP_Init+0x344>)
 800627a:	4618      	mov	r0, r3
 800627c:	f7fa fbf4 	bl	8000a68 <EE_ReadVariable>

	EE_ReadVariable(VirtAddVarTab[4],&NETMASK_ADDRESS[0]);
 8006280:	4b9d      	ldr	r3, [pc, #628]	; (80064f8 <MX_LWIP_Init+0x334>)
 8006282:	891b      	ldrh	r3, [r3, #8]
 8006284:	49a1      	ldr	r1, [pc, #644]	; (800650c <MX_LWIP_Init+0x348>)
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa fbee 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[5],&NETMASK_ADDRESS[1]);
 800628c:	4b9a      	ldr	r3, [pc, #616]	; (80064f8 <MX_LWIP_Init+0x334>)
 800628e:	895b      	ldrh	r3, [r3, #10]
 8006290:	499f      	ldr	r1, [pc, #636]	; (8006510 <MX_LWIP_Init+0x34c>)
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa fbe8 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[6],&NETMASK_ADDRESS[2]);
 8006298:	4b97      	ldr	r3, [pc, #604]	; (80064f8 <MX_LWIP_Init+0x334>)
 800629a:	899b      	ldrh	r3, [r3, #12]
 800629c:	499d      	ldr	r1, [pc, #628]	; (8006514 <MX_LWIP_Init+0x350>)
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fa fbe2 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[7],&NETMASK_ADDRESS[3]);
 80062a4:	4b94      	ldr	r3, [pc, #592]	; (80064f8 <MX_LWIP_Init+0x334>)
 80062a6:	89db      	ldrh	r3, [r3, #14]
 80062a8:	499b      	ldr	r1, [pc, #620]	; (8006518 <MX_LWIP_Init+0x354>)
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa fbdc 	bl	8000a68 <EE_ReadVariable>

	EE_ReadVariable(VirtAddVarTab[8],&GATEWAY_ADDRESS[0]);
 80062b0:	4b91      	ldr	r3, [pc, #580]	; (80064f8 <MX_LWIP_Init+0x334>)
 80062b2:	8a1b      	ldrh	r3, [r3, #16]
 80062b4:	4999      	ldr	r1, [pc, #612]	; (800651c <MX_LWIP_Init+0x358>)
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa fbd6 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[9],&GATEWAY_ADDRESS[1]);
 80062bc:	4b8e      	ldr	r3, [pc, #568]	; (80064f8 <MX_LWIP_Init+0x334>)
 80062be:	8a5b      	ldrh	r3, [r3, #18]
 80062c0:	4997      	ldr	r1, [pc, #604]	; (8006520 <MX_LWIP_Init+0x35c>)
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fa fbd0 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[10],&GATEWAY_ADDRESS[2]);
 80062c8:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <MX_LWIP_Init+0x334>)
 80062ca:	8a9b      	ldrh	r3, [r3, #20]
 80062cc:	4995      	ldr	r1, [pc, #596]	; (8006524 <MX_LWIP_Init+0x360>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fa fbca 	bl	8000a68 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[11],&GATEWAY_ADDRESS[3]);
 80062d4:	4b88      	ldr	r3, [pc, #544]	; (80064f8 <MX_LWIP_Init+0x334>)
 80062d6:	8adb      	ldrh	r3, [r3, #22]
 80062d8:	4993      	ldr	r1, [pc, #588]	; (8006528 <MX_LWIP_Init+0x364>)
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fa fbc4 	bl	8000a68 <EE_ReadVariable>

	  /* Initilialize the LwIP stack with RTOS */
	  tcpip_init( NULL, NULL );
 80062e0:	2100      	movs	r1, #0
 80062e2:	2000      	movs	r0, #0
 80062e4:	f005 fdb4 	bl	800be50 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80062e8:	4b84      	ldr	r3, [pc, #528]	; (80064fc <MX_LWIP_Init+0x338>)
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	061a      	lsls	r2, r3, #24
 80062ee:	4b83      	ldr	r3, [pc, #524]	; (80064fc <MX_LWIP_Init+0x338>)
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062f8:	431a      	orrs	r2, r3
 80062fa:	4b80      	ldr	r3, [pc, #512]	; (80064fc <MX_LWIP_Init+0x338>)
 80062fc:	889b      	ldrh	r3, [r3, #4]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	b29b      	uxth	r3, r3
 8006302:	431a      	orrs	r2, r3
 8006304:	4b7d      	ldr	r3, [pc, #500]	; (80064fc <MX_LWIP_Init+0x338>)
 8006306:	88db      	ldrh	r3, [r3, #6]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	061a      	lsls	r2, r3, #24
 800630e:	4b7b      	ldr	r3, [pc, #492]	; (80064fc <MX_LWIP_Init+0x338>)
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	0619      	lsls	r1, r3, #24
 8006314:	4b79      	ldr	r3, [pc, #484]	; (80064fc <MX_LWIP_Init+0x338>)
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	041b      	lsls	r3, r3, #16
 800631a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800631e:	4319      	orrs	r1, r3
 8006320:	4b76      	ldr	r3, [pc, #472]	; (80064fc <MX_LWIP_Init+0x338>)
 8006322:	889b      	ldrh	r3, [r3, #4]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	b29b      	uxth	r3, r3
 8006328:	4319      	orrs	r1, r3
 800632a:	4b74      	ldr	r3, [pc, #464]	; (80064fc <MX_LWIP_Init+0x338>)
 800632c:	88db      	ldrh	r3, [r3, #6]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	430b      	orrs	r3, r1
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006338:	431a      	orrs	r2, r3
 800633a:	4b70      	ldr	r3, [pc, #448]	; (80064fc <MX_LWIP_Init+0x338>)
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	0619      	lsls	r1, r3, #24
 8006340:	4b6e      	ldr	r3, [pc, #440]	; (80064fc <MX_LWIP_Init+0x338>)
 8006342:	885b      	ldrh	r3, [r3, #2]
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800634a:	4319      	orrs	r1, r3
 800634c:	4b6b      	ldr	r3, [pc, #428]	; (80064fc <MX_LWIP_Init+0x338>)
 800634e:	889b      	ldrh	r3, [r3, #4]
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	b29b      	uxth	r3, r3
 8006354:	4319      	orrs	r1, r3
 8006356:	4b69      	ldr	r3, [pc, #420]	; (80064fc <MX_LWIP_Init+0x338>)
 8006358:	88db      	ldrh	r3, [r3, #6]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	430b      	orrs	r3, r1
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006364:	431a      	orrs	r2, r3
 8006366:	4b65      	ldr	r3, [pc, #404]	; (80064fc <MX_LWIP_Init+0x338>)
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	0619      	lsls	r1, r3, #24
 800636c:	4b63      	ldr	r3, [pc, #396]	; (80064fc <MX_LWIP_Init+0x338>)
 800636e:	885b      	ldrh	r3, [r3, #2]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006376:	4319      	orrs	r1, r3
 8006378:	4b60      	ldr	r3, [pc, #384]	; (80064fc <MX_LWIP_Init+0x338>)
 800637a:	889b      	ldrh	r3, [r3, #4]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	b29b      	uxth	r3, r3
 8006380:	4319      	orrs	r1, r3
 8006382:	4b5e      	ldr	r3, [pc, #376]	; (80064fc <MX_LWIP_Init+0x338>)
 8006384:	88db      	ldrh	r3, [r3, #6]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	430b      	orrs	r3, r1
 800638a:	0e1b      	lsrs	r3, r3, #24
 800638c:	4313      	orrs	r3, r2
 800638e:	4a67      	ldr	r2, [pc, #412]	; (800652c <MX_LWIP_Init+0x368>)
 8006390:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006392:	4b5e      	ldr	r3, [pc, #376]	; (800650c <MX_LWIP_Init+0x348>)
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	061a      	lsls	r2, r3, #24
 8006398:	4b5c      	ldr	r3, [pc, #368]	; (800650c <MX_LWIP_Init+0x348>)
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	041b      	lsls	r3, r3, #16
 800639e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063a2:	431a      	orrs	r2, r3
 80063a4:	4b59      	ldr	r3, [pc, #356]	; (800650c <MX_LWIP_Init+0x348>)
 80063a6:	889b      	ldrh	r3, [r3, #4]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	431a      	orrs	r2, r3
 80063ae:	4b57      	ldr	r3, [pc, #348]	; (800650c <MX_LWIP_Init+0x348>)
 80063b0:	88db      	ldrh	r3, [r3, #6]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4313      	orrs	r3, r2
 80063b6:	061a      	lsls	r2, r3, #24
 80063b8:	4b54      	ldr	r3, [pc, #336]	; (800650c <MX_LWIP_Init+0x348>)
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	0619      	lsls	r1, r3, #24
 80063be:	4b53      	ldr	r3, [pc, #332]	; (800650c <MX_LWIP_Init+0x348>)
 80063c0:	885b      	ldrh	r3, [r3, #2]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063c8:	4319      	orrs	r1, r3
 80063ca:	4b50      	ldr	r3, [pc, #320]	; (800650c <MX_LWIP_Init+0x348>)
 80063cc:	889b      	ldrh	r3, [r3, #4]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	4319      	orrs	r1, r3
 80063d4:	4b4d      	ldr	r3, [pc, #308]	; (800650c <MX_LWIP_Init+0x348>)
 80063d6:	88db      	ldrh	r3, [r3, #6]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	430b      	orrs	r3, r1
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063e2:	431a      	orrs	r2, r3
 80063e4:	4b49      	ldr	r3, [pc, #292]	; (800650c <MX_LWIP_Init+0x348>)
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	0619      	lsls	r1, r3, #24
 80063ea:	4b48      	ldr	r3, [pc, #288]	; (800650c <MX_LWIP_Init+0x348>)
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063f4:	4319      	orrs	r1, r3
 80063f6:	4b45      	ldr	r3, [pc, #276]	; (800650c <MX_LWIP_Init+0x348>)
 80063f8:	889b      	ldrh	r3, [r3, #4]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4319      	orrs	r1, r3
 8006400:	4b42      	ldr	r3, [pc, #264]	; (800650c <MX_LWIP_Init+0x348>)
 8006402:	88db      	ldrh	r3, [r3, #6]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	430b      	orrs	r3, r1
 8006408:	0a1b      	lsrs	r3, r3, #8
 800640a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800640e:	431a      	orrs	r2, r3
 8006410:	4b3e      	ldr	r3, [pc, #248]	; (800650c <MX_LWIP_Init+0x348>)
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	0619      	lsls	r1, r3, #24
 8006416:	4b3d      	ldr	r3, [pc, #244]	; (800650c <MX_LWIP_Init+0x348>)
 8006418:	885b      	ldrh	r3, [r3, #2]
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006420:	4319      	orrs	r1, r3
 8006422:	4b3a      	ldr	r3, [pc, #232]	; (800650c <MX_LWIP_Init+0x348>)
 8006424:	889b      	ldrh	r3, [r3, #4]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	b29b      	uxth	r3, r3
 800642a:	4319      	orrs	r1, r3
 800642c:	4b37      	ldr	r3, [pc, #220]	; (800650c <MX_LWIP_Init+0x348>)
 800642e:	88db      	ldrh	r3, [r3, #6]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	430b      	orrs	r3, r1
 8006434:	0e1b      	lsrs	r3, r3, #24
 8006436:	4313      	orrs	r3, r2
 8006438:	4a3d      	ldr	r2, [pc, #244]	; (8006530 <MX_LWIP_Init+0x36c>)
 800643a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800643c:	4b37      	ldr	r3, [pc, #220]	; (800651c <MX_LWIP_Init+0x358>)
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	061a      	lsls	r2, r3, #24
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <MX_LWIP_Init+0x358>)
 8006444:	885b      	ldrh	r3, [r3, #2]
 8006446:	041b      	lsls	r3, r3, #16
 8006448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800644c:	431a      	orrs	r2, r3
 800644e:	4b33      	ldr	r3, [pc, #204]	; (800651c <MX_LWIP_Init+0x358>)
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	b29b      	uxth	r3, r3
 8006456:	431a      	orrs	r2, r3
 8006458:	4b30      	ldr	r3, [pc, #192]	; (800651c <MX_LWIP_Init+0x358>)
 800645a:	88db      	ldrh	r3, [r3, #6]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4313      	orrs	r3, r2
 8006460:	061a      	lsls	r2, r3, #24
 8006462:	4b2e      	ldr	r3, [pc, #184]	; (800651c <MX_LWIP_Init+0x358>)
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	0619      	lsls	r1, r3, #24
 8006468:	4b2c      	ldr	r3, [pc, #176]	; (800651c <MX_LWIP_Init+0x358>)
 800646a:	885b      	ldrh	r3, [r3, #2]
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006472:	4319      	orrs	r1, r3
 8006474:	4b29      	ldr	r3, [pc, #164]	; (800651c <MX_LWIP_Init+0x358>)
 8006476:	889b      	ldrh	r3, [r3, #4]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	b29b      	uxth	r3, r3
 800647c:	4319      	orrs	r1, r3
 800647e:	4b27      	ldr	r3, [pc, #156]	; (800651c <MX_LWIP_Init+0x358>)
 8006480:	88db      	ldrh	r3, [r3, #6]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	430b      	orrs	r3, r1
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800648c:	431a      	orrs	r2, r3
 800648e:	4b23      	ldr	r3, [pc, #140]	; (800651c <MX_LWIP_Init+0x358>)
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	0619      	lsls	r1, r3, #24
 8006494:	4b21      	ldr	r3, [pc, #132]	; (800651c <MX_LWIP_Init+0x358>)
 8006496:	885b      	ldrh	r3, [r3, #2]
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800649e:	4319      	orrs	r1, r3
 80064a0:	4b1e      	ldr	r3, [pc, #120]	; (800651c <MX_LWIP_Init+0x358>)
 80064a2:	889b      	ldrh	r3, [r3, #4]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4319      	orrs	r1, r3
 80064aa:	4b1c      	ldr	r3, [pc, #112]	; (800651c <MX_LWIP_Init+0x358>)
 80064ac:	88db      	ldrh	r3, [r3, #6]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	430b      	orrs	r3, r1
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80064b8:	431a      	orrs	r2, r3
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <MX_LWIP_Init+0x358>)
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	0619      	lsls	r1, r3, #24
 80064c0:	4b16      	ldr	r3, [pc, #88]	; (800651c <MX_LWIP_Init+0x358>)
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064ca:	4319      	orrs	r1, r3
 80064cc:	4b13      	ldr	r3, [pc, #76]	; (800651c <MX_LWIP_Init+0x358>)
 80064ce:	889b      	ldrh	r3, [r3, #4]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4319      	orrs	r1, r3
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <MX_LWIP_Init+0x358>)
 80064d8:	88db      	ldrh	r3, [r3, #6]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	430b      	orrs	r3, r1
 80064de:	0e1b      	lsrs	r3, r3, #24
 80064e0:	4313      	orrs	r3, r2
 80064e2:	4a14      	ldr	r2, [pc, #80]	; (8006534 <MX_LWIP_Init+0x370>)
 80064e4:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <MX_LWIP_Init+0x374>)
 80064e8:	9302      	str	r3, [sp, #8]
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <MX_LWIP_Init+0x378>)
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	2300      	movs	r3, #0
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <MX_LWIP_Init+0x370>)
 80064f4:	e024      	b.n	8006540 <MX_LWIP_Init+0x37c>
 80064f6:	bf00      	nop
 80064f8:	20000000 	.word	0x20000000
 80064fc:	200048b0 	.word	0x200048b0
 8006500:	200048b2 	.word	0x200048b2
 8006504:	200048b4 	.word	0x200048b4
 8006508:	200048b6 	.word	0x200048b6
 800650c:	200048a8 	.word	0x200048a8
 8006510:	200048aa 	.word	0x200048aa
 8006514:	200048ac 	.word	0x200048ac
 8006518:	200048ae 	.word	0x200048ae
 800651c:	2000486c 	.word	0x2000486c
 8006520:	2000486e 	.word	0x2000486e
 8006524:	20004870 	.word	0x20004870
 8006528:	20004872 	.word	0x20004872
 800652c:	200048a4 	.word	0x200048a4
 8006530:	200048b8 	.word	0x200048b8
 8006534:	200048bc 	.word	0x200048bc
 8006538:	0800bd4d 	.word	0x0800bd4d
 800653c:	08006bc5 	.word	0x08006bc5
 8006540:	4a0d      	ldr	r2, [pc, #52]	; (8006578 <MX_LWIP_Init+0x3b4>)
 8006542:	490e      	ldr	r1, [pc, #56]	; (800657c <MX_LWIP_Init+0x3b8>)
 8006544:	480e      	ldr	r0, [pc, #56]	; (8006580 <MX_LWIP_Init+0x3bc>)
 8006546:	f006 f987 	bl	800c858 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800654a:	480d      	ldr	r0, [pc, #52]	; (8006580 <MX_LWIP_Init+0x3bc>)
 800654c:	f006 fa64 	bl	800ca18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <MX_LWIP_Init+0x3bc>)
 8006552:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <MX_LWIP_Init+0x3a6>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006562:	4807      	ldr	r0, [pc, #28]	; (8006580 <MX_LWIP_Init+0x3bc>)
 8006564:	f006 fa68 	bl	800ca38 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006568:	e002      	b.n	8006570 <MX_LWIP_Init+0x3ac>
    netif_set_down(&gnetif);
 800656a:	4805      	ldr	r0, [pc, #20]	; (8006580 <MX_LWIP_Init+0x3bc>)
 800656c:	f006 faa8 	bl	800cac0 <netif_set_down>
}
 8006570:	bf00      	nop
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200048b8 	.word	0x200048b8
 800657c:	200048a4 	.word	0x200048a4
 8006580:	20004874 	.word	0x20004874

08006584 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	; 0x38
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800658c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	60da      	str	r2, [r3, #12]
 800659a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a52      	ldr	r2, [pc, #328]	; (80066ec <HAL_ETH_MspInit+0x168>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	f040 809e 	bne.w	80066e4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80065a8:	4b51      	ldr	r3, [pc, #324]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	4a50      	ldr	r2, [pc, #320]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065b2:	6313      	str	r3, [r2, #48]	; 0x30
 80065b4:	4b4e      	ldr	r3, [pc, #312]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	4b4b      	ldr	r3, [pc, #300]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	4a4a      	ldr	r2, [pc, #296]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065ca:	6313      	str	r3, [r2, #48]	; 0x30
 80065cc:	4b48      	ldr	r3, [pc, #288]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4b45      	ldr	r3, [pc, #276]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	4a44      	ldr	r2, [pc, #272]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065e2:	6313      	str	r3, [r2, #48]	; 0x30
 80065e4:	4b42      	ldr	r3, [pc, #264]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065f0:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	4a3e      	ldr	r2, [pc, #248]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065f6:	f043 0304 	orr.w	r3, r3, #4
 80065fa:	6313      	str	r3, [r2, #48]	; 0x30
 80065fc:	4b3c      	ldr	r3, [pc, #240]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006608:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	4a38      	ldr	r2, [pc, #224]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6313      	str	r3, [r2, #48]	; 0x30
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006620:	4b33      	ldr	r3, [pc, #204]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	4a32      	ldr	r2, [pc, #200]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 8006626:	f043 0302 	orr.w	r3, r3, #2
 800662a:	6313      	str	r3, [r2, #48]	; 0x30
 800662c:	4b30      	ldr	r3, [pc, #192]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	4a2c      	ldr	r2, [pc, #176]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 800663e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006642:	6313      	str	r3, [r2, #48]	; 0x30
 8006644:	4b2a      	ldr	r3, [pc, #168]	; (80066f0 <HAL_ETH_MspInit+0x16c>)
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006650:	2332      	movs	r3, #50	; 0x32
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006654:	2302      	movs	r3, #2
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800665c:	2303      	movs	r3, #3
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006660:	230b      	movs	r3, #11
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006668:	4619      	mov	r1, r3
 800666a:	4822      	ldr	r0, [pc, #136]	; (80066f4 <HAL_ETH_MspInit+0x170>)
 800666c:	f7fd f828 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006670:	2386      	movs	r3, #134	; 0x86
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006674:	2302      	movs	r3, #2
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006678:	2300      	movs	r3, #0
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800667c:	2303      	movs	r3, #3
 800667e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006680:	230b      	movs	r3, #11
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006688:	4619      	mov	r1, r3
 800668a:	481b      	ldr	r0, [pc, #108]	; (80066f8 <HAL_ETH_MspInit+0x174>)
 800668c:	f7fd f818 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	2302      	movs	r3, #2
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669e:	2303      	movs	r3, #3
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066a2:	230b      	movs	r3, #11
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80066a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066aa:	4619      	mov	r1, r3
 80066ac:	4813      	ldr	r0, [pc, #76]	; (80066fc <HAL_ETH_MspInit+0x178>)
 80066ae:	f7fd f807 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80066b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b8:	2302      	movs	r3, #2
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c0:	2303      	movs	r3, #3
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066c4:	230b      	movs	r3, #11
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80066c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066cc:	4619      	mov	r1, r3
 80066ce:	480c      	ldr	r0, [pc, #48]	; (8006700 <HAL_ETH_MspInit+0x17c>)
 80066d0:	f7fc fff6 	bl	80036c0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80066d4:	2200      	movs	r2, #0
 80066d6:	2105      	movs	r1, #5
 80066d8:	203d      	movs	r0, #61	; 0x3d
 80066da:	f7fb fd55 	bl	8002188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80066de:	203d      	movs	r0, #61	; 0x3d
 80066e0:	f7fb fd6e 	bl	80021c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80066e4:	bf00      	nop
 80066e6:	3738      	adds	r7, #56	; 0x38
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40028000 	.word	0x40028000
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40020800 	.word	0x40020800
 80066f8:	40020000 	.word	0x40020000
 80066fc:	40020400 	.word	0x40020400
 8006700:	40021800 	.word	0x40021800

08006704 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <HAL_ETH_RxCpltCallback+0x1c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fc37 	bl	8006f84 <osSemaphoreRelease>
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	2000047c 	.word	0x2000047c

08006724 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8006724:	b5b0      	push	{r4, r5, r7, lr}
 8006726:	b090      	sub	sp, #64	; 0x40
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006730:	4b5c      	ldr	r3, [pc, #368]	; (80068a4 <low_level_init+0x180>)
 8006732:	4a5d      	ldr	r2, [pc, #372]	; (80068a8 <low_level_init+0x184>)
 8006734:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006736:	4b5b      	ldr	r3, [pc, #364]	; (80068a4 <low_level_init+0x180>)
 8006738:	2201      	movs	r2, #1
 800673a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800673c:	4b59      	ldr	r3, [pc, #356]	; (80068a4 <low_level_init+0x180>)
 800673e:	2200      	movs	r2, #0
 8006740:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006742:	2300      	movs	r3, #0
 8006744:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800674e:	23e1      	movs	r3, #225	; 0xe1
 8006750:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006754:	2300      	movs	r3, #0
 8006756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800675a:	2300      	movs	r3, #0
 800675c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006760:	2300      	movs	r3, #0
 8006762:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006766:	4a4f      	ldr	r2, [pc, #316]	; (80068a4 <low_level_init+0x180>)
 8006768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800676c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800676e:	4b4d      	ldr	r3, [pc, #308]	; (80068a4 <low_level_init+0x180>)
 8006770:	2201      	movs	r2, #1
 8006772:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006774:	4b4b      	ldr	r3, [pc, #300]	; (80068a4 <low_level_init+0x180>)
 8006776:	2200      	movs	r2, #0
 8006778:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800677a:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <low_level_init+0x180>)
 800677c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006780:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006782:	4848      	ldr	r0, [pc, #288]	; (80068a4 <low_level_init+0x180>)
 8006784:	f7fb fd2a 	bl	80021dc <HAL_ETH_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800678e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006792:	2b00      	cmp	r3, #0
 8006794:	d108      	bne.n	80067a8 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800679c:	f043 0304 	orr.w	r3, r3, #4
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80067a8:	2304      	movs	r3, #4
 80067aa:	4a40      	ldr	r2, [pc, #256]	; (80068ac <low_level_init+0x188>)
 80067ac:	4940      	ldr	r1, [pc, #256]	; (80068b0 <low_level_init+0x18c>)
 80067ae:	483d      	ldr	r0, [pc, #244]	; (80068a4 <low_level_init+0x180>)
 80067b0:	f7fb feb0 	bl	8002514 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80067b4:	2304      	movs	r3, #4
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <low_level_init+0x190>)
 80067b8:	493f      	ldr	r1, [pc, #252]	; (80068b8 <low_level_init+0x194>)
 80067ba:	483a      	ldr	r0, [pc, #232]	; (80068a4 <low_level_init+0x180>)
 80067bc:	f7fb ff13 	bl	80025e6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2206      	movs	r2, #6
 80067c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80067c8:	4b36      	ldr	r3, [pc, #216]	; (80068a4 <low_level_init+0x180>)
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80067d4:	4b33      	ldr	r3, [pc, #204]	; (80068a4 <low_level_init+0x180>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	785a      	ldrb	r2, [r3, #1]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80067e0:	4b30      	ldr	r3, [pc, #192]	; (80068a4 <low_level_init+0x180>)
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	789a      	ldrb	r2, [r3, #2]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80067ec:	4b2d      	ldr	r3, [pc, #180]	; (80068a4 <low_level_init+0x180>)
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	78da      	ldrb	r2, [r3, #3]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80067f8:	4b2a      	ldr	r3, [pc, #168]	; (80068a4 <low_level_init+0x180>)
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	791a      	ldrb	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006804:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <low_level_init+0x180>)
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	795a      	ldrb	r2, [r3, #5]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006816:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800681e:	f043 030a 	orr.w	r3, r3, #10
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800682a:	2300      	movs	r3, #0
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
 800682e:	2300      	movs	r3, #0
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006836:	2101      	movs	r1, #1
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fb21 	bl	8006e80 <osSemaphoreCreate>
 800683e:	4602      	mov	r2, r0
 8006840:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <low_level_init+0x198>)
 8006842:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006844:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <low_level_init+0x19c>)
 8006846:	f107 040c 	add.w	r4, r7, #12
 800684a:	461d      	mov	r5, r3
 800684c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800684e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fa26 	bl	8006cb0 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006864:	480f      	ldr	r0, [pc, #60]	; (80068a4 <low_level_init+0x180>)
 8006866:	f7fc f9e6 	bl	8002c36 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800686a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800686e:	461a      	mov	r2, r3
 8006870:	211d      	movs	r1, #29
 8006872:	480c      	ldr	r0, [pc, #48]	; (80068a4 <low_level_init+0x180>)
 8006874:	f7fc f911 	bl	8002a9a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	f043 030b 	orr.w	r3, r3, #11
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	461a      	mov	r2, r3
 8006884:	211d      	movs	r1, #29
 8006886:	4807      	ldr	r0, [pc, #28]	; (80068a4 <low_level_init+0x180>)
 8006888:	f7fc f96f 	bl	8002b6a <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800688c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006890:	461a      	mov	r2, r3
 8006892:	211d      	movs	r1, #29
 8006894:	4803      	ldr	r0, [pc, #12]	; (80068a4 <low_level_init+0x180>)
 8006896:	f7fc f900 	bl	8002a9a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800689a:	bf00      	nop
 800689c:	3740      	adds	r7, #64	; 0x40
 800689e:	46bd      	mov	sp, r7
 80068a0:	bdb0      	pop	{r4, r5, r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20006190 	.word	0x20006190
 80068a8:	40028000 	.word	0x40028000
 80068ac:	200061d8 	.word	0x200061d8
 80068b0:	200048c0 	.word	0x200048c0
 80068b4:	20004940 	.word	0x20004940
 80068b8:	20006110 	.word	0x20006110
 80068bc:	2000047c 	.word	0x2000047c
 80068c0:	080171e0 	.word	0x080171e0

080068c4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	; 0x28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80068ce:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <low_level_output+0x138>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80068e6:	4b45      	ldr	r3, [pc, #276]	; (80069fc <low_level_output+0x138>)
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	e05a      	b.n	80069ac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da03      	bge.n	8006906 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80068fe:	23f8      	movs	r3, #248	; 0xf8
 8006900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006904:	e05c      	b.n	80069c0 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	895b      	ldrh	r3, [r3, #10]
 800690a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006910:	e02f      	b.n	8006972 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	18d0      	adds	r0, r2, r3
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	18d1      	adds	r1, r2, r3
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	461a      	mov	r2, r3
 800692a:	f00f f98a 	bl	8015c42 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da03      	bge.n	8006944 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800693c:	23f8      	movs	r3, #248	; 0xf8
 800693e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006942:	e03d      	b.n	80069c0 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006954:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006960:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800696c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4413      	add	r3, r2
 8006978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800697c:	4293      	cmp	r3, r2
 800697e:	d8c8      	bhi.n	8006912 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006980:	69fa      	ldr	r2, [r7, #28]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	18d0      	adds	r0, r2, r3
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4619      	mov	r1, r3
 8006992:	f00f f956 	bl	8015c42 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	623b      	str	r3, [r7, #32]
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1a1      	bne.n	80068f6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80069b2:	6979      	ldr	r1, [r7, #20]
 80069b4:	4811      	ldr	r0, [pc, #68]	; (80069fc <low_level_output+0x138>)
 80069b6:	f7fb fe83 	bl	80026c0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <low_level_output+0x138>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80069c8:	4413      	add	r3, r2
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80069d4:	4b09      	ldr	r3, [pc, #36]	; (80069fc <low_level_output+0x138>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80069dc:	4413      	add	r3, r2
 80069de:	2220      	movs	r2, #32
 80069e0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <low_level_output+0x138>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80069ea:	4413      	add	r3, r2
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80069f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3728      	adds	r7, #40	; 0x28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20006190 	.word	0x20006190

08006a00 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08c      	sub	sp, #48	; 0x30
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006a24:	484e      	ldr	r0, [pc, #312]	; (8006b60 <low_level_input+0x160>)
 8006a26:	f7fb ff35 	bl	8002894 <HAL_ETH_GetReceivedFrame_IT>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <low_level_input+0x34>
  
    return NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e091      	b.n	8006b58 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006a34:	4b4a      	ldr	r3, [pc, #296]	; (8006b60 <low_level_input+0x160>)
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006a3a:	4b49      	ldr	r3, [pc, #292]	; (8006b60 <low_level_input+0x160>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8006a40:	89fb      	ldrh	r3, [r7, #14]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	2203      	movs	r2, #3
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	2004      	movs	r0, #4
 8006a4e:	f006 f8b9 	bl	800cbc4 <pbuf_alloc>
 8006a52:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d04b      	beq.n	8006af2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006a5a:	4b41      	ldr	r3, [pc, #260]	; (8006b60 <low_level_input+0x160>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a68:	e040      	b.n	8006aec <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	895b      	ldrh	r3, [r3, #10]
 8006a6e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006a74:	e021      	b.n	8006aba <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	18d0      	adds	r0, r2, r3
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	18d1      	adds	r1, r2, r3
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f00f f8d8 	bl	8015c42 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006aa8:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006ab4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d8d6      	bhi.n	8006a76 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	18d0      	adds	r0, r2, r3
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f00f f8b2 	bl	8015c42 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1bb      	bne.n	8006a6a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006af2:	4b1b      	ldr	r3, [pc, #108]	; (8006b60 <low_level_input+0x160>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	e00b      	b.n	8006b16 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3301      	adds	r3, #1
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <low_level_input+0x160>)
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d3ee      	bcc.n	8006afe <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <low_level_input+0x160>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <low_level_input+0x160>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8006b2e:	4413      	add	r3, r2
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00d      	beq.n	8006b56 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <low_level_input+0x160>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8006b42:	4413      	add	r3, r2
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006b48:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <low_level_input+0x160>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	f241 0308 	movw	r3, #4104	; 0x1008
 8006b50:	4413      	add	r3, r2
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3730      	adds	r7, #48	; 0x30
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20006190 	.word	0x20006190

08006b64 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <ethernetif_input+0x58>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f04f 31ff 	mov.w	r1, #4294967295
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 f9b5 	bl	8006ee8 <osSemaphoreWait>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f5      	bne.n	8006b70 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8006b84:	480e      	ldr	r0, [pc, #56]	; (8006bc0 <ethernetif_input+0x5c>)
 8006b86:	f00e ffc5 	bl	8015b14 <sys_mutex_lock>
        p = low_level_input( netif );
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff38 	bl	8006a00 <low_level_input>
 8006b90:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	68f9      	ldr	r1, [r7, #12]
 8006b9e:	68b8      	ldr	r0, [r7, #8]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006ba8:	68b8      	ldr	r0, [r7, #8]
 8006baa:	f006 fb7d 	bl	800d2a8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006bae:	4804      	ldr	r0, [pc, #16]	; (8006bc0 <ethernetif_input+0x5c>)
 8006bb0:	f00e ffbf 	bl	8015b32 <sys_mutex_unlock>
      } while(p!=NULL);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e4      	bne.n	8006b84 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006bba:	e7d9      	b.n	8006b70 <ethernetif_input+0xc>
 8006bbc:	2000047c 	.word	0x2000047c
 8006bc0:	200079ec 	.word	0x200079ec

08006bc4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <ethernetif_init+0x1c>
 8006bd2:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <ethernetif_init+0x48>)
 8006bd4:	f240 2231 	movw	r2, #561	; 0x231
 8006bd8:	490d      	ldr	r1, [pc, #52]	; (8006c10 <ethernetif_init+0x4c>)
 8006bda:	480e      	ldr	r0, [pc, #56]	; (8006c14 <ethernetif_init+0x50>)
 8006bdc:	f00f f844 	bl	8015c68 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2273      	movs	r2, #115	; 0x73
 8006be4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2274      	movs	r2, #116	; 0x74
 8006bec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <ethernetif_init+0x54>)
 8006bf4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a08      	ldr	r2, [pc, #32]	; (8006c1c <ethernetif_init+0x58>)
 8006bfa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fd91 	bl	8006724 <low_level_init>

  return ERR_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	080171fc 	.word	0x080171fc
 8006c10:	08017218 	.word	0x08017218
 8006c14:	08017228 	.word	0x08017228
 8006c18:	08013c11 	.word	0x08013c11
 8006c1c:	080068c5 	.word	0x080068c5

08006c20 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006c24:	f7fb f9ca 	bl	8001fbc <HAL_GetTick>
 8006c28:	4603      	mov	r3, r0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	4603      	mov	r3, r0
 8006c36:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c40:	2b84      	cmp	r3, #132	; 0x84
 8006c42:	d005      	beq.n	8006c50 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3303      	adds	r3, #3
 8006c4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c50:	68fb      	ldr	r3, [r7, #12]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c64:	f3ef 8305 	mrs	r3, IPSR
 8006c68:	607b      	str	r3, [r7, #4]
  return(result);
 8006c6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c86:	f001 fcf9 	bl	800867c <vTaskStartScheduler>
  
  return osOK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006c94:	f7ff ffe3 	bl	8006c5e <inHandlerMode>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006c9e:	f001 fe0b 	bl	80088b8 <xTaskGetTickCountFromISR>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	e002      	b.n	8006cac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006ca6:	f001 fdf7 	bl	8008898 <xTaskGetTickCount>
 8006caa:	4603      	mov	r3, r0
  }
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d020      	beq.n	8006d04 <osThreadCreate+0x54>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01c      	beq.n	8006d04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685c      	ldr	r4, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681d      	ldr	r5, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691e      	ldr	r6, [r3, #16]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff ffa6 	bl	8006c2e <makeFreeRtosPriority>
 8006ce2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	9100      	str	r1, [sp, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f001 fb31 	bl	8008360 <xTaskCreateStatic>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	e01c      	b.n	8006d3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685c      	ldr	r4, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d10:	b29e      	uxth	r6, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff ff88 	bl	8006c2e <makeFreeRtosPriority>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	f107 030c 	add.w	r3, r7, #12
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	9200      	str	r2, [sp, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f001 fb75 	bl	800841e <xTaskCreate>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d001      	beq.n	8006d3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d48 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d007      	beq.n	8006d68 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f000 fc8a 	bl	8007678 <xQueueCreateMutexStatic>
 8006d64:	4603      	mov	r3, r0
 8006d66:	e003      	b.n	8006d70 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d68:	2001      	movs	r0, #1
 8006d6a:	f000 fc6d 	bl	8007648 <xQueueCreateMutex>
 8006d6e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <osMutexWait+0x18>
    return osErrorParameter;
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	e03a      	b.n	8006e06 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9a:	d103      	bne.n	8006da4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e009      	b.n	8006db8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d006      	beq.n	8006db8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <osMutexWait+0x40>
      ticks = 1;
 8006db4:	2301      	movs	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006db8:	f7ff ff51 	bl	8006c5e <inHandlerMode>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d017      	beq.n	8006df2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006dc2:	f107 0308 	add.w	r3, r7, #8
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 f892 	bl	8007ef4 <xQueueReceiveFromISR>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d001      	beq.n	8006dda <osMutexWait+0x62>
      return osErrorOS;
 8006dd6:	23ff      	movs	r3, #255	; 0xff
 8006dd8:	e015      	b.n	8006e06 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d011      	beq.n	8006e04 <osMutexWait+0x8c>
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <osMutexWait+0x98>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	e008      	b.n	8006e04 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 ff6d 	bl	8007cd4 <xQueueSemaphoreTake>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d001      	beq.n	8006e04 <osMutexWait+0x8c>
    return osErrorOS;
 8006e00:	23ff      	movs	r3, #255	; 0xff
 8006e02:	e000      	b.n	8006e06 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006e24:	f7ff ff1b 	bl	8006c5e <inHandlerMode>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006e2e:	f107 0308 	add.w	r3, r7, #8
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fdd9 	bl	80079ec <xQueueGiveFromISR>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d001      	beq.n	8006e44 <osMutexRelease+0x30>
      return osErrorOS;
 8006e40:	23ff      	movs	r3, #255	; 0xff
 8006e42:	e017      	b.n	8006e74 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d013      	beq.n	8006e72 <osMutexRelease+0x5e>
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <osMutexRelease+0x68>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	e00a      	b.n	8006e72 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fc24 	bl	80076b0 <xQueueGenericSend>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d001      	beq.n	8006e72 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006e6e:	23ff      	movs	r3, #255	; 0xff
 8006e70:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006e72:	68fb      	ldr	r3, [r7, #12]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d10b      	bne.n	8006eb0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f000 fada 	bl	8007460 <xQueueGenericCreateStatic>
 8006eac:	4603      	mov	r3, r0
 8006eae:	e016      	b.n	8006ede <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e014      	b.n	8006ede <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d110      	bne.n	8006edc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006eba:	2203      	movs	r2, #3
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	f000 fb4a 	bl	8007558 <xQueueGenericCreate>
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <osSemaphoreCreate+0x58>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fbec 	bl	80076b0 <xQueueGenericSend>
      return sema;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	e000      	b.n	8006ede <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006edc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	e03a      	b.n	8006f76 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d103      	bne.n	8006f14 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e009      	b.n	8006f28 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <osSemaphoreWait+0x40>
      ticks = 1;
 8006f24:	2301      	movs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006f28:	f7ff fe99 	bl	8006c5e <inHandlerMode>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f32:	f107 0308 	add.w	r3, r7, #8
 8006f36:	461a      	mov	r2, r3
 8006f38:	2100      	movs	r1, #0
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 ffda 	bl	8007ef4 <xQueueReceiveFromISR>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d001      	beq.n	8006f4a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006f46:	23ff      	movs	r3, #255	; 0xff
 8006f48:	e015      	b.n	8006f76 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d011      	beq.n	8006f74 <osSemaphoreWait+0x8c>
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <osSemaphoreWait+0x98>)
 8006f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	e008      	b.n	8006f74 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 feb5 	bl	8007cd4 <xQueueSemaphoreTake>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d001      	beq.n	8006f74 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006f70:	23ff      	movs	r3, #255	; 0xff
 8006f72:	e000      	b.n	8006f76 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006f94:	f7ff fe63 	bl	8006c5e <inHandlerMode>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d016      	beq.n	8006fcc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fd21 	bl	80079ec <xQueueGiveFromISR>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006fb0:	23ff      	movs	r3, #255	; 0xff
 8006fb2:	e017      	b.n	8006fe4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d013      	beq.n	8006fe2 <osSemaphoreRelease+0x5e>
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <osSemaphoreRelease+0x68>)
 8006fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	e00a      	b.n	8006fe2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb6c 	bl	80076b0 <xQueueGenericSend>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006fde:	23ff      	movs	r3, #255	; 0xff
 8006fe0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	e000ed04 	.word	0xe000ed04

08006ff0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006ff8:	f7ff fe31 	bl	8006c5e <inHandlerMode>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007002:	2382      	movs	r3, #130	; 0x82
 8007004:	e003      	b.n	800700e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 f833 	bl	8008072 <vQueueDelete>

  return osOK; 
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007016:	b590      	push	{r4, r7, lr}
 8007018:	b085      	sub	sp, #20
 800701a:	af02      	add	r7, sp, #8
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d012      	beq.n	800704e <osMessageCreate+0x38>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6859      	ldr	r1, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68dc      	ldr	r4, [r3, #12]
 8007040:	2300      	movs	r3, #0
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4623      	mov	r3, r4
 8007046:	f000 fa0b 	bl	8007460 <xQueueGenericCreateStatic>
 800704a:	4603      	mov	r3, r0
 800704c:	e008      	b.n	8007060 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	4619      	mov	r1, r3
 800705a:	f000 fa7d 	bl	8007558 <xQueueGenericCreate>
 800705e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bd90      	pop	{r4, r7, pc}

08007068 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <osMessagePut+0x1e>
    ticks = 1;
 8007082:	2301      	movs	r3, #1
 8007084:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007086:	f7ff fdea 	bl	8006c5e <inHandlerMode>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d018      	beq.n	80070c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007090:	f107 0210 	add.w	r2, r7, #16
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	2300      	movs	r3, #0
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fc0a 	bl	80078b4 <xQueueGenericSendFromISR>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <osMessagePut+0x42>
      return osErrorOS;
 80070a6:	23ff      	movs	r3, #255	; 0xff
 80070a8:	e018      	b.n	80070dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d014      	beq.n	80070da <osMessagePut+0x72>
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <osMessagePut+0x7c>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	e00b      	b.n	80070da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80070c2:	f107 0108 	add.w	r1, r7, #8
 80070c6:	2300      	movs	r3, #0
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 faf0 	bl	80076b0 <xQueueGenericSend>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d001      	beq.n	80070da <osMessagePut+0x72>
      return osErrorOS;
 80070d6:	23ff      	movs	r3, #255	; 0xff
 80070d8:	e000      	b.n	80070dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b08b      	sub	sp, #44	; 0x2c
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007102:	2380      	movs	r3, #128	; 0x80
 8007104:	617b      	str	r3, [r7, #20]
    return event;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	461c      	mov	r4, r3
 800710a:	f107 0314 	add.w	r3, r7, #20
 800710e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007116:	e054      	b.n	80071c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d103      	bne.n	8007130 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
 800712e:	e009      	b.n	8007144 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d006      	beq.n	8007144 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <osMessageGet+0x5c>
      ticks = 1;
 8007140:	2301      	movs	r3, #1
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007144:	f7ff fd8b 	bl	8006c5e <inHandlerMode>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01c      	beq.n	8007188 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800714e:	f107 0220 	add.w	r2, r7, #32
 8007152:	f107 0314 	add.w	r3, r7, #20
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	68b8      	ldr	r0, [r7, #8]
 800715c:	f000 feca 	bl	8007ef4 <xQueueReceiveFromISR>
 8007160:	4603      	mov	r3, r0
 8007162:	2b01      	cmp	r3, #1
 8007164:	d102      	bne.n	800716c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007166:	2310      	movs	r3, #16
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	e001      	b.n	8007170 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01d      	beq.n	80071b2 <osMessageGet+0xca>
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <osMessageGet+0xe4>)
 8007178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	e014      	b.n	80071b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007188:	f107 0314 	add.w	r3, r7, #20
 800718c:	3304      	adds	r3, #4
 800718e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007190:	4619      	mov	r1, r3
 8007192:	68b8      	ldr	r0, [r7, #8]
 8007194:	f000 fcbc 	bl	8007b10 <xQueueReceive>
 8007198:	4603      	mov	r3, r0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d102      	bne.n	80071a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800719e:	2310      	movs	r3, #16
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	e006      	b.n	80071b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <osMessageGet+0xc6>
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <osMessageGet+0xc8>
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	461c      	mov	r4, r3
 80071b6:	f107 0314 	add.w	r3, r7, #20
 80071ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	372c      	adds	r7, #44	; 0x2c
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd90      	pop	{r4, r7, pc}
 80071ca:	bf00      	nop
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80071d8:	f7ff fd41 	bl	8006c5e <inHandlerMode>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 ff28 	bl	8008038 <uxQueueMessagesWaitingFromISR>
 80071e8:	4603      	mov	r3, r0
 80071ea:	e003      	b.n	80071f4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 ff04 	bl	8007ffa <uxQueueMessagesWaiting>
 80071f2:	4603      	mov	r3, r0
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007204:	f7ff fd2b 	bl	8006c5e <inHandlerMode>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <osMessageDelete+0x16>
    return osErrorISR;
 800720e:	2382      	movs	r3, #130	; 0x82
 8007210:	e003      	b.n	800721a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 ff2d 	bl	8008072 <vQueueDelete>

  return osOK; 
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f103 0208 	add.w	r2, r3, #8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f04f 32ff 	mov.w	r2, #4294967295
 800723a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f103 0208 	add.w	r2, r3, #8
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f103 0208 	add.w	r2, r3, #8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d103      	bne.n	80072e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	e00c      	b.n	80072fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3308      	adds	r3, #8
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e002      	b.n	80072f2 <vListInsert+0x2e>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d2f6      	bcs.n	80072ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	601a      	str	r2, [r3, #0]
}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6892      	ldr	r2, [r2, #8]
 800734c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6852      	ldr	r2, [r2, #4]
 8007356:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	429a      	cmp	r2, r3
 8007360:	d103      	bne.n	800736a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1e5a      	subs	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	b672      	cpsid	i
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	b662      	cpsie	i
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	e7fe      	b.n	80073b6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80073b8:	f002 f8e6 	bl	8009588 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e8:	3b01      	subs	r3, #1
 80073ea:	68f9      	ldr	r1, [r7, #12]
 80073ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	22ff      	movs	r2, #255	; 0xff
 80073fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	22ff      	movs	r2, #255	; 0xff
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d114      	bne.n	8007438 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01a      	beq.n	800744c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3310      	adds	r3, #16
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fb9e 	bl	8008b5c <xTaskRemoveFromEventList>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007426:	4b0d      	ldr	r3, [pc, #52]	; (800745c <xQueueGenericReset+0xd0>)
 8007428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	e009      	b.n	800744c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3310      	adds	r3, #16
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fef0 	bl	8007222 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3324      	adds	r3, #36	; 0x24
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff feeb 	bl	8007222 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800744c:	f002 f8ce 	bl	80095ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007450:	2301      	movs	r3, #1
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xQueueGenericCreateStatic+0x2c>
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	b672      	cpsid	i
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	b662      	cpsie	i
 8007488:	62bb      	str	r3, [r7, #40]	; 0x28
 800748a:	e7fe      	b.n	800748a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <xQueueGenericCreateStatic+0x4a>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	b672      	cpsid	i
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	b662      	cpsie	i
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
 80074a8:	e7fe      	b.n	80074a8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <xQueueGenericCreateStatic+0x56>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <xQueueGenericCreateStatic+0x5a>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <xQueueGenericCreateStatic+0x5c>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xQueueGenericCreateStatic+0x78>
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	e7fe      	b.n	80074d6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <xQueueGenericCreateStatic+0x84>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <xQueueGenericCreateStatic+0x88>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <xQueueGenericCreateStatic+0x8a>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <xQueueGenericCreateStatic+0xa6>
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	b672      	cpsid	i
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	b662      	cpsie	i
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	e7fe      	b.n	8007504 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007506:	2348      	movs	r3, #72	; 0x48
 8007508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b48      	cmp	r3, #72	; 0x48
 800750e:	d00b      	beq.n	8007528 <xQueueGenericCreateStatic+0xc8>
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	b672      	cpsid	i
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	b662      	cpsie	i
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e7fe      	b.n	8007526 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800753a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f844 	bl	80075d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007550:	4618      	mov	r0, r3
 8007552:	3730      	adds	r7, #48	; 0x30
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10b      	bne.n	8007584 <xQueueGenericCreate+0x2c>
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	b672      	cpsid	i
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	b662      	cpsie	i
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	e7fe      	b.n	8007582 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	e004      	b.n	800759a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	3348      	adds	r3, #72	; 0x48
 800759e:	4618      	mov	r0, r3
 80075a0:	f002 f914 	bl	80097cc <pvPortMalloc>
 80075a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00f      	beq.n	80075cc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3348      	adds	r3, #72	; 0x48
 80075b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075ba:	79fa      	ldrb	r2, [r7, #7]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f805 	bl	80075d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80075cc:	69bb      	ldr	r3, [r7, #24]
	}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
 80075e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e002      	b.n	80075f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007604:	2101      	movs	r1, #1
 8007606:	69b8      	ldr	r0, [r7, #24]
 8007608:	f7ff fec0 	bl	800738c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007634:	2300      	movs	r3, #0
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f838 	bl	80076b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007652:	2301      	movs	r3, #1
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	461a      	mov	r2, r3
 800765e:	6939      	ldr	r1, [r7, #16]
 8007660:	6978      	ldr	r0, [r7, #20]
 8007662:	f7ff ff79 	bl	8007558 <xQueueGenericCreate>
 8007666:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff ffd3 	bl	8007614 <prvInitialiseMutex>

		return pxNewQueue;
 800766e:	68fb      	ldr	r3, [r7, #12]
	}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af02      	add	r7, sp, #8
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007684:	2301      	movs	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	2300      	movs	r3, #0
 800768a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	6939      	ldr	r1, [r7, #16]
 8007696:	6978      	ldr	r0, [r7, #20]
 8007698:	f7ff fee2 	bl	8007460 <xQueueGenericCreateStatic>
 800769c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff ffb8 	bl	8007614 <prvInitialiseMutex>

		return pxNewQueue;
 80076a4:	68fb      	ldr	r3, [r7, #12]
	}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076be:	2300      	movs	r3, #0
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10b      	bne.n	80076e4 <xQueueGenericSend+0x34>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	b672      	cpsid	i
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	b662      	cpsie	i
 80076e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e2:	e7fe      	b.n	80076e2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d103      	bne.n	80076f2 <xQueueGenericSend+0x42>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <xQueueGenericSend+0x46>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <xQueueGenericSend+0x48>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10b      	bne.n	8007714 <xQueueGenericSend+0x64>
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	b672      	cpsid	i
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	b662      	cpsie	i
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
 8007712:	e7fe      	b.n	8007712 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d103      	bne.n	8007722 <xQueueGenericSend+0x72>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <xQueueGenericSend+0x76>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <xQueueGenericSend+0x78>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <xQueueGenericSend+0x94>
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	623b      	str	r3, [r7, #32]
 8007742:	e7fe      	b.n	8007742 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007744:	f001 fbce 	bl	8008ee4 <xTaskGetSchedulerState>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <xQueueGenericSend+0xa4>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <xQueueGenericSend+0xa8>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <xQueueGenericSend+0xaa>
 8007758:	2300      	movs	r3, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <xQueueGenericSend+0xc6>
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e7fe      	b.n	8007774 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007776:	f001 ff07 	bl	8009588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	429a      	cmp	r2, r3
 8007784:	d302      	bcc.n	800778c <xQueueGenericSend+0xdc>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d129      	bne.n	80077e0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007792:	f000 fcaa 	bl	80080ea <prvCopyDataToQueue>
 8007796:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d010      	beq.n	80077c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	3324      	adds	r3, #36	; 0x24
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 f9d9 	bl	8008b5c <xTaskRemoveFromEventList>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d013      	beq.n	80077d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077b0:	4b3f      	ldr	r3, [pc, #252]	; (80078b0 <xQueueGenericSend+0x200>)
 80077b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	e00a      	b.n	80077d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077c8:	4b39      	ldr	r3, [pc, #228]	; (80078b0 <xQueueGenericSend+0x200>)
 80077ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077d8:	f001 ff08 	bl	80095ec <vPortExitCritical>
				return pdPASS;
 80077dc:	2301      	movs	r3, #1
 80077de:	e063      	b.n	80078a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077e6:	f001 ff01 	bl	80095ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	e05c      	b.n	80078a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077f4:	f107 0314 	add.w	r3, r7, #20
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 fa13 	bl	8008c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077fe:	2301      	movs	r3, #1
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007802:	f001 fef3 	bl	80095ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007806:	f000 ff9b 	bl	8008740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800780a:	f001 febd 	bl	8009588 <vPortEnterCritical>
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007814:	b25b      	sxtb	r3, r3
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d103      	bne.n	8007824 <xQueueGenericSend+0x174>
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800782a:	b25b      	sxtb	r3, r3
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d103      	bne.n	800783a <xQueueGenericSend+0x18a>
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800783a:	f001 fed7 	bl	80095ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800783e:	1d3a      	adds	r2, r7, #4
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f001 fa02 	bl	8008c50 <xTaskCheckForTimeOut>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d124      	bne.n	800789c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007854:	f000 fd41 	bl	80082da <prvIsQueueFull>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d018      	beq.n	8007890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	3310      	adds	r3, #16
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f001 f952 	bl	8008b10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800786c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800786e:	f000 fccc 	bl	800820a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007872:	f000 ff73 	bl	800875c <xTaskResumeAll>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	f47f af7c 	bne.w	8007776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <xQueueGenericSend+0x200>)
 8007880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	e772      	b.n	8007776 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007892:	f000 fcba 	bl	800820a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007896:	f000 ff61 	bl	800875c <xTaskResumeAll>
 800789a:	e76c      	b.n	8007776 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800789c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800789e:	f000 fcb4 	bl	800820a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078a2:	f000 ff5b 	bl	800875c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078a6:	2300      	movs	r3, #0
		}
	}
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3738      	adds	r7, #56	; 0x38
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08e      	sub	sp, #56	; 0x38
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xQueueGenericSendFromISR+0x30>
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	b672      	cpsid	i
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	b662      	cpsie	i
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
 80078e2:	e7fe      	b.n	80078e2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <xQueueGenericSendFromISR+0x3e>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <xQueueGenericSendFromISR+0x42>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <xQueueGenericSendFromISR+0x44>
 80078f6:	2300      	movs	r3, #0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <xQueueGenericSendFromISR+0x60>
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	b672      	cpsid	i
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	b662      	cpsie	i
 8007910:	623b      	str	r3, [r7, #32]
 8007912:	e7fe      	b.n	8007912 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d103      	bne.n	8007922 <xQueueGenericSendFromISR+0x6e>
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <xQueueGenericSendFromISR+0x72>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <xQueueGenericSendFromISR+0x74>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <xQueueGenericSendFromISR+0x90>
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	e7fe      	b.n	8007942 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007944:	f001 ff00 	bl	8009748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007948:	f3ef 8211 	mrs	r2, BASEPRI
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	b672      	cpsid	i
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	b662      	cpsie	i
 8007960:	61ba      	str	r2, [r7, #24]
 8007962:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007964:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <xQueueGenericSendFromISR+0xc6>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d12c      	bne.n	80079d4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800798a:	f000 fbae 	bl	80080ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800798e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d112      	bne.n	80079be <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	4618      	mov	r0, r3
 80079a6:	f001 f8d9 	bl	8008b5c <xTaskRemoveFromEventList>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00e      	beq.n	80079ce <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e007      	b.n	80079ce <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079c2:	3301      	adds	r3, #1
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	b25a      	sxtb	r2, r3
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079ce:	2301      	movs	r3, #1
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80079d2:	e001      	b.n	80079d8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3738      	adds	r7, #56	; 0x38
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	; 0x38
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	b672      	cpsid	i
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	b662      	cpsie	i
 8007a14:	623b      	str	r3, [r7, #32]
 8007a16:	e7fe      	b.n	8007a16 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <xQueueGiveFromISR+0x4c>
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	b672      	cpsid	i
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	b662      	cpsie	i
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	e7fe      	b.n	8007a36 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <xQueueGiveFromISR+0x5c>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <xQueueGiveFromISR+0x60>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <xQueueGiveFromISR+0x62>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <xQueueGiveFromISR+0x7e>
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	b672      	cpsid	i
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	b662      	cpsie	i
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	e7fe      	b.n	8007a68 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a6a:	f001 fe6d 	bl	8009748 <vPortValidateInterruptPriority>
	__asm volatile
 8007a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	b672      	cpsid	i
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	b662      	cpsie	i
 8007a86:	617a      	str	r2, [r7, #20]
 8007a88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d22b      	bcs.n	8007af6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d112      	bne.n	8007ae0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d016      	beq.n	8007af0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	3324      	adds	r3, #36	; 0x24
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 f848 	bl	8008b5c <xTaskRemoveFromEventList>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00e      	beq.n	8007af0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2201      	movs	r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e007      	b.n	8007af0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	b25a      	sxtb	r2, r3
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007af0:	2301      	movs	r3, #1
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	e001      	b.n	8007afa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3738      	adds	r7, #56	; 0x38
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08c      	sub	sp, #48	; 0x30
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <xQueueReceive+0x32>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	b672      	cpsid	i
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	b662      	cpsie	i
 8007b3e:	623b      	str	r3, [r7, #32]
 8007b40:	e7fe      	b.n	8007b40 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d103      	bne.n	8007b50 <xQueueReceive+0x40>
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <xQueueReceive+0x44>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e000      	b.n	8007b56 <xQueueReceive+0x46>
 8007b54:	2300      	movs	r3, #0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <xQueueReceive+0x62>
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	b672      	cpsid	i
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	b662      	cpsie	i
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e7fe      	b.n	8007b70 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b72:	f001 f9b7 	bl	8008ee4 <xTaskGetSchedulerState>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <xQueueReceive+0x72>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <xQueueReceive+0x76>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <xQueueReceive+0x78>
 8007b86:	2300      	movs	r3, #0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <xQueueReceive+0x94>
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	e7fe      	b.n	8007ba2 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ba4:	f001 fcf0 	bl	8009588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01f      	beq.n	8007bf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb8:	f000 fb01 	bl	80081be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	1e5a      	subs	r2, r3, #1
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00f      	beq.n	8007bec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	3310      	adds	r3, #16
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 ffc3 	bl	8008b5c <xTaskRemoveFromEventList>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bdc:	4b3c      	ldr	r3, [pc, #240]	; (8007cd0 <xQueueReceive+0x1c0>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bec:	f001 fcfe 	bl	80095ec <vPortExitCritical>
				return pdPASS;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e069      	b.n	8007cc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bfa:	f001 fcf7 	bl	80095ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e062      	b.n	8007cc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c08:	f107 0310 	add.w	r3, r7, #16
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 f809 	bl	8008c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c16:	f001 fce9 	bl	80095ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c1a:	f000 fd91 	bl	8008740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c1e:	f001 fcb3 	bl	8009588 <vPortEnterCritical>
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c28:	b25b      	sxtb	r3, r3
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d103      	bne.n	8007c38 <xQueueReceive+0x128>
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <xQueueReceive+0x13e>
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4e:	f001 fccd 	bl	80095ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c52:	1d3a      	adds	r2, r7, #4
 8007c54:	f107 0310 	add.w	r3, r7, #16
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fff8 	bl	8008c50 <xTaskCheckForTimeOut>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d123      	bne.n	8007cae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c68:	f000 fb21 	bl	80082ae <prvIsQueueEmpty>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	3324      	adds	r3, #36	; 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 ff48 	bl	8008b10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f000 fac2 	bl	800820a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c86:	f000 fd69 	bl	800875c <xTaskResumeAll>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d189      	bne.n	8007ba4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <xQueueReceive+0x1c0>)
 8007c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	e780      	b.n	8007ba4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca4:	f000 fab1 	bl	800820a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ca8:	f000 fd58 	bl	800875c <xTaskResumeAll>
 8007cac:	e77a      	b.n	8007ba4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb0:	f000 faab 	bl	800820a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cb4:	f000 fd52 	bl	800875c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cba:	f000 faf8 	bl	80082ae <prvIsQueueEmpty>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f43f af6f 	beq.w	8007ba4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3730      	adds	r7, #48	; 0x30
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08e      	sub	sp, #56	; 0x38
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <xQueueSemaphoreTake+0x34>
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	b672      	cpsid	i
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	b662      	cpsie	i
 8007d04:	623b      	str	r3, [r7, #32]
 8007d06:	e7fe      	b.n	8007d06 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <xQueueSemaphoreTake+0x54>
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	b672      	cpsid	i
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	b662      	cpsie	i
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	e7fe      	b.n	8007d26 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d28:	f001 f8dc 	bl	8008ee4 <xTaskGetSchedulerState>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <xQueueSemaphoreTake+0x64>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <xQueueSemaphoreTake+0x68>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <xQueueSemaphoreTake+0x6a>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10b      	bne.n	8007d5a <xQueueSemaphoreTake+0x86>
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	b672      	cpsid	i
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	b662      	cpsie	i
 8007d56:	61bb      	str	r3, [r7, #24]
 8007d58:	e7fe      	b.n	8007d58 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d5a:	f001 fc15 	bl	8009588 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d024      	beq.n	8007db4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007d7a:	f001 fa81 	bl	8009280 <pvTaskIncrementMutexHeldCount>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00f      	beq.n	8007dac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	3310      	adds	r3, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fee3 	bl	8008b5c <xTaskRemoveFromEventList>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d9c:	4b54      	ldr	r3, [pc, #336]	; (8007ef0 <xQueueSemaphoreTake+0x21c>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dac:	f001 fc1e 	bl	80095ec <vPortExitCritical>
				return pdPASS;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e098      	b.n	8007ee6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d112      	bne.n	8007de0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <xQueueSemaphoreTake+0x104>
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	b672      	cpsid	i
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	b662      	cpsie	i
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	e7fe      	b.n	8007dd6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007dd8:	f001 fc08 	bl	80095ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e082      	b.n	8007ee6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007de6:	f107 030c 	add.w	r3, r7, #12
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ff1a 	bl	8008c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007df4:	f001 fbfa 	bl	80095ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007df8:	f000 fca2 	bl	8008740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dfc:	f001 fbc4 	bl	8009588 <vPortEnterCritical>
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e06:	b25b      	sxtb	r3, r3
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d103      	bne.n	8007e16 <xQueueSemaphoreTake+0x142>
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e1c:	b25b      	sxtb	r3, r3
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e22:	d103      	bne.n	8007e2c <xQueueSemaphoreTake+0x158>
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e2c:	f001 fbde 	bl	80095ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e30:	463a      	mov	r2, r7
 8007e32:	f107 030c 	add.w	r3, r7, #12
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 ff09 	bl	8008c50 <xTaskCheckForTimeOut>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d132      	bne.n	8007eaa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e46:	f000 fa32 	bl	80082ae <prvIsQueueEmpty>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d026      	beq.n	8007e9e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007e58:	f001 fb96 	bl	8009588 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 f85d 	bl	8008f20 <xTaskPriorityInherit>
 8007e66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007e68:	f001 fbc0 	bl	80095ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	3324      	adds	r3, #36	; 0x24
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	4611      	mov	r1, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fe4b 	bl	8008b10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e7c:	f000 f9c5 	bl	800820a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e80:	f000 fc6c 	bl	800875c <xTaskResumeAll>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f47f af67 	bne.w	8007d5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007e8c:	4b18      	ldr	r3, [pc, #96]	; (8007ef0 <xQueueSemaphoreTake+0x21c>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	e75d      	b.n	8007d5a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ea0:	f000 f9b3 	bl	800820a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ea4:	f000 fc5a 	bl	800875c <xTaskResumeAll>
 8007ea8:	e757      	b.n	8007d5a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eac:	f000 f9ad 	bl	800820a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eb0:	f000 fc54 	bl	800875c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eb6:	f000 f9fa 	bl	80082ae <prvIsQueueEmpty>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f43f af4c 	beq.w	8007d5a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00d      	beq.n	8007ee4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007ec8:	f001 fb5e 	bl	8009588 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ece:	f000 f8f4 	bl	80080ba <prvGetDisinheritPriorityAfterTimeout>
 8007ed2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 f92e 	bl	800913c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ee0:	f001 fb84 	bl	80095ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3738      	adds	r7, #56	; 0x38
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08e      	sub	sp, #56	; 0x38
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <xQueueReceiveFromISR+0x2e>
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	b672      	cpsid	i
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	b662      	cpsie	i
 8007f1e:	623b      	str	r3, [r7, #32]
 8007f20:	e7fe      	b.n	8007f20 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <xQueueReceiveFromISR+0x3c>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <xQueueReceiveFromISR+0x40>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <xQueueReceiveFromISR+0x42>
 8007f34:	2300      	movs	r3, #0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <xQueueReceiveFromISR+0x5e>
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	b672      	cpsid	i
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	b662      	cpsie	i
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e7fe      	b.n	8007f50 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f52:	f001 fbf9 	bl	8009748 <vPortValidateInterruptPriority>
	__asm volatile
 8007f56:	f3ef 8211 	mrs	r2, BASEPRI
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	b672      	cpsid	i
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	b662      	cpsie	i
 8007f6e:	61ba      	str	r2, [r7, #24]
 8007f70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d02f      	beq.n	8007fe2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f90:	f000 f915 	bl	80081be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	1e5a      	subs	r2, r3, #1
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa4:	d112      	bne.n	8007fcc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d016      	beq.n	8007fdc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	3310      	adds	r3, #16
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fdd2 	bl	8008b5c <xTaskRemoveFromEventList>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00e      	beq.n	8007fdc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e007      	b.n	8007fdc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	b25a      	sxtb	r2, r3
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe0:	e001      	b.n	8007fe6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3738      	adds	r7, #56	; 0x38
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	b672      	cpsid	i
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	b662      	cpsie	i
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	e7fe      	b.n	800801e <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8008020:	f001 fab2 	bl	8009588 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800802a:	f001 fadf 	bl	80095ec <vPortExitCritical>

	return uxReturn;
 800802e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <uxQueueMessagesWaitingFromISR+0x26>
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	b672      	cpsid	i
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	b662      	cpsie	i
 800805a:	60bb      	str	r3, [r7, #8]
 800805c:	e7fe      	b.n	800805c <uxQueueMessagesWaitingFromISR+0x24>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008064:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <vQueueDelete+0x2a>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	b672      	cpsid	i
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	b662      	cpsie	i
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	e7fe      	b.n	800809a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 f935 	bl	800830c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d102      	bne.n	80080b2 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f001 fc55 	bl	800995c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d006      	beq.n	80080d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1c3 0307 	rsb	r3, r3, #7
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	e001      	b.n	80080dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080dc:	68fb      	ldr	r3, [r7, #12]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10d      	bne.n	8008124 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d14d      	bne.n	80081ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 ff89 	bl	800902c <xTaskPriorityDisinherit>
 800811a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	605a      	str	r2, [r3, #4]
 8008122:	e043      	b.n	80081ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d119      	bne.n	800815e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6898      	ldr	r0, [r3, #8]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	461a      	mov	r2, r3
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	f00d fd84 	bl	8015c42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	441a      	add	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	429a      	cmp	r2, r3
 8008152:	d32b      	bcc.n	80081ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	609a      	str	r2, [r3, #8]
 800815c:	e026      	b.n	80081ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68d8      	ldr	r0, [r3, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	461a      	mov	r2, r3
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	f00d fd6a 	bl	8015c42 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	425b      	negs	r3, r3
 8008178:	441a      	add	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d207      	bcs.n	800819a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	425b      	negs	r3, r3
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d105      	bne.n	80081ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081b4:	697b      	ldr	r3, [r7, #20]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d018      	beq.n	8008202 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	441a      	add	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d303      	bcc.n	80081f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68d9      	ldr	r1, [r3, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	461a      	mov	r2, r3
 80081fc:	6838      	ldr	r0, [r7, #0]
 80081fe:	f00d fd20 	bl	8015c42 <memcpy>
	}
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008212:	f001 f9b9 	bl	8009588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800821c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800821e:	e011      	b.n	8008244 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	d012      	beq.n	800824e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3324      	adds	r3, #36	; 0x24
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fc95 	bl	8008b5c <xTaskRemoveFromEventList>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008238:	f000 fd6e 	bl	8008d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	3b01      	subs	r3, #1
 8008240:	b2db      	uxtb	r3, r3
 8008242:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dce9      	bgt.n	8008220 <prvUnlockQueue+0x16>
 800824c:	e000      	b.n	8008250 <prvUnlockQueue+0x46>
					break;
 800824e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	22ff      	movs	r2, #255	; 0xff
 8008254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008258:	f001 f9c8 	bl	80095ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800825c:	f001 f994 	bl	8009588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008266:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008268:	e011      	b.n	800828e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d012      	beq.n	8008298 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3310      	adds	r3, #16
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fc70 	bl	8008b5c <xTaskRemoveFromEventList>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008282:	f000 fd49 	bl	8008d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	3b01      	subs	r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800828e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	dce9      	bgt.n	800826a <prvUnlockQueue+0x60>
 8008296:	e000      	b.n	800829a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008298:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	22ff      	movs	r2, #255	; 0xff
 800829e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082a2:	f001 f9a3 	bl	80095ec <vPortExitCritical>
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082b6:	f001 f967 	bl	8009588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	e001      	b.n	80082cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082cc:	f001 f98e 	bl	80095ec <vPortExitCritical>

	return xReturn;
 80082d0:	68fb      	ldr	r3, [r7, #12]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082e2:	f001 f951 	bl	8009588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d102      	bne.n	80082f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	e001      	b.n	80082fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082fc:	f001 f976 	bl	80095ec <vPortExitCritical>

	return xReturn;
 8008300:	68fb      	ldr	r3, [r7, #12]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	e016      	b.n	8008348 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <vQueueUnregisterQueue+0x50>)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	d10b      	bne.n	8008342 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800832a:	4a0c      	ldr	r2, [pc, #48]	; (800835c <vQueueUnregisterQueue+0x50>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2100      	movs	r1, #0
 8008330:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008334:	4a09      	ldr	r2, [pc, #36]	; (800835c <vQueueUnregisterQueue+0x50>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	4413      	add	r3, r2
 800833c:	2200      	movs	r2, #0
 800833e:	605a      	str	r2, [r3, #4]
				break;
 8008340:	e005      	b.n	800834e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b07      	cmp	r3, #7
 800834c:	d9e5      	bls.n	800831a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	200079a8 	.word	0x200079a8

08008360 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08e      	sub	sp, #56	; 0x38
 8008364:	af04      	add	r7, sp, #16
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10b      	bne.n	800838c <xTaskCreateStatic+0x2c>
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	b672      	cpsid	i
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	b662      	cpsie	i
 8008388:	623b      	str	r3, [r7, #32]
 800838a:	e7fe      	b.n	800838a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <xTaskCreateStatic+0x4a>
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	b672      	cpsid	i
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	b662      	cpsie	i
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e7fe      	b.n	80083a8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083aa:	2354      	movs	r3, #84	; 0x54
 80083ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	2b54      	cmp	r3, #84	; 0x54
 80083b2:	d00b      	beq.n	80083cc <xTaskCreateStatic+0x6c>
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	b672      	cpsid	i
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	b662      	cpsie	i
 80083c8:	61bb      	str	r3, [r7, #24]
 80083ca:	e7fe      	b.n	80083ca <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01e      	beq.n	8008410 <xTaskCreateStatic+0xb0>
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01b      	beq.n	8008410 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	2202      	movs	r2, #2
 80083e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083ea:	2300      	movs	r3, #0
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	f107 0314 	add.w	r3, r7, #20
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f850 	bl	80084a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800840a:	f000 f8cd 	bl	80085a8 <prvAddNewTaskToReadyList>
 800840e:	e001      	b.n	8008414 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008414:	697b      	ldr	r3, [r7, #20]
	}
 8008416:	4618      	mov	r0, r3
 8008418:	3728      	adds	r7, #40	; 0x28
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800841e:	b580      	push	{r7, lr}
 8008420:	b08c      	sub	sp, #48	; 0x30
 8008422:	af04      	add	r7, sp, #16
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4618      	mov	r0, r3
 8008434:	f001 f9ca 	bl	80097cc <pvPortMalloc>
 8008438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008440:	2054      	movs	r0, #84	; 0x54
 8008442:	f001 f9c3 	bl	80097cc <pvPortMalloc>
 8008446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
 8008454:	e005      	b.n	8008462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008456:	6978      	ldr	r0, [r7, #20]
 8008458:	f001 fa80 	bl	800995c <vPortFree>
 800845c:	e001      	b.n	8008462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800845e:	2300      	movs	r3, #0
 8008460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d017      	beq.n	8008498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008470:	88fa      	ldrh	r2, [r7, #6]
 8008472:	2300      	movs	r3, #0
 8008474:	9303      	str	r3, [sp, #12]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 f80e 	bl	80084a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800848c:	69f8      	ldr	r0, [r7, #28]
 800848e:	f000 f88b 	bl	80085a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008492:	2301      	movs	r3, #1
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	e002      	b.n	800849e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008498:	f04f 33ff 	mov.w	r3, #4294967295
 800849c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800849e:	69bb      	ldr	r3, [r7, #24]
	}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3720      	adds	r7, #32
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80084c0:	440b      	add	r3, r1
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <prvInitialiseNewTask+0x4a>
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	b672      	cpsid	i
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	b662      	cpsie	i
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e7fe      	b.n	80084f0 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084f2:	2300      	movs	r3, #0
 80084f4:	61fb      	str	r3, [r7, #28]
 80084f6:	e012      	b.n	800851e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	7819      	ldrb	r1, [r3, #0]
 8008500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	3334      	adds	r3, #52	; 0x34
 8008508:	460a      	mov	r2, r1
 800850a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	3301      	adds	r3, #1
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b0f      	cmp	r3, #15
 8008522:	d9e9      	bls.n	80084f8 <prvInitialiseNewTask+0x50>
 8008524:	e000      	b.n	8008528 <prvInitialiseNewTask+0x80>
		{
			break;
 8008526:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	2b06      	cmp	r3, #6
 8008534:	d901      	bls.n	800853a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008536:	2306      	movs	r3, #6
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008544:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	2200      	movs	r2, #0
 800854a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	3304      	adds	r3, #4
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fe86 	bl	8007262 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	3318      	adds	r3, #24
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fe81 	bl	8007262 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008564:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	f1c3 0207 	rsb	r2, r3, #7
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008574:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	2200      	movs	r2, #0
 800857a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	69b8      	ldr	r0, [r7, #24]
 800858a:	f000 fef3 	bl	8009374 <pxPortInitialiseStack>
 800858e:	4602      	mov	r2, r0
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a0:	bf00      	nop
 80085a2:	3720      	adds	r7, #32
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085b0:	f000 ffea 	bl	8009588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085b4:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <prvAddNewTaskToReadyList+0xb8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	4a29      	ldr	r2, [pc, #164]	; (8008660 <prvAddNewTaskToReadyList+0xb8>)
 80085bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085c6:	4a27      	ldr	r2, [pc, #156]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085cc:	4b24      	ldr	r3, [pc, #144]	; (8008660 <prvAddNewTaskToReadyList+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d110      	bne.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085d4:	f000 fbc4 	bl	8008d60 <prvInitialiseTaskLists>
 80085d8:	e00d      	b.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085da:	4b23      	ldr	r3, [pc, #140]	; (8008668 <prvAddNewTaskToReadyList+0xc0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085e2:	4b20      	ldr	r3, [pc, #128]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d802      	bhi.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085f0:	4a1c      	ldr	r2, [pc, #112]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085f6:	4b1d      	ldr	r3, [pc, #116]	; (800866c <prvAddNewTaskToReadyList+0xc4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	4a1b      	ldr	r2, [pc, #108]	; (800866c <prvAddNewTaskToReadyList+0xc4>)
 80085fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	2201      	movs	r2, #1
 8008606:	409a      	lsls	r2, r3
 8008608:	4b19      	ldr	r3, [pc, #100]	; (8008670 <prvAddNewTaskToReadyList+0xc8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4313      	orrs	r3, r2
 800860e:	4a18      	ldr	r2, [pc, #96]	; (8008670 <prvAddNewTaskToReadyList+0xc8>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a15      	ldr	r2, [pc, #84]	; (8008674 <prvAddNewTaskToReadyList+0xcc>)
 8008620:	441a      	add	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7fe fe27 	bl	800727c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800862e:	f000 ffdd 	bl	80095ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008632:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <prvAddNewTaskToReadyList+0xc0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00e      	beq.n	8008658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	429a      	cmp	r2, r3
 8008646:	d207      	bcs.n	8008658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008648:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvAddNewTaskToReadyList+0xd0>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000580 	.word	0x20000580
 8008664:	20000480 	.word	0x20000480
 8008668:	2000058c 	.word	0x2000058c
 800866c:	2000059c 	.word	0x2000059c
 8008670:	20000588 	.word	0x20000588
 8008674:	20000484 	.word	0x20000484
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800868a:	463a      	mov	r2, r7
 800868c:	1d39      	adds	r1, r7, #4
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f7f8 fc1c 	bl	8000ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	2300      	movs	r3, #0
 80086a8:	460a      	mov	r2, r1
 80086aa:	491f      	ldr	r1, [pc, #124]	; (8008728 <vTaskStartScheduler+0xac>)
 80086ac:	481f      	ldr	r0, [pc, #124]	; (800872c <vTaskStartScheduler+0xb0>)
 80086ae:	f7ff fe57 	bl	8008360 <xTaskCreateStatic>
 80086b2:	4602      	mov	r2, r0
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <vTaskStartScheduler+0xb4>)
 80086b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086b8:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <vTaskStartScheduler+0xb4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	e001      	b.n	80086ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d117      	bne.n	8008700 <vTaskStartScheduler+0x84>
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	b672      	cpsid	i
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	b662      	cpsie	i
 80086e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086e6:	4b13      	ldr	r3, [pc, #76]	; (8008734 <vTaskStartScheduler+0xb8>)
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086ee:	4b12      	ldr	r3, [pc, #72]	; (8008738 <vTaskStartScheduler+0xbc>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80086f4:	4b11      	ldr	r3, [pc, #68]	; (800873c <vTaskStartScheduler+0xc0>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086fa:	f000 fec9 	bl	8009490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086fe:	e00f      	b.n	8008720 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d10b      	bne.n	8008720 <vTaskStartScheduler+0xa4>
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	b672      	cpsid	i
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	b662      	cpsie	i
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e7fe      	b.n	800871e <vTaskStartScheduler+0xa2>
}
 8008720:	bf00      	nop
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	08017250 	.word	0x08017250
 800872c:	08008d31 	.word	0x08008d31
 8008730:	200005a4 	.word	0x200005a4
 8008734:	200005a0 	.word	0x200005a0
 8008738:	2000058c 	.word	0x2000058c
 800873c:	20000584 	.word	0x20000584

08008740 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <vTaskSuspendAll+0x18>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a03      	ldr	r2, [pc, #12]	; (8008758 <vTaskSuspendAll+0x18>)
 800874c:	6013      	str	r3, [r2, #0]
}
 800874e:	bf00      	nop
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	200005a8 	.word	0x200005a8

0800875c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800876a:	4b42      	ldr	r3, [pc, #264]	; (8008874 <xTaskResumeAll+0x118>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10b      	bne.n	800878a <xTaskResumeAll+0x2e>
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	b672      	cpsid	i
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	b662      	cpsie	i
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	e7fe      	b.n	8008788 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800878a:	f000 fefd 	bl	8009588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800878e:	4b39      	ldr	r3, [pc, #228]	; (8008874 <xTaskResumeAll+0x118>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3b01      	subs	r3, #1
 8008794:	4a37      	ldr	r2, [pc, #220]	; (8008874 <xTaskResumeAll+0x118>)
 8008796:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008798:	4b36      	ldr	r3, [pc, #216]	; (8008874 <xTaskResumeAll+0x118>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d161      	bne.n	8008864 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087a0:	4b35      	ldr	r3, [pc, #212]	; (8008878 <xTaskResumeAll+0x11c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d05d      	beq.n	8008864 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a8:	e02e      	b.n	8008808 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80087aa:	4b34      	ldr	r3, [pc, #208]	; (800887c <xTaskResumeAll+0x120>)
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3318      	adds	r3, #24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fdbd 	bl	8007336 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fdb8 	bl	8007336 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	2201      	movs	r2, #1
 80087cc:	409a      	lsls	r2, r3
 80087ce:	4b2c      	ldr	r3, [pc, #176]	; (8008880 <xTaskResumeAll+0x124>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <xTaskResumeAll+0x124>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a27      	ldr	r2, [pc, #156]	; (8008884 <xTaskResumeAll+0x128>)
 80087e6:	441a      	add	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe fd44 	bl	800727c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	4b23      	ldr	r3, [pc, #140]	; (8008888 <xTaskResumeAll+0x12c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	429a      	cmp	r2, r3
 8008800:	d302      	bcc.n	8008808 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <xTaskResumeAll+0x130>)
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <xTaskResumeAll+0x120>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1cc      	bne.n	80087aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008816:	f000 fb3f 	bl	8008e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800881a:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <xTaskResumeAll+0x134>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008826:	f000 f859 	bl	80088dc <xTaskIncrementTick>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008830:	4b16      	ldr	r3, [pc, #88]	; (800888c <xTaskResumeAll+0x130>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3b01      	subs	r3, #1
 800883a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f1      	bne.n	8008826 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <xTaskResumeAll+0x134>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <xTaskResumeAll+0x130>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d009      	beq.n	8008864 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008854:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <xTaskResumeAll+0x138>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008864:	f000 fec2 	bl	80095ec <vPortExitCritical>

	return xAlreadyYielded;
 8008868:	68bb      	ldr	r3, [r7, #8]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200005a8 	.word	0x200005a8
 8008878:	20000580 	.word	0x20000580
 800887c:	20000540 	.word	0x20000540
 8008880:	20000588 	.word	0x20000588
 8008884:	20000484 	.word	0x20000484
 8008888:	20000480 	.word	0x20000480
 800888c:	20000594 	.word	0x20000594
 8008890:	20000590 	.word	0x20000590
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <xTaskGetTickCount+0x1c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088a4:	687b      	ldr	r3, [r7, #4]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20000584 	.word	0x20000584

080088b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088be:	f000 ff43 	bl	8009748 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80088c2:	2300      	movs	r3, #0
 80088c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80088c6:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <xTaskGetTickCountFromISR+0x20>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088cc:	683b      	ldr	r3, [r7, #0]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000584 	.word	0x20000584

080088dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e6:	4b51      	ldr	r3, [pc, #324]	; (8008a2c <xTaskIncrementTick+0x150>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 808e 	bne.w	8008a0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088f0:	4b4f      	ldr	r3, [pc, #316]	; (8008a30 <xTaskIncrementTick+0x154>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088f8:	4a4d      	ldr	r2, [pc, #308]	; (8008a30 <xTaskIncrementTick+0x154>)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d121      	bne.n	8008948 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008904:	4b4b      	ldr	r3, [pc, #300]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00b      	beq.n	8008926 <xTaskIncrementTick+0x4a>
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	b672      	cpsid	i
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	b662      	cpsie	i
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	e7fe      	b.n	8008924 <xTaskIncrementTick+0x48>
 8008926:	4b43      	ldr	r3, [pc, #268]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	4b42      	ldr	r3, [pc, #264]	; (8008a38 <xTaskIncrementTick+0x15c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a40      	ldr	r2, [pc, #256]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	4a40      	ldr	r2, [pc, #256]	; (8008a38 <xTaskIncrementTick+0x15c>)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	4b40      	ldr	r3, [pc, #256]	; (8008a3c <xTaskIncrementTick+0x160>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3301      	adds	r3, #1
 8008940:	4a3e      	ldr	r2, [pc, #248]	; (8008a3c <xTaskIncrementTick+0x160>)
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	f000 faa8 	bl	8008e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008948:	4b3d      	ldr	r3, [pc, #244]	; (8008a40 <xTaskIncrementTick+0x164>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	429a      	cmp	r2, r3
 8008950:	d34d      	bcc.n	80089ee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008952:	4b38      	ldr	r3, [pc, #224]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <xTaskIncrementTick+0x84>
 800895c:	2301      	movs	r3, #1
 800895e:	e000      	b.n	8008962 <xTaskIncrementTick+0x86>
 8008960:	2300      	movs	r3, #0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008966:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <xTaskIncrementTick+0x164>)
 8008968:	f04f 32ff 	mov.w	r2, #4294967295
 800896c:	601a      	str	r2, [r3, #0]
					break;
 800896e:	e03e      	b.n	80089ee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008970:	4b30      	ldr	r3, [pc, #192]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d203      	bcs.n	8008990 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008988:	4a2d      	ldr	r2, [pc, #180]	; (8008a40 <xTaskIncrementTick+0x164>)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6013      	str	r3, [r2, #0]
						break;
 800898e:	e02e      	b.n	80089ee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3304      	adds	r3, #4
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe fcce 	bl	8007336 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d004      	beq.n	80089ac <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	3318      	adds	r3, #24
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fcc5 	bl	8007336 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	2201      	movs	r2, #1
 80089b2:	409a      	lsls	r2, r3
 80089b4:	4b23      	ldr	r3, [pc, #140]	; (8008a44 <xTaskIncrementTick+0x168>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	4a22      	ldr	r2, [pc, #136]	; (8008a44 <xTaskIncrementTick+0x168>)
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4a1f      	ldr	r2, [pc, #124]	; (8008a48 <xTaskIncrementTick+0x16c>)
 80089cc:	441a      	add	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fe fc51 	bl	800727c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089de:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <xTaskIncrementTick+0x170>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d3b4      	bcc.n	8008952 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ec:	e7b1      	b.n	8008952 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089ee:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <xTaskIncrementTick+0x170>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4914      	ldr	r1, [pc, #80]	; (8008a48 <xTaskIncrementTick+0x16c>)
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	440b      	add	r3, r1
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d907      	bls.n	8008a16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008a06:	2301      	movs	r3, #1
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e004      	b.n	8008a16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a0c:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <xTaskIncrementTick+0x174>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <xTaskIncrementTick+0x174>)
 8008a14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <xTaskIncrementTick+0x178>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a22:	697b      	ldr	r3, [r7, #20]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	200005a8 	.word	0x200005a8
 8008a30:	20000584 	.word	0x20000584
 8008a34:	20000538 	.word	0x20000538
 8008a38:	2000053c 	.word	0x2000053c
 8008a3c:	20000598 	.word	0x20000598
 8008a40:	200005a0 	.word	0x200005a0
 8008a44:	20000588 	.word	0x20000588
 8008a48:	20000484 	.word	0x20000484
 8008a4c:	20000480 	.word	0x20000480
 8008a50:	20000590 	.word	0x20000590
 8008a54:	20000594 	.word	0x20000594

08008a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a5e:	4b27      	ldr	r3, [pc, #156]	; (8008afc <vTaskSwitchContext+0xa4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a66:	4b26      	ldr	r3, [pc, #152]	; (8008b00 <vTaskSwitchContext+0xa8>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a6c:	e040      	b.n	8008af0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008a6e:	4b24      	ldr	r3, [pc, #144]	; (8008b00 <vTaskSwitchContext+0xa8>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a74:	4b23      	ldr	r3, [pc, #140]	; (8008b04 <vTaskSwitchContext+0xac>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	fab3 f383 	clz	r3, r3
 8008a80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	f1c3 031f 	rsb	r3, r3, #31
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	491f      	ldr	r1, [pc, #124]	; (8008b08 <vTaskSwitchContext+0xb0>)
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	b672      	cpsid	i
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	b662      	cpsie	i
 8008ab2:	607b      	str	r3, [r7, #4]
 8008ab4:	e7fe      	b.n	8008ab4 <vTaskSwitchContext+0x5c>
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <vTaskSwitchContext+0xb0>)
 8008ac2:	4413      	add	r3, r2
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	605a      	str	r2, [r3, #4]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d104      	bne.n	8008ae6 <vTaskSwitchContext+0x8e>
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4a07      	ldr	r2, [pc, #28]	; (8008b0c <vTaskSwitchContext+0xb4>)
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	200005a8 	.word	0x200005a8
 8008b00:	20000594 	.word	0x20000594
 8008b04:	20000588 	.word	0x20000588
 8008b08:	20000484 	.word	0x20000484
 8008b0c:	20000480 	.word	0x20000480

08008b10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10b      	bne.n	8008b38 <vTaskPlaceOnEventList+0x28>
 8008b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b24:	b672      	cpsid	i
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	b662      	cpsie	i
 8008b34:	60fb      	str	r3, [r7, #12]
 8008b36:	e7fe      	b.n	8008b36 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b38:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <vTaskPlaceOnEventList+0x48>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3318      	adds	r3, #24
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fe fbbf 	bl	80072c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b46:	2101      	movs	r1, #1
 8008b48:	6838      	ldr	r0, [r7, #0]
 8008b4a:	f000 fbad 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
}
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000480 	.word	0x20000480

08008b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <xTaskRemoveFromEventList+0x2e>
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	b672      	cpsid	i
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	b662      	cpsie	i
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	e7fe      	b.n	8008b88 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fbd1 	bl	8007336 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b94:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <xTaskRemoveFromEventList+0xb0>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11c      	bne.n	8008bd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fbc8 	bl	8007336 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	2201      	movs	r2, #1
 8008bac:	409a      	lsls	r2, r3
 8008bae:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <xTaskRemoveFromEventList+0xb4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	4a16      	ldr	r2, [pc, #88]	; (8008c10 <xTaskRemoveFromEventList+0xb4>)
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4a13      	ldr	r2, [pc, #76]	; (8008c14 <xTaskRemoveFromEventList+0xb8>)
 8008bc6:	441a      	add	r2, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f7fe fb54 	bl	800727c <vListInsertEnd>
 8008bd4:	e005      	b.n	8008be2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	3318      	adds	r3, #24
 8008bda:	4619      	mov	r1, r3
 8008bdc:	480e      	ldr	r0, [pc, #56]	; (8008c18 <xTaskRemoveFromEventList+0xbc>)
 8008bde:	f7fe fb4d 	bl	800727c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <xTaskRemoveFromEventList+0xc0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d905      	bls.n	8008bfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <xTaskRemoveFromEventList+0xc4>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e001      	b.n	8008c00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008c00:	697b      	ldr	r3, [r7, #20]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200005a8 	.word	0x200005a8
 8008c10:	20000588 	.word	0x20000588
 8008c14:	20000484 	.word	0x20000484
 8008c18:	20000540 	.word	0x20000540
 8008c1c:	20000480 	.word	0x20000480
 8008c20:	20000594 	.word	0x20000594

08008c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <vTaskInternalSetTimeOutState+0x24>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c34:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <vTaskInternalSetTimeOutState+0x28>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	605a      	str	r2, [r3, #4]
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	20000598 	.word	0x20000598
 8008c4c:	20000584 	.word	0x20000584

08008c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <xTaskCheckForTimeOut+0x28>
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	b672      	cpsid	i
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	b662      	cpsie	i
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	e7fe      	b.n	8008c76 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10b      	bne.n	8008c96 <xTaskCheckForTimeOut+0x46>
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	b672      	cpsid	i
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	b662      	cpsie	i
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	e7fe      	b.n	8008c94 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008c96:	f000 fc77 	bl	8009588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c9a:	4b1d      	ldr	r3, [pc, #116]	; (8008d10 <xTaskCheckForTimeOut+0xc0>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb2:	d102      	bne.n	8008cba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61fb      	str	r3, [r7, #28]
 8008cb8:	e023      	b.n	8008d02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <xTaskCheckForTimeOut+0xc4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d007      	beq.n	8008cd6 <xTaskCheckForTimeOut+0x86>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d302      	bcc.n	8008cd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	e015      	b.n	8008d02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d20b      	bcs.n	8008cf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	1ad2      	subs	r2, r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff ff99 	bl	8008c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61fb      	str	r3, [r7, #28]
 8008cf6:	e004      	b.n	8008d02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d02:	f000 fc73 	bl	80095ec <vPortExitCritical>

	return xReturn;
 8008d06:	69fb      	ldr	r3, [r7, #28]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3720      	adds	r7, #32
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000584 	.word	0x20000584
 8008d14:	20000598 	.word	0x20000598

08008d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <vTaskMissedYield+0x14>)
 8008d1e:	2201      	movs	r2, #1
 8008d20:	601a      	str	r2, [r3, #0]
}
 8008d22:	bf00      	nop
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	20000594 	.word	0x20000594

08008d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d38:	f000 f852 	bl	8008de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <prvIdleTask+0x28>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d9f9      	bls.n	8008d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <prvIdleTask+0x2c>)
 8008d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d54:	e7f0      	b.n	8008d38 <prvIdleTask+0x8>
 8008d56:	bf00      	nop
 8008d58:	20000484 	.word	0x20000484
 8008d5c:	e000ed04 	.word	0xe000ed04

08008d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d66:	2300      	movs	r3, #0
 8008d68:	607b      	str	r3, [r7, #4]
 8008d6a:	e00c      	b.n	8008d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4a12      	ldr	r2, [pc, #72]	; (8008dc0 <prvInitialiseTaskLists+0x60>)
 8008d78:	4413      	add	r3, r2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fa51 	bl	8007222 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3301      	adds	r3, #1
 8008d84:	607b      	str	r3, [r7, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b06      	cmp	r3, #6
 8008d8a:	d9ef      	bls.n	8008d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d8c:	480d      	ldr	r0, [pc, #52]	; (8008dc4 <prvInitialiseTaskLists+0x64>)
 8008d8e:	f7fe fa48 	bl	8007222 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d92:	480d      	ldr	r0, [pc, #52]	; (8008dc8 <prvInitialiseTaskLists+0x68>)
 8008d94:	f7fe fa45 	bl	8007222 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d98:	480c      	ldr	r0, [pc, #48]	; (8008dcc <prvInitialiseTaskLists+0x6c>)
 8008d9a:	f7fe fa42 	bl	8007222 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d9e:	480c      	ldr	r0, [pc, #48]	; (8008dd0 <prvInitialiseTaskLists+0x70>)
 8008da0:	f7fe fa3f 	bl	8007222 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008da4:	480b      	ldr	r0, [pc, #44]	; (8008dd4 <prvInitialiseTaskLists+0x74>)
 8008da6:	f7fe fa3c 	bl	8007222 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <prvInitialiseTaskLists+0x78>)
 8008dac:	4a05      	ldr	r2, [pc, #20]	; (8008dc4 <prvInitialiseTaskLists+0x64>)
 8008dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <prvInitialiseTaskLists+0x7c>)
 8008db2:	4a05      	ldr	r2, [pc, #20]	; (8008dc8 <prvInitialiseTaskLists+0x68>)
 8008db4:	601a      	str	r2, [r3, #0]
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000484 	.word	0x20000484
 8008dc4:	20000510 	.word	0x20000510
 8008dc8:	20000524 	.word	0x20000524
 8008dcc:	20000540 	.word	0x20000540
 8008dd0:	20000554 	.word	0x20000554
 8008dd4:	2000056c 	.word	0x2000056c
 8008dd8:	20000538 	.word	0x20000538
 8008ddc:	2000053c 	.word	0x2000053c

08008de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008de6:	e019      	b.n	8008e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008de8:	f000 fbce 	bl	8009588 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008dec:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <prvCheckTasksWaitingTermination+0x4c>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fa9c 	bl	8007336 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <prvCheckTasksWaitingTermination+0x50>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	4a0a      	ldr	r2, [pc, #40]	; (8008e30 <prvCheckTasksWaitingTermination+0x50>)
 8008e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <prvCheckTasksWaitingTermination+0x54>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <prvCheckTasksWaitingTermination+0x54>)
 8008e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e12:	f000 fbeb 	bl	80095ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f80e 	bl	8008e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <prvCheckTasksWaitingTermination+0x54>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e1      	bne.n	8008de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000554 	.word	0x20000554
 8008e30:	20000580 	.word	0x20000580
 8008e34:	20000568 	.word	0x20000568

08008e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d108      	bne.n	8008e5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fd84 	bl	800995c <vPortFree>
				vPortFree( pxTCB );
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fd81 	bl	800995c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e5a:	e019      	b.n	8008e90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d103      	bne.n	8008e6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fd78 	bl	800995c <vPortFree>
	}
 8008e6c:	e010      	b.n	8008e90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d00b      	beq.n	8008e90 <prvDeleteTCB+0x58>
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	b672      	cpsid	i
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	b662      	cpsie	i
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e7fe      	b.n	8008e8e <prvDeleteTCB+0x56>
	}
 8008e90:	bf00      	nop
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <prvResetNextTaskUnblockTime+0x44>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <prvResetNextTaskUnblockTime+0x14>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <prvResetNextTaskUnblockTime+0x16>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <prvResetNextTaskUnblockTime+0x48>)
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eba:	e008      	b.n	8008ece <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <prvResetNextTaskUnblockTime+0x44>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	4a05      	ldr	r2, [pc, #20]	; (8008ee0 <prvResetNextTaskUnblockTime+0x48>)
 8008ecc:	6013      	str	r3, [r2, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	20000538 	.word	0x20000538
 8008ee0:	200005a0 	.word	0x200005a0

08008ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <xTaskGetSchedulerState+0x34>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	607b      	str	r3, [r7, #4]
 8008ef6:	e008      	b.n	8008f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef8:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <xTaskGetSchedulerState+0x38>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f00:	2302      	movs	r3, #2
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e001      	b.n	8008f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f06:	2300      	movs	r3, #0
 8008f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f0a:	687b      	ldr	r3, [r7, #4]
	}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	2000058c 	.word	0x2000058c
 8008f1c:	200005a8 	.word	0x200005a8

08008f20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d06e      	beq.n	8009014 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3a:	4b39      	ldr	r3, [pc, #228]	; (8009020 <xTaskPriorityInherit+0x100>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d25e      	bcs.n	8009002 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	db06      	blt.n	8008f5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4c:	4b34      	ldr	r3, [pc, #208]	; (8009020 <xTaskPriorityInherit+0x100>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	f1c3 0207 	rsb	r2, r3, #7
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6959      	ldr	r1, [r3, #20]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a2e      	ldr	r2, [pc, #184]	; (8009024 <xTaskPriorityInherit+0x104>)
 8008f6c:	4413      	add	r3, r2
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	d101      	bne.n	8008f76 <xTaskPriorityInherit+0x56>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <xTaskPriorityInherit+0x58>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d03a      	beq.n	8008ff2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe f9d8 	bl	8007336 <uxListRemove>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d115      	bne.n	8008fb8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	4924      	ldr	r1, [pc, #144]	; (8009024 <xTaskPriorityInherit+0x104>)
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <xTaskPriorityInherit+0x98>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	43da      	mvns	r2, r3
 8008fae:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <xTaskPriorityInherit+0x108>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	4a1c      	ldr	r2, [pc, #112]	; (8009028 <xTaskPriorityInherit+0x108>)
 8008fb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fb8:	4b19      	ldr	r3, [pc, #100]	; (8009020 <xTaskPriorityInherit+0x100>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	409a      	lsls	r2, r3
 8008fca:	4b17      	ldr	r3, [pc, #92]	; (8009028 <xTaskPriorityInherit+0x108>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	4a15      	ldr	r2, [pc, #84]	; (8009028 <xTaskPriorityInherit+0x108>)
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd8:	4613      	mov	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4a10      	ldr	r2, [pc, #64]	; (8009024 <xTaskPriorityInherit+0x104>)
 8008fe2:	441a      	add	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f7fe f946 	bl	800727c <vListInsertEnd>
 8008ff0:	e004      	b.n	8008ffc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <xTaskPriorityInherit+0x100>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e008      	b.n	8009014 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009006:	4b06      	ldr	r3, [pc, #24]	; (8009020 <xTaskPriorityInherit+0x100>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	429a      	cmp	r2, r3
 800900e:	d201      	bcs.n	8009014 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009010:	2301      	movs	r3, #1
 8009012:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009014:	68fb      	ldr	r3, [r7, #12]
	}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000480 	.word	0x20000480
 8009024:	20000484 	.word	0x20000484
 8009028:	20000588 	.word	0x20000588

0800902c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d070      	beq.n	8009124 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009042:	4b3b      	ldr	r3, [pc, #236]	; (8009130 <xTaskPriorityDisinherit+0x104>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	429a      	cmp	r2, r3
 800904a:	d00b      	beq.n	8009064 <xTaskPriorityDisinherit+0x38>
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	b672      	cpsid	i
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	b662      	cpsie	i
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e7fe      	b.n	8009062 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10b      	bne.n	8009084 <xTaskPriorityDisinherit+0x58>
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	b672      	cpsid	i
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	b662      	cpsie	i
 8009080:	60bb      	str	r3, [r7, #8]
 8009082:	e7fe      	b.n	8009082 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009088:	1e5a      	subs	r2, r3, #1
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009096:	429a      	cmp	r2, r3
 8009098:	d044      	beq.n	8009124 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d140      	bne.n	8009124 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe f945 	bl	8007336 <uxListRemove>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d115      	bne.n	80090de <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	491f      	ldr	r1, [pc, #124]	; (8009134 <xTaskPriorityDisinherit+0x108>)
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTaskPriorityDisinherit+0xb2>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	2201      	movs	r2, #1
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	43da      	mvns	r2, r3
 80090d4:	4b18      	ldr	r3, [pc, #96]	; (8009138 <xTaskPriorityDisinherit+0x10c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4013      	ands	r3, r2
 80090da:	4a17      	ldr	r2, [pc, #92]	; (8009138 <xTaskPriorityDisinherit+0x10c>)
 80090dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	f1c3 0207 	rsb	r2, r3, #7
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	2201      	movs	r2, #1
 80090f8:	409a      	lsls	r2, r3
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <xTaskPriorityDisinherit+0x10c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4313      	orrs	r3, r2
 8009100:	4a0d      	ldr	r2, [pc, #52]	; (8009138 <xTaskPriorityDisinherit+0x10c>)
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4a08      	ldr	r2, [pc, #32]	; (8009134 <xTaskPriorityDisinherit+0x108>)
 8009112:	441a      	add	r2, r3
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe f8ae 	bl	800727c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009120:	2301      	movs	r3, #1
 8009122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009124:	697b      	ldr	r3, [r7, #20]
	}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000480 	.word	0x20000480
 8009134:	20000484 	.word	0x20000484
 8009138:	20000588 	.word	0x20000588

0800913c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 808a 	beq.w	800926a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10b      	bne.n	8009176 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	b672      	cpsid	i
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	b662      	cpsie	i
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e7fe      	b.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d902      	bls.n	8009186 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	61fb      	str	r3, [r7, #28]
 8009184:	e002      	b.n	800918c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	429a      	cmp	r2, r3
 8009194:	d069      	beq.n	800926a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	429a      	cmp	r2, r3
 800919e:	d164      	bne.n	800926a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091a0:	4b34      	ldr	r3, [pc, #208]	; (8009274 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d10b      	bne.n	80091c2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	b672      	cpsid	i
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	b662      	cpsie	i
 80091be:	60bb      	str	r3, [r7, #8]
 80091c0:	e7fe      	b.n	80091c0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	69fa      	ldr	r2, [r7, #28]
 80091cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	db04      	blt.n	80091e0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	f1c3 0207 	rsb	r2, r3, #7
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	6959      	ldr	r1, [r3, #20]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a22      	ldr	r2, [pc, #136]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80091f0:	4413      	add	r3, r2
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d101      	bne.n	80091fa <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80091fa:	2300      	movs	r3, #0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d034      	beq.n	800926a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	3304      	adds	r3, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe f896 	bl	8007336 <uxListRemove>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d115      	bne.n	800923c <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	4918      	ldr	r1, [pc, #96]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <vTaskPriorityDisinheritAfterTimeout+0x100>
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	2201      	movs	r2, #1
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	43da      	mvns	r2, r3
 8009232:	4b12      	ldr	r3, [pc, #72]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4013      	ands	r3, r2
 8009238:	4a10      	ldr	r2, [pc, #64]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800923a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	2201      	movs	r2, #1
 8009242:	409a      	lsls	r2, r3
 8009244:	4b0d      	ldr	r3, [pc, #52]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4313      	orrs	r3, r2
 800924a:	4a0c      	ldr	r2, [pc, #48]	; (800927c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4a07      	ldr	r2, [pc, #28]	; (8009278 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800925c:	441a      	add	r2, r3
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	3304      	adds	r3, #4
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f7fe f809 	bl	800727c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800926a:	bf00      	nop
 800926c:	3720      	adds	r7, #32
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20000480 	.word	0x20000480
 8009278:	20000484 	.word	0x20000484
 800927c:	20000588 	.word	0x20000588

08009280 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009284:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009292:	3201      	adds	r2, #1
 8009294:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009298:	681b      	ldr	r3, [r3, #0]
	}
 800929a:	4618      	mov	r0, r3
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	20000480 	.word	0x20000480

080092a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092b2:	4b29      	ldr	r3, [pc, #164]	; (8009358 <prvAddCurrentTaskToDelayedList+0xb0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b8:	4b28      	ldr	r3, [pc, #160]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe f839 	bl	8007336 <uxListRemove>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80092ca:	4b24      	ldr	r3, [pc, #144]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	2201      	movs	r2, #1
 80092d2:	fa02 f303 	lsl.w	r3, r2, r3
 80092d6:	43da      	mvns	r2, r3
 80092d8:	4b21      	ldr	r3, [pc, #132]	; (8009360 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4013      	ands	r3, r2
 80092de:	4a20      	ldr	r2, [pc, #128]	; (8009360 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d10a      	bne.n	8009300 <prvAddCurrentTaskToDelayedList+0x58>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	481a      	ldr	r0, [pc, #104]	; (8009364 <prvAddCurrentTaskToDelayedList+0xbc>)
 80092fa:	f7fd ffbf 	bl	800727c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092fe:	e026      	b.n	800934e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009308:	4b14      	ldr	r3, [pc, #80]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	429a      	cmp	r2, r3
 8009316:	d209      	bcs.n	800932c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <prvAddCurrentTaskToDelayedList+0xc0>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fd ffcd 	bl	80072c4 <vListInsert>
}
 800932a:	e010      	b.n	800934e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800932c:	4b0f      	ldr	r3, [pc, #60]	; (800936c <prvAddCurrentTaskToDelayedList+0xc4>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fd ffc3 	bl	80072c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800933e:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	d202      	bcs.n	800934e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009348:	4a09      	ldr	r2, [pc, #36]	; (8009370 <prvAddCurrentTaskToDelayedList+0xc8>)
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6013      	str	r3, [r2, #0]
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000584 	.word	0x20000584
 800935c:	20000480 	.word	0x20000480
 8009360:	20000588 	.word	0x20000588
 8009364:	2000056c 	.word	0x2000056c
 8009368:	2000053c 	.word	0x2000053c
 800936c:	20000538 	.word	0x20000538
 8009370:	200005a0 	.word	0x200005a0

08009374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3b04      	subs	r3, #4
 8009384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800938c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3b04      	subs	r3, #4
 8009392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f023 0201 	bic.w	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3b04      	subs	r3, #4
 80093a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093a4:	4a0c      	ldr	r2, [pc, #48]	; (80093d8 <pxPortInitialiseStack+0x64>)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3b14      	subs	r3, #20
 80093ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3b04      	subs	r3, #4
 80093ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f06f 0202 	mvn.w	r2, #2
 80093c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3b20      	subs	r3, #32
 80093c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093ca:	68fb      	ldr	r3, [r7, #12]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	080093dd 	.word	0x080093dd

080093dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093e6:	4b13      	ldr	r3, [pc, #76]	; (8009434 <prvTaskExitError+0x58>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	d00b      	beq.n	8009408 <prvTaskExitError+0x2c>
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	b672      	cpsid	i
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	b662      	cpsie	i
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e7fe      	b.n	8009406 <prvTaskExitError+0x2a>
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	b672      	cpsid	i
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	b662      	cpsie	i
 800941c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800941e:	bf00      	nop
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0fc      	beq.n	8009420 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000024 	.word	0x20000024
	...

08009440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <pxCurrentTCBConst2>)
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	6808      	ldr	r0, [r1, #0]
 8009446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944a:	f380 8809 	msr	PSP, r0
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f04f 0000 	mov.w	r0, #0
 8009456:	f380 8811 	msr	BASEPRI, r0
 800945a:	4770      	bx	lr
 800945c:	f3af 8000 	nop.w

08009460 <pxCurrentTCBConst2>:
 8009460:	20000480 	.word	0x20000480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop

08009468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009468:	4808      	ldr	r0, [pc, #32]	; (800948c <prvPortStartFirstTask+0x24>)
 800946a:	6800      	ldr	r0, [r0, #0]
 800946c:	6800      	ldr	r0, [r0, #0]
 800946e:	f380 8808 	msr	MSP, r0
 8009472:	f04f 0000 	mov.w	r0, #0
 8009476:	f380 8814 	msr	CONTROL, r0
 800947a:	b662      	cpsie	i
 800947c:	b661      	cpsie	f
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	df00      	svc	0
 8009488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800948a:	bf00      	nop
 800948c:	e000ed08 	.word	0xe000ed08

08009490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009496:	4b36      	ldr	r3, [pc, #216]	; (8009570 <xPortStartScheduler+0xe0>)
 8009498:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	22ff      	movs	r2, #255	; 0xff
 80094a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <xPortStartScheduler+0xe4>)
 80094bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094be:	4b2e      	ldr	r3, [pc, #184]	; (8009578 <xPortStartScheduler+0xe8>)
 80094c0:	2207      	movs	r2, #7
 80094c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094c4:	e009      	b.n	80094da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80094c6:	4b2c      	ldr	r3, [pc, #176]	; (8009578 <xPortStartScheduler+0xe8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	4a2a      	ldr	r2, [pc, #168]	; (8009578 <xPortStartScheduler+0xe8>)
 80094ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b80      	cmp	r3, #128	; 0x80
 80094e4:	d0ef      	beq.n	80094c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094e6:	4b24      	ldr	r3, [pc, #144]	; (8009578 <xPortStartScheduler+0xe8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f1c3 0307 	rsb	r3, r3, #7
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d00b      	beq.n	800950a <xPortStartScheduler+0x7a>
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	b672      	cpsid	i
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	b662      	cpsie	i
 8009506:	60bb      	str	r3, [r7, #8]
 8009508:	e7fe      	b.n	8009508 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800950a:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <xPortStartScheduler+0xe8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	4a19      	ldr	r2, [pc, #100]	; (8009578 <xPortStartScheduler+0xe8>)
 8009512:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009514:	4b18      	ldr	r3, [pc, #96]	; (8009578 <xPortStartScheduler+0xe8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800951c:	4a16      	ldr	r2, [pc, #88]	; (8009578 <xPortStartScheduler+0xe8>)
 800951e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009528:	4b14      	ldr	r3, [pc, #80]	; (800957c <xPortStartScheduler+0xec>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a13      	ldr	r2, [pc, #76]	; (800957c <xPortStartScheduler+0xec>)
 800952e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009532:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009534:	4b11      	ldr	r3, [pc, #68]	; (800957c <xPortStartScheduler+0xec>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a10      	ldr	r2, [pc, #64]	; (800957c <xPortStartScheduler+0xec>)
 800953a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800953e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009540:	f000 f8d4 	bl	80096ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009544:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <xPortStartScheduler+0xf0>)
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800954a:	f000 f8f3 	bl	8009734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800954e:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <xPortStartScheduler+0xf4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a0c      	ldr	r2, [pc, #48]	; (8009584 <xPortStartScheduler+0xf4>)
 8009554:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009558:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800955a:	f7ff ff85 	bl	8009468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800955e:	f7ff fa7b 	bl	8008a58 <vTaskSwitchContext>
	prvTaskExitError();
 8009562:	f7ff ff3b 	bl	80093dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	e000e400 	.word	0xe000e400
 8009574:	200005ac 	.word	0x200005ac
 8009578:	200005b0 	.word	0x200005b0
 800957c:	e000ed20 	.word	0xe000ed20
 8009580:	20000024 	.word	0x20000024
 8009584:	e000ef34 	.word	0xe000ef34

08009588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095a4:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <vPortEnterCritical+0x5c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3301      	adds	r3, #1
 80095aa:	4a0e      	ldr	r2, [pc, #56]	; (80095e4 <vPortEnterCritical+0x5c>)
 80095ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <vPortEnterCritical+0x5c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d110      	bne.n	80095d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <vPortEnterCritical+0x60>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <vPortEnterCritical+0x50>
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	e7fe      	b.n	80095d6 <vPortEnterCritical+0x4e>
	}
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	20000024 	.word	0x20000024
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095f2:	4b12      	ldr	r3, [pc, #72]	; (800963c <vPortExitCritical+0x50>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10b      	bne.n	8009612 <vPortExitCritical+0x26>
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	b672      	cpsid	i
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	b662      	cpsie	i
 800960e:	607b      	str	r3, [r7, #4]
 8009610:	e7fe      	b.n	8009610 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8009612:	4b0a      	ldr	r3, [pc, #40]	; (800963c <vPortExitCritical+0x50>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3b01      	subs	r3, #1
 8009618:	4a08      	ldr	r2, [pc, #32]	; (800963c <vPortExitCritical+0x50>)
 800961a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800961c:	4b07      	ldr	r3, [pc, #28]	; (800963c <vPortExitCritical+0x50>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d104      	bne.n	800962e <vPortExitCritical+0x42>
 8009624:	2300      	movs	r3, #0
 8009626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000024 	.word	0x20000024

08009640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009640:	f3ef 8009 	mrs	r0, PSP
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <pxCurrentTCBConst>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	f01e 0f10 	tst.w	lr, #16
 8009650:	bf08      	it	eq
 8009652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965a:	6010      	str	r0, [r2, #0]
 800965c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009664:	b672      	cpsid	i
 8009666:	f380 8811 	msr	BASEPRI, r0
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	b662      	cpsie	i
 8009674:	f7ff f9f0 	bl	8008a58 <vTaskSwitchContext>
 8009678:	f04f 0000 	mov.w	r0, #0
 800967c:	f380 8811 	msr	BASEPRI, r0
 8009680:	bc09      	pop	{r0, r3}
 8009682:	6819      	ldr	r1, [r3, #0]
 8009684:	6808      	ldr	r0, [r1, #0]
 8009686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968a:	f01e 0f10 	tst.w	lr, #16
 800968e:	bf08      	it	eq
 8009690:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009694:	f380 8809 	msr	PSP, r0
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop

080096a0 <pxCurrentTCBConst>:
 80096a0:	20000480 	.word	0x20000480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop

080096a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	b672      	cpsid	i
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	b662      	cpsie	i
 80096c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096c4:	f7ff f90a 	bl	80088dc <xTaskIncrementTick>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <SysTick_Handler+0x40>)
 80096d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	2300      	movs	r3, #0
 80096d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096f0:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <vPortSetupTimerInterrupt+0x34>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <vPortSetupTimerInterrupt+0x38>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <vPortSetupTimerInterrupt+0x3c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <vPortSetupTimerInterrupt+0x40>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	099b      	lsrs	r3, r3, #6
 8009708:	4a09      	ldr	r2, [pc, #36]	; (8009730 <vPortSetupTimerInterrupt+0x44>)
 800970a:	3b01      	subs	r3, #1
 800970c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800970e:	4b04      	ldr	r3, [pc, #16]	; (8009720 <vPortSetupTimerInterrupt+0x34>)
 8009710:	2207      	movs	r2, #7
 8009712:	601a      	str	r2, [r3, #0]
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	e000e010 	.word	0xe000e010
 8009724:	e000e018 	.word	0xe000e018
 8009728:	20000018 	.word	0x20000018
 800972c:	10624dd3 	.word	0x10624dd3
 8009730:	e000e014 	.word	0xe000e014

08009734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009744 <vPortEnableVFP+0x10>
 8009738:	6801      	ldr	r1, [r0, #0]
 800973a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800973e:	6001      	str	r1, [r0, #0]
 8009740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009742:	bf00      	nop
 8009744:	e000ed88 	.word	0xe000ed88

08009748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800974e:	f3ef 8305 	mrs	r3, IPSR
 8009752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b0f      	cmp	r3, #15
 8009758:	d915      	bls.n	8009786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800975a:	4a18      	ldr	r2, [pc, #96]	; (80097bc <vPortValidateInterruptPriority+0x74>)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4413      	add	r3, r2
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009764:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <vPortValidateInterruptPriority+0x78>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	7afa      	ldrb	r2, [r7, #11]
 800976a:	429a      	cmp	r2, r3
 800976c:	d20b      	bcs.n	8009786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	607b      	str	r3, [r7, #4]
 8009784:	e7fe      	b.n	8009784 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009786:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <vPortValidateInterruptPriority+0x7c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800978e:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <vPortValidateInterruptPriority+0x80>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d90b      	bls.n	80097ae <vPortValidateInterruptPriority+0x66>
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	b672      	cpsid	i
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	b662      	cpsie	i
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	e7fe      	b.n	80097ac <vPortValidateInterruptPriority+0x64>
	}
 80097ae:	bf00      	nop
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	e000e3f0 	.word	0xe000e3f0
 80097c0:	200005ac 	.word	0x200005ac
 80097c4:	e000ed0c 	.word	0xe000ed0c
 80097c8:	200005b0 	.word	0x200005b0

080097cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08a      	sub	sp, #40	; 0x28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097d8:	f7fe ffb2 	bl	8008740 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097dc:	4b5a      	ldr	r3, [pc, #360]	; (8009948 <pvPortMalloc+0x17c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097e4:	f000 f916 	bl	8009a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097e8:	4b58      	ldr	r3, [pc, #352]	; (800994c <pvPortMalloc+0x180>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4013      	ands	r3, r2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f040 8090 	bne.w	8009916 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01e      	beq.n	800983a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80097fc:	2208      	movs	r2, #8
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4413      	add	r3, r2
 8009802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d015      	beq.n	800983a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f023 0307 	bic.w	r3, r3, #7
 8009814:	3308      	adds	r3, #8
 8009816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <pvPortMalloc+0x6e>
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	b672      	cpsid	i
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	b662      	cpsie	i
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e7fe      	b.n	8009838 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d06a      	beq.n	8009916 <pvPortMalloc+0x14a>
 8009840:	4b43      	ldr	r3, [pc, #268]	; (8009950 <pvPortMalloc+0x184>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d865      	bhi.n	8009916 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800984a:	4b42      	ldr	r3, [pc, #264]	; (8009954 <pvPortMalloc+0x188>)
 800984c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800984e:	4b41      	ldr	r3, [pc, #260]	; (8009954 <pvPortMalloc+0x188>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009854:	e004      	b.n	8009860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d903      	bls.n	8009872 <pvPortMalloc+0xa6>
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1f1      	bne.n	8009856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009872:	4b35      	ldr	r3, [pc, #212]	; (8009948 <pvPortMalloc+0x17c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009878:	429a      	cmp	r2, r3
 800987a:	d04c      	beq.n	8009916 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2208      	movs	r2, #8
 8009882:	4413      	add	r3, r2
 8009884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	1ad2      	subs	r2, r2, r3
 8009896:	2308      	movs	r3, #8
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	429a      	cmp	r2, r3
 800989c:	d920      	bls.n	80098e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00b      	beq.n	80098c8 <pvPortMalloc+0xfc>
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	b672      	cpsid	i
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	b662      	cpsie	i
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	e7fe      	b.n	80098c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098da:	69b8      	ldr	r0, [r7, #24]
 80098dc:	f000 f8fc 	bl	8009ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098e0:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <pvPortMalloc+0x184>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	4a19      	ldr	r2, [pc, #100]	; (8009950 <pvPortMalloc+0x184>)
 80098ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098ee:	4b18      	ldr	r3, [pc, #96]	; (8009950 <pvPortMalloc+0x184>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	4b19      	ldr	r3, [pc, #100]	; (8009958 <pvPortMalloc+0x18c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d203      	bcs.n	8009902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <pvPortMalloc+0x184>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a16      	ldr	r2, [pc, #88]	; (8009958 <pvPortMalloc+0x18c>)
 8009900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	4b11      	ldr	r3, [pc, #68]	; (800994c <pvPortMalloc+0x180>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	431a      	orrs	r2, r3
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009916:	f7fe ff21 	bl	800875c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <pvPortMalloc+0x170>
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	b672      	cpsid	i
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	b662      	cpsie	i
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e7fe      	b.n	800993a <pvPortMalloc+0x16e>
	return pvReturn;
 800993c:	69fb      	ldr	r3, [r7, #28]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3728      	adds	r7, #40	; 0x28
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200041bc 	.word	0x200041bc
 800994c:	200041c8 	.word	0x200041c8
 8009950:	200041c0 	.word	0x200041c0
 8009954:	200041b4 	.word	0x200041b4
 8009958:	200041c4 	.word	0x200041c4

0800995c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04a      	beq.n	8009a04 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800996e:	2308      	movs	r3, #8
 8009970:	425b      	negs	r3, r3
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4413      	add	r3, r2
 8009976:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <vPortFree+0xb0>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4013      	ands	r3, r2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10b      	bne.n	80099a2 <vPortFree+0x46>
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	b672      	cpsid	i
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	b662      	cpsie	i
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e7fe      	b.n	80099a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00b      	beq.n	80099c2 <vPortFree+0x66>
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	b672      	cpsid	i
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	b662      	cpsie	i
 80099be:	60bb      	str	r3, [r7, #8]
 80099c0:	e7fe      	b.n	80099c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <vPortFree+0xb0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4013      	ands	r3, r2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d019      	beq.n	8009a04 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d115      	bne.n	8009a04 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <vPortFree+0xb0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	43db      	mvns	r3, r3
 80099e2:	401a      	ands	r2, r3
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099e8:	f7fe feaa 	bl	8008740 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <vPortFree+0xb4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4413      	add	r3, r2
 80099f6:	4a06      	ldr	r2, [pc, #24]	; (8009a10 <vPortFree+0xb4>)
 80099f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099fa:	6938      	ldr	r0, [r7, #16]
 80099fc:	f000 f86c 	bl	8009ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a00:	f7fe feac 	bl	800875c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a04:	bf00      	nop
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	200041c8 	.word	0x200041c8
 8009a10:	200041c0 	.word	0x200041c0

08009a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a20:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <prvHeapInit+0xac>)
 8009a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00c      	beq.n	8009a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	4a1f      	ldr	r2, [pc, #124]	; (8009ac0 <prvHeapInit+0xac>)
 8009a44:	4413      	add	r3, r2
 8009a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <prvHeapInit+0xb0>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a52:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <prvHeapInit+0xb0>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a60:	2208      	movs	r2, #8
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <prvHeapInit+0xb8>)
 8009aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <prvHeapInit+0xbc>)
 8009aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <prvHeapInit+0xc0>)
 8009aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ab2:	601a      	str	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	200005b4 	.word	0x200005b4
 8009ac4:	200041b4 	.word	0x200041b4
 8009ac8:	200041bc 	.word	0x200041bc
 8009acc:	200041c4 	.word	0x200041c4
 8009ad0:	200041c0 	.word	0x200041c0
 8009ad4:	200041c8 	.word	0x200041c8

08009ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ae0:	4b28      	ldr	r3, [pc, #160]	; (8009b84 <prvInsertBlockIntoFreeList+0xac>)
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e002      	b.n	8009aec <prvInsertBlockIntoFreeList+0x14>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d8f7      	bhi.n	8009ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	4413      	add	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d108      	bne.n	8009b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	441a      	add	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d118      	bne.n	8009b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <prvInsertBlockIntoFreeList+0xb0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d00d      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	441a      	add	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e008      	b.n	8009b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b56:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <prvInsertBlockIntoFreeList+0xb0>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e003      	b.n	8009b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d002      	beq.n	8009b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	200041b4 	.word	0x200041b4
 8009b88:	200041bc 	.word	0x200041bc

08009b8c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f002 f93f 	bl	800be24 <tcpip_send_msg_wait_sem>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <netconn_apimsg+0x2e>
    return apimsg->err;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009bb8:	e001      	b.n	8009bbe <netconn_apimsg+0x32>
  }
  return err;
 8009bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08a      	sub	sp, #40	; 0x28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	603a      	str	r2, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 ff83 	bl	800aae8 <netconn_alloc>
 8009be2:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d054      	beq.n	8009c94 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009bea:	79bb      	ldrb	r3, [r7, #6]
 8009bec:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009bf2:	f107 030c 	add.w	r3, r7, #12
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4829      	ldr	r0, [pc, #164]	; (8009ca0 <netconn_new_with_proto_and_callback+0xd8>)
 8009bfa:	f7ff ffc7 	bl	8009b8c <netconn_apimsg>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8009c04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d043      	beq.n	8009c94 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <netconn_new_with_proto_and_callback+0x58>
 8009c14:	4b23      	ldr	r3, [pc, #140]	; (8009ca4 <netconn_new_with_proto_and_callback+0xdc>)
 8009c16:	2289      	movs	r2, #137	; 0x89
 8009c18:	4923      	ldr	r1, [pc, #140]	; (8009ca8 <netconn_new_with_proto_and_callback+0xe0>)
 8009c1a:	4824      	ldr	r0, [pc, #144]	; (8009cac <netconn_new_with_proto_and_callback+0xe4>)
 8009c1c:	f00c f824 	bl	8015c68 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	3310      	adds	r3, #16
 8009c24:	4618      	mov	r0, r3
 8009c26:	f00b fe9b 	bl	8015960 <sys_mbox_valid>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d105      	bne.n	8009c3c <netconn_new_with_proto_and_callback+0x74>
 8009c30:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <netconn_new_with_proto_and_callback+0xdc>)
 8009c32:	228a      	movs	r2, #138	; 0x8a
 8009c34:	491e      	ldr	r1, [pc, #120]	; (8009cb0 <netconn_new_with_proto_and_callback+0xe8>)
 8009c36:	481d      	ldr	r0, [pc, #116]	; (8009cac <netconn_new_with_proto_and_callback+0xe4>)
 8009c38:	f00c f816 	bl	8015c68 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	3314      	adds	r3, #20
 8009c40:	4618      	mov	r0, r3
 8009c42:	f00b fe8d 	bl	8015960 <sys_mbox_valid>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <netconn_new_with_proto_and_callback+0x90>
 8009c4c:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <netconn_new_with_proto_and_callback+0xdc>)
 8009c4e:	228c      	movs	r2, #140	; 0x8c
 8009c50:	4918      	ldr	r1, [pc, #96]	; (8009cb4 <netconn_new_with_proto_and_callback+0xec>)
 8009c52:	4816      	ldr	r0, [pc, #88]	; (8009cac <netconn_new_with_proto_and_callback+0xe4>)
 8009c54:	f00c f808 	bl	8015c68 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f00b ff10 	bl	8015a82 <sys_sem_valid>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d105      	bne.n	8009c74 <netconn_new_with_proto_and_callback+0xac>
 8009c68:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <netconn_new_with_proto_and_callback+0xdc>)
 8009c6a:	228f      	movs	r2, #143	; 0x8f
 8009c6c:	4912      	ldr	r1, [pc, #72]	; (8009cb8 <netconn_new_with_proto_and_callback+0xf0>)
 8009c6e:	480f      	ldr	r0, [pc, #60]	; (8009cac <netconn_new_with_proto_and_callback+0xe4>)
 8009c70:	f00b fffa 	bl	8015c68 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	330c      	adds	r3, #12
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f00b fef5 	bl	8015a68 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	3310      	adds	r3, #16
 8009c82:	4618      	mov	r0, r3
 8009c84:	f00b fdd0 	bl	8015828 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c8a:	2007      	movs	r0, #7
 8009c8c:	f002 fdb2 	bl	800c7f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	e000      	b.n	8009c96 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3728      	adds	r7, #40	; 0x28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800aa91 	.word	0x0800aa91
 8009ca4:	08017258 	.word	0x08017258
 8009ca8:	0801728c 	.word	0x0801728c
 8009cac:	080172b0 	.word	0x080172b0
 8009cb0:	080172d8 	.word	0x080172d8
 8009cb4:	080172f0 	.word	0x080172f0
 8009cb8:	08017314 	.word	0x08017314

08009cbc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <netconn_delete+0x12>
    return ERR_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e016      	b.n	8009cfc <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009cd2:	2329      	movs	r3, #41	; 0x29
 8009cd4:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009cd6:	f107 0308 	add.w	r3, r7, #8
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4809      	ldr	r0, [pc, #36]	; (8009d04 <netconn_delete+0x48>)
 8009cde:	f7ff ff55 	bl	8009b8c <netconn_apimsg>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <netconn_delete+0x38>
    return err;
 8009cee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cf2:	e003      	b.n	8009cfc <netconn_delete+0x40>
  }

  netconn_free(conn);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 ff67 	bl	800abc8 <netconn_free>

  return ERR_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3720      	adds	r7, #32
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	0800b04d 	.word	0x0800b04d

08009d08 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d108      	bne.n	8009d2e <netconn_bind+0x26>
 8009d1c:	4b11      	ldr	r3, [pc, #68]	; (8009d64 <netconn_bind+0x5c>)
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	4911      	ldr	r1, [pc, #68]	; (8009d68 <netconn_bind+0x60>)
 8009d22:	4812      	ldr	r0, [pc, #72]	; (8009d6c <netconn_bind+0x64>)
 8009d24:	f00b ffa0 	bl	8015c68 <iprintf>
 8009d28:	f06f 030f 	mvn.w	r3, #15
 8009d2c:	e015      	b.n	8009d5a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8009d34:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <netconn_bind+0x68>)
 8009d36:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009d44:	f107 0310 	add.w	r3, r7, #16
 8009d48:	4619      	mov	r1, r3
 8009d4a:	480a      	ldr	r0, [pc, #40]	; (8009d74 <netconn_bind+0x6c>)
 8009d4c:	f7ff ff1e 	bl	8009b8c <netconn_apimsg>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8009d56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3728      	adds	r7, #40	; 0x28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	08017258 	.word	0x08017258
 8009d68:	08017390 	.word	0x08017390
 8009d6c:	080172b0 	.word	0x080172b0
 8009d70:	0801d5dc 	.word	0x0801d5dc
 8009d74:	0800b251 	.word	0x0800b251

08009d78 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d109      	bne.n	8009d9e <netconn_listen_with_backlog+0x26>
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <netconn_listen_with_backlog+0x48>)
 8009d8c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009d90:	490c      	ldr	r1, [pc, #48]	; (8009dc4 <netconn_listen_with_backlog+0x4c>)
 8009d92:	480d      	ldr	r0, [pc, #52]	; (8009dc8 <netconn_listen_with_backlog+0x50>)
 8009d94:	f00b ff68 	bl	8015c68 <iprintf>
 8009d98:	f06f 030f 	mvn.w	r3, #15
 8009d9c:	e00b      	b.n	8009db6 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009da2:	f107 0308 	add.w	r3, r7, #8
 8009da6:	4619      	mov	r1, r3
 8009da8:	4808      	ldr	r0, [pc, #32]	; (8009dcc <netconn_listen_with_backlog+0x54>)
 8009daa:	f7ff feef 	bl	8009b8c <netconn_apimsg>
 8009dae:	4603      	mov	r3, r0
 8009db0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8009db2:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08017258 	.word	0x08017258
 8009dc4:	080173f0 	.word	0x080173f0
 8009dc8:	080172b0 	.word	0x080172b0
 8009dcc:	0800b311 	.word	0x0800b311

08009dd0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <netconn_accept+0x24>
 8009de0:	4b34      	ldr	r3, [pc, #208]	; (8009eb4 <netconn_accept+0xe4>)
 8009de2:	f240 128d 	movw	r2, #397	; 0x18d
 8009de6:	4934      	ldr	r1, [pc, #208]	; (8009eb8 <netconn_accept+0xe8>)
 8009de8:	4834      	ldr	r0, [pc, #208]	; (8009ebc <netconn_accept+0xec>)
 8009dea:	f00b ff3d 	bl	8015c68 <iprintf>
 8009dee:	f06f 030f 	mvn.w	r3, #15
 8009df2:	e05b      	b.n	8009eac <netconn_accept+0xdc>
  *new_conn = NULL;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2200      	movs	r2, #0
 8009df8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d109      	bne.n	8009e14 <netconn_accept+0x44>
 8009e00:	4b2c      	ldr	r3, [pc, #176]	; (8009eb4 <netconn_accept+0xe4>)
 8009e02:	f240 128f 	movw	r2, #399	; 0x18f
 8009e06:	492e      	ldr	r1, [pc, #184]	; (8009ec0 <netconn_accept+0xf0>)
 8009e08:	482c      	ldr	r0, [pc, #176]	; (8009ebc <netconn_accept+0xec>)
 8009e0a:	f00b ff2d 	bl	8015c68 <iprintf>
 8009e0e:	f06f 030f 	mvn.w	r3, #15
 8009e12:	e04b      	b.n	8009eac <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009e1a:	f113 0f0c 	cmn.w	r3, #12
 8009e1e:	da03      	bge.n	8009e28 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009e26:	e041      	b.n	8009eac <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3314      	adds	r3, #20
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f00b fd97 	bl	8015960 <sys_mbox_valid>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <netconn_accept+0x6e>
    return ERR_CLSD;
 8009e38:	f06f 030e 	mvn.w	r3, #14
 8009e3c:	e036      	b.n	8009eac <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3314      	adds	r3, #20
 8009e42:	f107 010c 	add.w	r1, r7, #12
 8009e46:	2200      	movs	r2, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f00b fd2e 	bl	80158aa <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <netconn_accept+0x96>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2101      	movs	r1, #1
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4a16      	ldr	r2, [pc, #88]	; (8009ec4 <netconn_accept+0xf4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d102      	bne.n	8009e74 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8009e6e:	f06f 030c 	mvn.w	r3, #12
 8009e72:	e01b      	b.n	8009eac <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d114      	bne.n	8009ea4 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00e      	beq.n	8009e9e <netconn_accept+0xce>
 8009e80:	f00b fe8a 	bl	8015b98 <sys_arch_protect>
 8009e84:	6138      	str	r0, [r7, #16]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009e8c:	f113 0f0c 	cmn.w	r3, #12
 8009e90:	db02      	blt.n	8009e98 <netconn_accept+0xc8>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	22f1      	movs	r2, #241	; 0xf1
 8009e96:	721a      	strb	r2, [r3, #8]
 8009e98:	6938      	ldr	r0, [r7, #16]
 8009e9a:	f00b fe8b 	bl	8015bb4 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8009e9e:	f06f 030e 	mvn.w	r3, #14
 8009ea2:	e003      	b.n	8009eac <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009eaa:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	08017258 	.word	0x08017258
 8009eb8:	08017410 	.word	0x08017410
 8009ebc:	080172b0 	.word	0x080172b0
 8009ec0:	08017430 	.word	0x08017430
 8009ec4:	200079e8 	.word	0x200079e8

08009ec8 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d109      	bne.n	8009ef0 <netconn_recv_data+0x28>
 8009edc:	4b5c      	ldr	r3, [pc, #368]	; (800a050 <netconn_recv_data+0x188>)
 8009ede:	f240 12e7 	movw	r2, #487	; 0x1e7
 8009ee2:	495c      	ldr	r1, [pc, #368]	; (800a054 <netconn_recv_data+0x18c>)
 8009ee4:	485c      	ldr	r0, [pc, #368]	; (800a058 <netconn_recv_data+0x190>)
 8009ee6:	f00b febf 	bl	8015c68 <iprintf>
 8009eea:	f06f 030f 	mvn.w	r3, #15
 8009eee:	e0aa      	b.n	800a046 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <netconn_recv_data+0x48>
 8009efc:	4b54      	ldr	r3, [pc, #336]	; (800a050 <netconn_recv_data+0x188>)
 8009efe:	f240 12e9 	movw	r2, #489	; 0x1e9
 8009f02:	4956      	ldr	r1, [pc, #344]	; (800a05c <netconn_recv_data+0x194>)
 8009f04:	4854      	ldr	r0, [pc, #336]	; (800a058 <netconn_recv_data+0x190>)
 8009f06:	f00b feaf 	bl	8015c68 <iprintf>
 8009f0a:	f06f 030f 	mvn.w	r3, #15
 8009f0e:	e09a      	b.n	800a046 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f18:	2b10      	cmp	r3, #16
 8009f1a:	d115      	bne.n	8009f48 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3310      	adds	r3, #16
 8009f20:	4618      	mov	r0, r3
 8009f22:	f00b fd1d 	bl	8015960 <sys_mbox_valid>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10d      	bne.n	8009f48 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3314      	adds	r3, #20
 8009f30:	4618      	mov	r0, r3
 8009f32:	f00b fd15 	bl	8015960 <sys_mbox_valid>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <netconn_recv_data+0x7a>
 8009f3c:	f06f 030a 	mvn.w	r3, #10
 8009f40:	e081      	b.n	800a046 <netconn_recv_data+0x17e>
 8009f42:	f06f 030e 	mvn.w	r3, #14
 8009f46:	e07e      	b.n	800a046 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3310      	adds	r3, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f00b fd07 	bl	8015960 <sys_mbox_valid>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d109      	bne.n	8009f6c <netconn_recv_data+0xa4>
 8009f58:	4b3d      	ldr	r3, [pc, #244]	; (800a050 <netconn_recv_data+0x188>)
 8009f5a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8009f5e:	4940      	ldr	r1, [pc, #256]	; (800a060 <netconn_recv_data+0x198>)
 8009f60:	483d      	ldr	r0, [pc, #244]	; (800a058 <netconn_recv_data+0x190>)
 8009f62:	f00b fe81 	bl	8015c68 <iprintf>
 8009f66:	f06f 030a 	mvn.w	r3, #10
 8009f6a:	e06c      	b.n	800a046 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009f72:	f113 0f0c 	cmn.w	r3, #12
 8009f76:	da03      	bge.n	8009f80 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009f7e:	e062      	b.n	800a046 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3310      	adds	r3, #16
 8009f84:	f107 0120 	add.w	r1, r7, #32
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f00b fc8d 	bl	80158aa <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f98:	2b10      	cmp	r3, #16
 8009f9a:	d138      	bne.n	800a00e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	891b      	ldrh	r3, [r3, #8]
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	e001      	b.n	8009fb2 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8009fb2:	f107 030c 	add.w	r3, r7, #12
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	482a      	ldr	r0, [pc, #168]	; (800a064 <netconn_recv_data+0x19c>)
 8009fba:	f7ff fde7 	bl	8009b8c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d120      	bne.n	800a006 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <netconn_recv_data+0x110>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10b      	bne.n	8009ff8 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <netconn_recv_data+0x12a>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009ff0:	e029      	b.n	800a046 <netconn_recv_data+0x17e>
 8009ff2:	f06f 030d 	mvn.w	r3, #13
 8009ff6:	e026      	b.n	800a046 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f926 	bl	800a24c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a000:	f06f 030e 	mvn.w	r3, #14
 800a004:	e01f      	b.n	800a046 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	891b      	ldrh	r3, [r3, #8]
 800a00a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a00c:	e00d      	b.n	800a02a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <netconn_recv_data+0x15a>
 800a014:	4b0e      	ldr	r3, [pc, #56]	; (800a050 <netconn_recv_data+0x188>)
 800a016:	f240 223e 	movw	r2, #574	; 0x23e
 800a01a:	4913      	ldr	r1, [pc, #76]	; (800a068 <netconn_recv_data+0x1a0>)
 800a01c:	480e      	ldr	r0, [pc, #56]	; (800a058 <netconn_recv_data+0x190>)
 800a01e:	f00b fe23 	bl	8015c68 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	891b      	ldrh	r3, [r3, #8]
 800a028:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <netconn_recv_data+0x176>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a038:	2101      	movs	r1, #1
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a03e:	6a3a      	ldr	r2, [r7, #32]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3728      	adds	r7, #40	; 0x28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	08017258 	.word	0x08017258
 800a054:	08017450 	.word	0x08017450
 800a058:	080172b0 	.word	0x080172b0
 800a05c:	08017470 	.word	0x08017470
 800a060:	0801748c 	.word	0x0801748c
 800a064:	0800b495 	.word	0x0800b495
 800a068:	080174ac 	.word	0x080174ac

0800a06c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d109      	bne.n	800a094 <netconn_recv+0x28>
 800a080:	4b31      	ldr	r3, [pc, #196]	; (800a148 <netconn_recv+0xdc>)
 800a082:	f44f 721d 	mov.w	r2, #628	; 0x274
 800a086:	4931      	ldr	r1, [pc, #196]	; (800a14c <netconn_recv+0xe0>)
 800a088:	4831      	ldr	r0, [pc, #196]	; (800a150 <netconn_recv+0xe4>)
 800a08a:	f00b fded 	bl	8015c68 <iprintf>
 800a08e:	f06f 030f 	mvn.w	r3, #15
 800a092:	e054      	b.n	800a13e <netconn_recv+0xd2>
  *new_buf = NULL;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d109      	bne.n	800a0b4 <netconn_recv+0x48>
 800a0a0:	4b29      	ldr	r3, [pc, #164]	; (800a148 <netconn_recv+0xdc>)
 800a0a2:	f240 2276 	movw	r2, #630	; 0x276
 800a0a6:	492b      	ldr	r1, [pc, #172]	; (800a154 <netconn_recv+0xe8>)
 800a0a8:	4829      	ldr	r0, [pc, #164]	; (800a150 <netconn_recv+0xe4>)
 800a0aa:	f00b fddd 	bl	8015c68 <iprintf>
 800a0ae:	f06f 030f 	mvn.w	r3, #15
 800a0b2:	e044      	b.n	800a13e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0bc:	2b10      	cmp	r3, #16
 800a0be:	d139      	bne.n	800a134 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a0c4:	2006      	movs	r0, #6
 800a0c6:	f002 fb43 	bl	800c750 <memp_malloc>
 800a0ca:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <netconn_recv+0x6c>
      return ERR_MEM;
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d6:	e032      	b.n	800a13e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff fef2 	bl	8009ec8 <netconn_recv_data>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a0e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800a0f0:	6979      	ldr	r1, [r7, #20]
 800a0f2:	2006      	movs	r0, #6
 800a0f4:	f002 fb7e 	bl	800c7f4 <memp_free>
      return err;
 800a0f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0fc:	e01f      	b.n	800a13e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <netconn_recv+0xa6>
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <netconn_recv+0xdc>)
 800a106:	f240 228a 	movw	r2, #650	; 0x28a
 800a10a:	4913      	ldr	r1, [pc, #76]	; (800a158 <netconn_recv+0xec>)
 800a10c:	4810      	ldr	r0, [pc, #64]	; (800a150 <netconn_recv+0xe4>)
 800a10e:	f00b fdab 	bl	8015c68 <iprintf>

    buf->p = p;
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2200      	movs	r2, #0
 800a122:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2200      	movs	r2, #0
 800a128:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	e004      	b.n	800a13e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff fec6 	bl	8009ec8 <netconn_recv_data>
 800a13c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	08017258 	.word	0x08017258
 800a14c:	08017450 	.word	0x08017450
 800a150:	080172b0 	.word	0x080172b0
 800a154:	08017470 	.word	0x08017470
 800a158:	080174b8 	.word	0x080174b8

0800a15c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <netconn_write_partly+0x28>
 800a170:	4b31      	ldr	r3, [pc, #196]	; (800a238 <netconn_write_partly+0xdc>)
 800a172:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a176:	4931      	ldr	r1, [pc, #196]	; (800a23c <netconn_write_partly+0xe0>)
 800a178:	4831      	ldr	r0, [pc, #196]	; (800a240 <netconn_write_partly+0xe4>)
 800a17a:	f00b fd75 	bl	8015c68 <iprintf>
 800a17e:	f06f 030f 	mvn.w	r3, #15
 800a182:	e054      	b.n	800a22e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a18c:	2b10      	cmp	r3, #16
 800a18e:	d009      	beq.n	800a1a4 <netconn_write_partly+0x48>
 800a190:	4b29      	ldr	r3, [pc, #164]	; (800a238 <netconn_write_partly+0xdc>)
 800a192:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a196:	492b      	ldr	r1, [pc, #172]	; (800a244 <netconn_write_partly+0xe8>)
 800a198:	4829      	ldr	r0, [pc, #164]	; (800a240 <netconn_write_partly+0xe4>)
 800a19a:	f00b fd65 	bl	8015c68 <iprintf>
 800a19e:	f06f 0305 	mvn.w	r3, #5
 800a1a2:	e044      	b.n	800a22e <netconn_write_partly+0xd2>
  if (size == 0) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <netconn_write_partly+0x52>
    return ERR_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e03f      	b.n	800a22e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	7f1b      	ldrb	r3, [r3, #28]
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d104      	bne.n	800a1c4 <netconn_write_partly+0x68>
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <netconn_write_partly+0x6c>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e000      	b.n	800a1ca <netconn_write_partly+0x6e>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <netconn_write_partly+0x86>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d102      	bne.n	800a1e2 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a1dc:	f06f 0305 	mvn.w	r3, #5
 800a1e0:	e025      	b.n	800a22e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a1f4:	f107 0310 	add.w	r3, r7, #16
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4813      	ldr	r0, [pc, #76]	; (800a248 <netconn_write_partly+0xec>)
 800a1fc:	f7ff fcc6 	bl	8009b8c <netconn_apimsg>
 800a200:	4603      	mov	r3, r0
 800a202:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800a206:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10d      	bne.n	800a22a <netconn_write_partly+0xce>
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00a      	beq.n	800a22a <netconn_write_partly+0xce>
    if (dontblock) {
 800a214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800a21c:	69fa      	ldr	r2, [r7, #28]
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a22a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3728      	adds	r7, #40	; 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	08017258 	.word	0x08017258
 800a23c:	080174e0 	.word	0x080174e0
 800a240:	080172b0 	.word	0x080172b0
 800a244:	080174fc 	.word	0x080174fc
 800a248:	0800b875 	.word	0x0800b875

0800a24c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d109      	bne.n	800a272 <netconn_close_shutdown+0x26>
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <netconn_close_shutdown+0x50>)
 800a260:	f44f 724a 	mov.w	r2, #808	; 0x328
 800a264:	490e      	ldr	r1, [pc, #56]	; (800a2a0 <netconn_close_shutdown+0x54>)
 800a266:	480f      	ldr	r0, [pc, #60]	; (800a2a4 <netconn_close_shutdown+0x58>)
 800a268:	f00b fcfe 	bl	8015c68 <iprintf>
 800a26c:	f06f 030f 	mvn.w	r3, #15
 800a270:	e00f      	b.n	800a292 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a27a:	2329      	movs	r3, #41	; 0x29
 800a27c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	4619      	mov	r1, r3
 800a284:	4808      	ldr	r0, [pc, #32]	; (800a2a8 <netconn_close_shutdown+0x5c>)
 800a286:	f7ff fc81 	bl	8009b8c <netconn_apimsg>
 800a28a:	4603      	mov	r3, r0
 800a28c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800a28e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	08017258 	.word	0x08017258
 800a2a0:	08017520 	.word	0x08017520
 800a2a4:	080172b0 	.word	0x080172b0
 800a2a8:	0800b9d5 	.word	0x0800b9d5

0800a2ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a2b4:	2103      	movs	r1, #3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff ffc8 	bl	800a24c <netconn_close_shutdown>
 800a2bc:	4603      	mov	r3, r0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d105      	bne.n	800a2e8 <recv_udp+0x20>
 800a2dc:	4b34      	ldr	r3, [pc, #208]	; (800a3b0 <recv_udp+0xe8>)
 800a2de:	22b1      	movs	r2, #177	; 0xb1
 800a2e0:	4934      	ldr	r1, [pc, #208]	; (800a3b4 <recv_udp+0xec>)
 800a2e2:	4835      	ldr	r0, [pc, #212]	; (800a3b8 <recv_udp+0xf0>)
 800a2e4:	f00b fcc0 	bl	8015c68 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d105      	bne.n	800a2fa <recv_udp+0x32>
 800a2ee:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <recv_udp+0xe8>)
 800a2f0:	22b2      	movs	r2, #178	; 0xb2
 800a2f2:	4932      	ldr	r1, [pc, #200]	; (800a3bc <recv_udp+0xf4>)
 800a2f4:	4830      	ldr	r0, [pc, #192]	; (800a3b8 <recv_udp+0xf0>)
 800a2f6:	f00b fcb7 	bl	8015c68 <iprintf>
  conn = (struct netconn *)arg;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d103      	bne.n	800a30c <recv_udp+0x44>
    pbuf_free(p);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 ffcf 	bl	800d2a8 <pbuf_free>
    return;
 800a30a:	e04d      	b.n	800a3a8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	d005      	beq.n	800a322 <recv_udp+0x5a>
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <recv_udp+0xe8>)
 800a318:	22ba      	movs	r2, #186	; 0xba
 800a31a:	4929      	ldr	r1, [pc, #164]	; (800a3c0 <recv_udp+0xf8>)
 800a31c:	4826      	ldr	r0, [pc, #152]	; (800a3b8 <recv_udp+0xf0>)
 800a31e:	f00b fca3 	bl	8015c68 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	3310      	adds	r3, #16
 800a326:	4618      	mov	r0, r3
 800a328:	f00b fb1a 	bl	8015960 <sys_mbox_valid>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f002 ffb8 	bl	800d2a8 <pbuf_free>
    return;
 800a338:	e036      	b.n	800a3a8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a33a:	2006      	movs	r0, #6
 800a33c:	f002 fa08 	bl	800c750 <memp_malloc>
 800a340:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <recv_udp+0x88>
    pbuf_free(p);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f002 ffad 	bl	800d2a8 <pbuf_free>
    return;
 800a34e:	e02b      	b.n	800a3a8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <recv_udp+0xa0>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	e000      	b.n	800a36a <recv_udp+0xa2>
 800a368:	2300      	movs	r3, #0
 800a36a:	69ba      	ldr	r2, [r7, #24]
 800a36c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a372:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	891b      	ldrh	r3, [r3, #8]
 800a378:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	3310      	adds	r3, #16
 800a37e:	69b9      	ldr	r1, [r7, #24]
 800a380:	4618      	mov	r0, r3
 800a382:	f00b fa78 	bl	8015876 <sys_mbox_trypost>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a38c:	69b8      	ldr	r0, [r7, #24]
 800a38e:	f001 fbc9 	bl	800bb24 <netbuf_delete>
    return;
 800a392:	e009      	b.n	800a3a8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d005      	beq.n	800a3a8 <recv_udp+0xe0>
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a0:	8afa      	ldrh	r2, [r7, #22]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	69f8      	ldr	r0, [r7, #28]
 800a3a6:	4798      	blx	r3
  }
}
 800a3a8:	3720      	adds	r7, #32
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	0801753c 	.word	0x0801753c
 800a3b4:	08017570 	.word	0x08017570
 800a3b8:	08017594 	.word	0x08017594
 800a3bc:	080175bc 	.word	0x080175bc
 800a3c0:	080175dc 	.word	0x080175dc

0800a3c4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d105      	bne.n	800a3e4 <recv_tcp+0x20>
 800a3d8:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <recv_tcp+0xfc>)
 800a3da:	22f9      	movs	r2, #249	; 0xf9
 800a3dc:	4939      	ldr	r1, [pc, #228]	; (800a4c4 <recv_tcp+0x100>)
 800a3de:	483a      	ldr	r0, [pc, #232]	; (800a4c8 <recv_tcp+0x104>)
 800a3e0:	f00b fc42 	bl	8015c68 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d105      	bne.n	800a3f6 <recv_tcp+0x32>
 800a3ea:	4b35      	ldr	r3, [pc, #212]	; (800a4c0 <recv_tcp+0xfc>)
 800a3ec:	22fa      	movs	r2, #250	; 0xfa
 800a3ee:	4937      	ldr	r1, [pc, #220]	; (800a4cc <recv_tcp+0x108>)
 800a3f0:	4835      	ldr	r0, [pc, #212]	; (800a4c8 <recv_tcp+0x104>)
 800a3f2:	f00b fc39 	bl	8015c68 <iprintf>
  conn = (struct netconn *)arg;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <recv_tcp+0x42>
    return ERR_VAL;
 800a400:	f06f 0305 	mvn.w	r3, #5
 800a404:	e057      	b.n	800a4b6 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d006      	beq.n	800a41e <recv_tcp+0x5a>
 800a410:	4b2b      	ldr	r3, [pc, #172]	; (800a4c0 <recv_tcp+0xfc>)
 800a412:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a416:	492e      	ldr	r1, [pc, #184]	; (800a4d0 <recv_tcp+0x10c>)
 800a418:	482b      	ldr	r0, [pc, #172]	; (800a4c8 <recv_tcp+0x104>)
 800a41a:	f00b fc25 	bl	8015c68 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	3310      	adds	r3, #16
 800a422:	4618      	mov	r0, r3
 800a424:	f00b fa9c 	bl	8015960 <sys_mbox_valid>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10d      	bne.n	800a44a <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d008      	beq.n	800a446 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	891b      	ldrh	r3, [r3, #8]
 800a438:	4619      	mov	r1, r3
 800a43a:	68b8      	ldr	r0, [r7, #8]
 800a43c:	f003 fe0e 	bl	800e05c <tcp_recved>
      pbuf_free(p);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f002 ff31 	bl	800d2a8 <pbuf_free>
    }
    return ERR_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	e035      	b.n	800a4b6 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800a44a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d011      	beq.n	800a476 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00e      	beq.n	800a476 <recv_tcp+0xb2>
 800a458:	f00b fb9e 	bl	8015b98 <sys_arch_protect>
 800a45c:	6178      	str	r0, [r7, #20]
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a464:	f113 0f0c 	cmn.w	r3, #12
 800a468:	db02      	blt.n	800a470 <recv_tcp+0xac>
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	721a      	strb	r2, [r3, #8]
 800a470:	6978      	ldr	r0, [r7, #20]
 800a472:	f00b fb9f 	bl	8015bb4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <recv_tcp+0xc0>
    len = p->tot_len;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	891b      	ldrh	r3, [r3, #8]
 800a480:	83fb      	strh	r3, [r7, #30]
 800a482:	e001      	b.n	800a488 <recv_tcp+0xc4>
  } else {
    len = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	3310      	adds	r3, #16
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	4618      	mov	r0, r3
 800a490:	f00b f9f1 	bl	8015876 <sys_mbox_trypost>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a49a:	f04f 33ff 	mov.w	r3, #4294967295
 800a49e:	e00a      	b.n	800a4b6 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d005      	beq.n	800a4b4 <recv_tcp+0xf0>
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	8bfa      	ldrh	r2, [r7, #30]
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	69b8      	ldr	r0, [r7, #24]
 800a4b2:	4798      	blx	r3
  }

  return ERR_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3720      	adds	r7, #32
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	0801753c 	.word	0x0801753c
 800a4c4:	080175fc 	.word	0x080175fc
 800a4c8:	08017594 	.word	0x08017594
 800a4cc:	08017620 	.word	0x08017620
 800a4d0:	08017640 	.word	0x08017640

0800a4d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d106      	bne.n	800a4f6 <poll_tcp+0x22>
 800a4e8:	4b29      	ldr	r3, [pc, #164]	; (800a590 <poll_tcp+0xbc>)
 800a4ea:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a4ee:	4929      	ldr	r1, [pc, #164]	; (800a594 <poll_tcp+0xc0>)
 800a4f0:	4829      	ldr	r0, [pc, #164]	; (800a598 <poll_tcp+0xc4>)
 800a4f2:	f00b fbb9 	bl	8015c68 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d104      	bne.n	800a508 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a4fe:	2101      	movs	r1, #1
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f001 f813 	bl	800b52c <lwip_netconn_do_writemore>
 800a506:	e016      	b.n	800a536 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	785b      	ldrb	r3, [r3, #1]
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	d112      	bne.n	800a536 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00a      	beq.n	800a52e <poll_tcp+0x5a>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	7a5b      	ldrb	r3, [r3, #9]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	7a5a      	ldrb	r2, [r3, #9]
 800a528:	3a01      	subs	r2, #1
 800a52a:	b2d2      	uxtb	r2, r2
 800a52c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a52e:	2101      	movs	r1, #1
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 fc13 	bl	800ad5c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7f1b      	ldrb	r3, [r3, #28]
 800a53a:	f003 0310 	and.w	r3, r3, #16
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d021      	beq.n	800a586 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01d      	beq.n	800a586 <poll_tcp+0xb2>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a552:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a556:	d316      	bcc.n	800a586 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a560:	2b04      	cmp	r3, #4
 800a562:	d810      	bhi.n	800a586 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	7f1b      	ldrb	r3, [r3, #28]
 800a568:	f023 0310 	bic.w	r3, r3, #16
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <poll_tcp+0xb2>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	2200      	movs	r2, #0
 800a580:	2102      	movs	r1, #2
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	0801753c 	.word	0x0801753c
 800a594:	08017660 	.word	0x08017660
 800a598:	08017594 	.word	0x08017594

0800a59c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d106      	bne.n	800a5c2 <sent_tcp+0x26>
 800a5b4:	4b20      	ldr	r3, [pc, #128]	; (800a638 <sent_tcp+0x9c>)
 800a5b6:	f240 1261 	movw	r2, #353	; 0x161
 800a5ba:	4920      	ldr	r1, [pc, #128]	; (800a63c <sent_tcp+0xa0>)
 800a5bc:	4820      	ldr	r0, [pc, #128]	; (800a640 <sent_tcp+0xa4>)
 800a5be:	f00b fb53 	bl	8015c68 <iprintf>

  if (conn) {
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d032      	beq.n	800a62e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d104      	bne.n	800a5da <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	6978      	ldr	r0, [r7, #20]
 800a5d4:	f000 ffaa 	bl	800b52c <lwip_netconn_do_writemore>
 800a5d8:	e007      	b.n	800a5ea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d103      	bne.n	800a5ea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	6978      	ldr	r0, [r7, #20]
 800a5e6:	f000 fbb9 	bl	800ad5c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d01d      	beq.n	800a62e <sent_tcp+0x92>
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a5fe:	d316      	bcc.n	800a62e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d810      	bhi.n	800a62e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	7f1b      	ldrb	r3, [r3, #28]
 800a610:	f023 0310 	bic.w	r3, r3, #16
 800a614:	b2da      	uxtb	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d005      	beq.n	800a62e <sent_tcp+0x92>
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	88fa      	ldrh	r2, [r7, #6]
 800a628:	2102      	movs	r1, #2
 800a62a:	6978      	ldr	r0, [r7, #20]
 800a62c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	0801753c 	.word	0x0801753c
 800a63c:	08017660 	.word	0x08017660
 800a640:	08017594 	.word	0x08017594

0800a644 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08a      	sub	sp, #40	; 0x28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <err_tcp+0x24>
 800a65a:	4b6c      	ldr	r3, [pc, #432]	; (800a80c <err_tcp+0x1c8>)
 800a65c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800a660:	496b      	ldr	r1, [pc, #428]	; (800a810 <err_tcp+0x1cc>)
 800a662:	486c      	ldr	r0, [pc, #432]	; (800a814 <err_tcp+0x1d0>)
 800a664:	f00b fb00 	bl	8015c68 <iprintf>

  conn->pcb.tcp = NULL;
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	2200      	movs	r2, #0
 800a66c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	2200      	movs	r2, #0
 800a67a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800a67c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a680:	2b04      	cmp	r3, #4
 800a682:	d114      	bne.n	800a6ae <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d018      	beq.n	800a6c0 <err_tcp+0x7c>
 800a68e:	f00b fa83 	bl	8015b98 <sys_arch_protect>
 800a692:	61b8      	str	r0, [r7, #24]
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a69a:	f113 0f0c 	cmn.w	r3, #12
 800a69e:	db02      	blt.n	800a6a6 <err_tcp+0x62>
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	721a      	strb	r2, [r3, #8]
 800a6a6:	69b8      	ldr	r0, [r7, #24]
 800a6a8:	f00b fa84 	bl	8015bb4 <sys_arch_unprotect>
 800a6ac:	e008      	b.n	800a6c0 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800a6ae:	f00b fa73 	bl	8015b98 <sys_arch_protect>
 800a6b2:	61f8      	str	r0, [r7, #28]
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	721a      	strb	r2, [r3, #8]
 800a6ba:	69f8      	ldr	r0, [r7, #28]
 800a6bc:	f00b fa7a 	bl	8015bb4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <err_tcp+0x90>
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6d2:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d005      	beq.n	800a6e8 <err_tcp+0xa4>
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6e6:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <err_tcp+0xb8>
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2102      	movs	r1, #2
 800a6f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6fa:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	3310      	adds	r3, #16
 800a700:	4618      	mov	r0, r3
 800a702:	f00b f92d 	bl	8015960 <sys_mbox_valid>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	3310      	adds	r3, #16
 800a710:	2100      	movs	r1, #0
 800a712:	4618      	mov	r0, r3
 800a714:	f00b f8af 	bl	8015876 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	3314      	adds	r3, #20
 800a71c:	4618      	mov	r0, r3
 800a71e:	f00b f91f 	bl	8015960 <sys_mbox_valid>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	3314      	adds	r3, #20
 800a72c:	2100      	movs	r1, #0
 800a72e:	4618      	mov	r0, r3
 800a730:	f00b f8a1 	bl	8015876 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d007      	beq.n	800a74c <err_tcp+0x108>
 800a73c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a740:	2b04      	cmp	r3, #4
 800a742:	d003      	beq.n	800a74c <err_tcp+0x108>
 800a744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d14d      	bne.n	800a7e8 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	7f1b      	ldrb	r3, [r3, #28]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	bf14      	ite	ne
 800a758:	2301      	movne	r3, #1
 800a75a:	2300      	moveq	r3, #0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	7f1b      	ldrb	r3, [r3, #28]
 800a764:	f023 0304 	bic.w	r3, r3, #4
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d145      	bne.n	800a800 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <err_tcp+0x146>
 800a77c:	4b23      	ldr	r3, [pc, #140]	; (800a80c <err_tcp+0x1c8>)
 800a77e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800a782:	4925      	ldr	r1, [pc, #148]	; (800a818 <err_tcp+0x1d4>)
 800a784:	4823      	ldr	r0, [pc, #140]	; (800a814 <err_tcp+0x1d0>)
 800a786:	f00b fa6f 	bl	8015c68 <iprintf>
      conn->current_msg->err = err;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	78fa      	ldrb	r2, [r7, #3]
 800a790:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	330c      	adds	r3, #12
 800a79a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a79c:	6938      	ldr	r0, [r7, #16]
 800a79e:	f00b f970 	bl	8015a82 <sys_sem_valid>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d106      	bne.n	800a7b6 <err_tcp+0x172>
 800a7a8:	4b18      	ldr	r3, [pc, #96]	; (800a80c <err_tcp+0x1c8>)
 800a7aa:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a7ae:	491b      	ldr	r1, [pc, #108]	; (800a81c <err_tcp+0x1d8>)
 800a7b0:	4818      	ldr	r0, [pc, #96]	; (800a814 <err_tcp+0x1d0>)
 800a7b2:	f00b fa59 	bl	8015c68 <iprintf>
      conn->current_msg = NULL;
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00e      	beq.n	800a7e0 <err_tcp+0x19c>
 800a7c2:	f00b f9e9 	bl	8015b98 <sys_arch_protect>
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a7ce:	f113 0f0c 	cmn.w	r3, #12
 800a7d2:	db02      	blt.n	800a7da <err_tcp+0x196>
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	78fa      	ldrb	r2, [r7, #3]
 800a7d8:	721a      	strb	r2, [r3, #8]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f00b f9ea 	bl	8015bb4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800a7e0:	6938      	ldr	r0, [r7, #16]
 800a7e2:	f00b f934 	bl	8015a4e <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a7e6:	e00b      	b.n	800a800 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d008      	beq.n	800a802 <err_tcp+0x1be>
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <err_tcp+0x1c8>)
 800a7f2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a7f6:	490a      	ldr	r1, [pc, #40]	; (800a820 <err_tcp+0x1dc>)
 800a7f8:	4806      	ldr	r0, [pc, #24]	; (800a814 <err_tcp+0x1d0>)
 800a7fa:	f00b fa35 	bl	8015c68 <iprintf>
  }
}
 800a7fe:	e000      	b.n	800a802 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800a800:	bf00      	nop
}
 800a802:	bf00      	nop
 800a804:	3728      	adds	r7, #40	; 0x28
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	0801753c 	.word	0x0801753c
 800a810:	08017660 	.word	0x08017660
 800a814:	08017594 	.word	0x08017594
 800a818:	08017670 	.word	0x08017670
 800a81c:	0801768c 	.word	0x0801768c
 800a820:	080176a8 	.word	0x080176a8

0800a824 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f004 f9f3 	bl	800ec20 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a83a:	490a      	ldr	r1, [pc, #40]	; (800a864 <setup_tcp+0x40>)
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f004 fa01 	bl	800ec44 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a842:	4909      	ldr	r1, [pc, #36]	; (800a868 <setup_tcp+0x44>)
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f004 fa1f 	bl	800ec88 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a84a:	2202      	movs	r2, #2
 800a84c:	4907      	ldr	r1, [pc, #28]	; (800a86c <setup_tcp+0x48>)
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f004 fa74 	bl	800ed3c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a854:	4906      	ldr	r1, [pc, #24]	; (800a870 <setup_tcp+0x4c>)
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f004 fa36 	bl	800ecc8 <tcp_err>
}
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	0800a3c5 	.word	0x0800a3c5
 800a868:	0800a59d 	.word	0x0800a59d
 800a86c:	0800a4d5 	.word	0x0800a4d5
 800a870:	0800a645 	.word	0x0800a645

0800a874 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d102      	bne.n	800a892 <accept_function+0x1e>
    return ERR_VAL;
 800a88c:	f06f 0305 	mvn.w	r3, #5
 800a890:	e08d      	b.n	800a9ae <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	3314      	adds	r3, #20
 800a896:	4618      	mov	r0, r3
 800a898:	f00b f862 	bl	8015960 <sys_mbox_valid>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d102      	bne.n	800a8a8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a8a2:	f06f 0305 	mvn.w	r3, #5
 800a8a6:	e082      	b.n	800a9ae <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d115      	bne.n	800a8da <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	3314      	adds	r3, #20
 800a8b2:	4941      	ldr	r1, [pc, #260]	; (800a9b8 <accept_function+0x144>)
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f00a ffde 	bl	8015876 <sys_mbox_trypost>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <accept_function+0x60>
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	69f8      	ldr	r0, [r7, #28]
 800a8d2:	4798      	blx	r3
    }
    return ERR_VAL;
 800a8d4:	f06f 0305 	mvn.w	r3, #5
 800a8d8:	e069      	b.n	800a9ae <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	781a      	ldrb	r2, [r3, #0]
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f000 f8ff 	bl	800aae8 <netconn_alloc>
 800a8ea:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d115      	bne.n	800a91e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	3314      	adds	r3, #20
 800a8f6:	4930      	ldr	r1, [pc, #192]	; (800a9b8 <accept_function+0x144>)
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f00a ffbc 	bl	8015876 <sys_mbox_trypost>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d109      	bne.n	800a918 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <accept_function+0xa4>
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a910:	2200      	movs	r2, #0
 800a912:	2100      	movs	r1, #0
 800a914:	69f8      	ldr	r0, [r7, #28]
 800a916:	4798      	blx	r3
    }
    return ERR_MEM;
 800a918:	f04f 33ff 	mov.w	r3, #4294967295
 800a91c:	e047      	b.n	800a9ae <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a924:	69b8      	ldr	r0, [r7, #24]
 800a926:	f7ff ff7d 	bl	800a824 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	79fa      	ldrb	r2, [r7, #7]
 800a92e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	3314      	adds	r3, #20
 800a934:	69b9      	ldr	r1, [r7, #24]
 800a936:	4618      	mov	r0, r3
 800a938:	f00a ff9d 	bl	8015876 <sys_mbox_trypost>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d02a      	beq.n	800a998 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a948:	2100      	movs	r1, #0
 800a94a:	6978      	ldr	r0, [r7, #20]
 800a94c:	f004 f968 	bl	800ec20 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a950:	2100      	movs	r1, #0
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	f004 f976 	bl	800ec44 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a958:	2100      	movs	r1, #0
 800a95a:	6978      	ldr	r0, [r7, #20]
 800a95c:	f004 f994 	bl	800ec88 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a960:	2200      	movs	r2, #0
 800a962:	2100      	movs	r1, #0
 800a964:	6978      	ldr	r0, [r7, #20]
 800a966:	f004 f9e9 	bl	800ed3c <tcp_poll>
    tcp_err(pcb, NULL);
 800a96a:	2100      	movs	r1, #0
 800a96c:	6978      	ldr	r0, [r7, #20]
 800a96e:	f004 f9ab 	bl	800ecc8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	2200      	movs	r2, #0
 800a976:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	3310      	adds	r3, #16
 800a97c:	4618      	mov	r0, r3
 800a97e:	f00a ff53 	bl	8015828 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	3310      	adds	r3, #16
 800a986:	4618      	mov	r0, r3
 800a988:	f00a fffb 	bl	8015982 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a98c:	69b8      	ldr	r0, [r7, #24]
 800a98e:	f000 f91b 	bl	800abc8 <netconn_free>
    return ERR_MEM;
 800a992:	f04f 33ff 	mov.w	r3, #4294967295
 800a996:	e00a      	b.n	800a9ae <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <accept_function+0x138>
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	69f8      	ldr	r0, [r7, #28]
 800a9aa:	4798      	blx	r3
  }

  return ERR_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200079e8 	.word	0x200079e8

0800a9bc <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d006      	beq.n	800a9e0 <pcb_new+0x24>
 800a9d2:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <pcb_new+0xc4>)
 800a9d4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800a9d8:	492a      	ldr	r1, [pc, #168]	; (800aa84 <pcb_new+0xc8>)
 800a9da:	482b      	ldr	r0, [pc, #172]	; (800aa88 <pcb_new+0xcc>)
 800a9dc:	f00b f944 	bl	8015c68 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9ea:	2b10      	cmp	r3, #16
 800a9ec:	d022      	beq.n	800aa34 <pcb_new+0x78>
 800a9ee:	2b20      	cmp	r3, #32
 800a9f0:	d133      	bne.n	800aa5a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681c      	ldr	r4, [r3, #0]
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f008 fcae 	bl	801335a <udp_new_ip_type>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d02a      	beq.n	800aa62 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b22      	cmp	r3, #34	; 0x22
 800aa14:	d104      	bne.n	800aa20 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6858      	ldr	r0, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4917      	ldr	r1, [pc, #92]	; (800aa8c <pcb_new+0xd0>)
 800aa2e:	f008 fc39 	bl	80132a4 <udp_recv>
    }
    break;
 800aa32:	e016      	b.n	800aa62 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681c      	ldr	r4, [r3, #0]
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f004 f8e2 	bl	800ec04 <tcp_new_ip_type>
 800aa40:	4603      	mov	r3, r0
 800aa42:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7ff fee6 	bl	800a824 <setup_tcp>
    }
    break;
 800aa58:	e005      	b.n	800aa66 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	22fa      	movs	r2, #250	; 0xfa
 800aa5e:	711a      	strb	r2, [r3, #4]
    return;
 800aa60:	e00a      	b.n	800aa78 <pcb_new+0xbc>
    break;
 800aa62:	bf00      	nop
 800aa64:	e000      	b.n	800aa68 <pcb_new+0xac>
    break;
 800aa66:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d102      	bne.n	800aa78 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	22ff      	movs	r2, #255	; 0xff
 800aa76:	711a      	strb	r2, [r3, #4]
  }
}
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd90      	pop	{r4, r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	0801753c 	.word	0x0801753c
 800aa84:	080176c4 	.word	0x080176c4
 800aa88:	08017594 	.word	0x08017594
 800aa8c:	0800a2c9 	.word	0x0800a2c9

0800aa90 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7ff ff85 	bl	800a9bc <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d012      	beq.n	800aae0 <lwip_netconn_do_newconn+0x50>
 800aaba:	f00b f86d 	bl	8015b98 <sys_arch_protect>
 800aabe:	60b8      	str	r0, [r7, #8]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800aac8:	f113 0f0c 	cmn.w	r3, #12
 800aacc:	db05      	blt.n	800aada <lwip_netconn_do_newconn+0x4a>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aad8:	721a      	strb	r2, [r3, #8]
 800aada:	68b8      	ldr	r0, [r7, #8]
 800aadc:	f00b f86a 	bl	8015bb4 <sys_arch_unprotect>
}
 800aae0:	bf00      	nop
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	6039      	str	r1, [r7, #0]
 800aaf2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800aaf4:	2007      	movs	r0, #7
 800aaf6:	f001 fe2b 	bl	800c750 <memp_malloc>
 800aafa:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <netconn_alloc+0x1e>
    return NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e055      	b.n	800abb2 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	79fa      	ldrb	r2, [r7, #7]
 800ab10:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2200      	movs	r2, #0
 800ab16:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d004      	beq.n	800ab2c <netconn_alloc+0x44>
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d105      	bne.n	800ab32 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ab26:	2306      	movs	r3, #6
 800ab28:	60fb      	str	r3, [r7, #12]
    break;
 800ab2a:	e00a      	b.n	800ab42 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ab2c:	2306      	movs	r3, #6
 800ab2e:	60fb      	str	r3, [r7, #12]
    break;
 800ab30:	e007      	b.n	800ab42 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ab32:	4b22      	ldr	r3, [pc, #136]	; (800abbc <netconn_alloc+0xd4>)
 800ab34:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ab38:	4921      	ldr	r1, [pc, #132]	; (800abc0 <netconn_alloc+0xd8>)
 800ab3a:	4822      	ldr	r0, [pc, #136]	; (800abc4 <netconn_alloc+0xdc>)
 800ab3c:	f00b f894 	bl	8015c68 <iprintf>
    goto free_and_return;
 800ab40:	e032      	b.n	800aba8 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	3310      	adds	r3, #16
 800ab46:	68f9      	ldr	r1, [r7, #12]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f00a fe4b 	bl	80157e4 <sys_mbox_new>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d128      	bne.n	800aba6 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	330c      	adds	r3, #12
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f00a ff1e 	bl	801599c <sys_sem_new>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	3310      	adds	r3, #16
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f00a fe5c 	bl	8015828 <sys_mbox_free>
    goto free_and_return;
 800ab70:	e01a      	b.n	800aba8 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	3314      	adds	r3, #20
 800ab76:	4618      	mov	r0, r3
 800ab78:	f00a ff03 	bl	8015982 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	771a      	strb	r2, [r3, #28]
  return conn;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	e005      	b.n	800abb2 <netconn_alloc+0xca>
    goto free_and_return;
 800aba6:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	2007      	movs	r0, #7
 800abac:	f001 fe22 	bl	800c7f4 <memp_free>
  return NULL;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	0801753c 	.word	0x0801753c
 800abc0:	080176e4 	.word	0x080176e4
 800abc4:	08017594 	.word	0x08017594

0800abc8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d006      	beq.n	800abe6 <netconn_free+0x1e>
 800abd8:	4b1b      	ldr	r3, [pc, #108]	; (800ac48 <netconn_free+0x80>)
 800abda:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800abde:	491b      	ldr	r1, [pc, #108]	; (800ac4c <netconn_free+0x84>)
 800abe0:	481b      	ldr	r0, [pc, #108]	; (800ac50 <netconn_free+0x88>)
 800abe2:	f00b f841 	bl	8015c68 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3310      	adds	r3, #16
 800abea:	4618      	mov	r0, r3
 800abec:	f00a feb8 	bl	8015960 <sys_mbox_valid>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d006      	beq.n	800ac04 <netconn_free+0x3c>
 800abf6:	4b14      	ldr	r3, [pc, #80]	; (800ac48 <netconn_free+0x80>)
 800abf8:	f240 22e2 	movw	r2, #738	; 0x2e2
 800abfc:	4915      	ldr	r1, [pc, #84]	; (800ac54 <netconn_free+0x8c>)
 800abfe:	4814      	ldr	r0, [pc, #80]	; (800ac50 <netconn_free+0x88>)
 800ac00:	f00b f832 	bl	8015c68 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3314      	adds	r3, #20
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f00a fea9 	bl	8015960 <sys_mbox_valid>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d006      	beq.n	800ac22 <netconn_free+0x5a>
 800ac14:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <netconn_free+0x80>)
 800ac16:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ac1a:	490f      	ldr	r1, [pc, #60]	; (800ac58 <netconn_free+0x90>)
 800ac1c:	480c      	ldr	r0, [pc, #48]	; (800ac50 <netconn_free+0x88>)
 800ac1e:	f00b f823 	bl	8015c68 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	330c      	adds	r3, #12
 800ac26:	4618      	mov	r0, r3
 800ac28:	f00a ff1e 	bl	8015a68 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	330c      	adds	r3, #12
 800ac30:	4618      	mov	r0, r3
 800ac32:	f00a ff37 	bl	8015aa4 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	2007      	movs	r0, #7
 800ac3a:	f001 fddb 	bl	800c7f4 <memp_free>
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	0801753c 	.word	0x0801753c
 800ac4c:	0801770c 	.word	0x0801770c
 800ac50:	08017594 	.word	0x08017594
 800ac54:	0801773c 	.word	0x0801773c
 800ac58:	08017778 	.word	0x08017778

0800ac5c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3310      	adds	r3, #16
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f00a fe79 	bl	8015960 <sys_mbox_valid>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d035      	beq.n	800ace0 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ac74:	e01e      	b.n	800acb4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac7e:	2b10      	cmp	r3, #16
 800ac80:	d114      	bne.n	800acac <netconn_drain+0x50>
        if (mem != NULL) {
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d015      	beq.n	800acb4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	891b      	ldrh	r3, [r3, #8]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f003 f9dc 	bl	800e05c <tcp_recved>
          }
          pbuf_free(p);
 800aca4:	6978      	ldr	r0, [r7, #20]
 800aca6:	f002 faff 	bl	800d2a8 <pbuf_free>
 800acaa:	e003      	b.n	800acb4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 ff38 	bl	800bb24 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3310      	adds	r3, #16
 800acb8:	f107 020c 	add.w	r2, r7, #12
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f00a fe32 	bl	8015928 <sys_arch_mbox_tryfetch>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d1d4      	bne.n	800ac76 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3310      	adds	r3, #16
 800acd0:	4618      	mov	r0, r3
 800acd2:	f00a fda9 	bl	8015828 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3310      	adds	r3, #16
 800acda:	4618      	mov	r0, r3
 800acdc:	f00a fe51 	bl	8015982 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3314      	adds	r3, #20
 800ace4:	4618      	mov	r0, r3
 800ace6:	f00a fe3b 	bl	8015960 <sys_mbox_valid>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02e      	beq.n	800ad4e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800acf0:	e017      	b.n	800ad22 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4a18      	ldr	r2, [pc, #96]	; (800ad58 <netconn_drain+0xfc>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d013      	beq.n	800ad22 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800acfe:	6938      	ldr	r0, [r7, #16]
 800ad00:	f7ff ffac 	bl	800ac5c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d007      	beq.n	800ad1c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f003 f80f 	bl	800dd34 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800ad1c:	6938      	ldr	r0, [r7, #16]
 800ad1e:	f7ff ff53 	bl	800abc8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3314      	adds	r3, #20
 800ad26:	f107 020c 	add.w	r2, r7, #12
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f00a fdfb 	bl	8015928 <sys_arch_mbox_tryfetch>
 800ad32:	4603      	mov	r3, r0
 800ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad38:	d1db      	bne.n	800acf2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3314      	adds	r3, #20
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f00a fd72 	bl	8015828 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3314      	adds	r3, #20
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f00a fe1a 	bl	8015982 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ad4e:	bf00      	nop
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200079e8 	.word	0x200079e8

0800ad5c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <lwip_netconn_do_close_internal+0x24>
 800ad72:	4baa      	ldr	r3, [pc, #680]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800ad74:	f240 3243 	movw	r2, #835	; 0x343
 800ad78:	49a9      	ldr	r1, [pc, #676]	; (800b020 <lwip_netconn_do_close_internal+0x2c4>)
 800ad7a:	48aa      	ldr	r0, [pc, #680]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800ad7c:	f00a ff74 	bl	8015c68 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad88:	2b10      	cmp	r3, #16
 800ad8a:	d006      	beq.n	800ad9a <lwip_netconn_do_close_internal+0x3e>
 800ad8c:	4ba3      	ldr	r3, [pc, #652]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800ad8e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800ad92:	49a5      	ldr	r1, [pc, #660]	; (800b028 <lwip_netconn_do_close_internal+0x2cc>)
 800ad94:	48a3      	ldr	r0, [pc, #652]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800ad96:	f00a ff67 	bl	8015c68 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d006      	beq.n	800adb0 <lwip_netconn_do_close_internal+0x54>
 800ada2:	4b9e      	ldr	r3, [pc, #632]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800ada4:	f240 3245 	movw	r2, #837	; 0x345
 800ada8:	49a0      	ldr	r1, [pc, #640]	; (800b02c <lwip_netconn_do_close_internal+0x2d0>)
 800adaa:	489e      	ldr	r0, [pc, #632]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800adac:	f00a ff5c 	bl	8015c68 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d106      	bne.n	800adc6 <lwip_netconn_do_close_internal+0x6a>
 800adb8:	4b98      	ldr	r3, [pc, #608]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800adba:	f240 3246 	movw	r2, #838	; 0x346
 800adbe:	499c      	ldr	r1, [pc, #624]	; (800b030 <lwip_netconn_do_close_internal+0x2d4>)
 800adc0:	4898      	ldr	r0, [pc, #608]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800adc2:	f00a ff51 	bl	8015c68 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <lwip_netconn_do_close_internal+0x80>
 800adce:	4b93      	ldr	r3, [pc, #588]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800add0:	f240 3247 	movw	r2, #839	; 0x347
 800add4:	4997      	ldr	r1, [pc, #604]	; (800b034 <lwip_netconn_do_close_internal+0x2d8>)
 800add6:	4893      	ldr	r0, [pc, #588]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800add8:	f00a ff46 	bl	8015c68 <iprintf>

  tpcb = conn->pcb.tcp;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	7a1b      	ldrb	r3, [r3, #8]
 800ade8:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d102      	bne.n	800ae06 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800ae00:	2301      	movs	r3, #1
 800ae02:	77bb      	strb	r3, [r7, #30]
 800ae04:	e01f      	b.n	800ae46 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ae06:	7dbb      	ldrb	r3, [r7, #22]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ae10:	2b05      	cmp	r3, #5
 800ae12:	d007      	beq.n	800ae24 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ae18:	2b06      	cmp	r3, #6
 800ae1a:	d003      	beq.n	800ae24 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d102      	bne.n	800ae2a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800ae24:	2301      	movs	r3, #1
 800ae26:	77bb      	strb	r3, [r7, #30]
 800ae28:	e00d      	b.n	800ae46 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ae2a:	7d7b      	ldrb	r3, [r7, #21]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d008      	beq.n	800ae42 <lwip_netconn_do_close_internal+0xe6>
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	7e9b      	ldrb	r3, [r3, #26]
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	77bb      	strb	r3, [r7, #30]
 800ae40:	e001      	b.n	800ae46 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800ae46:	7fbb      	ldrb	r3, [r7, #30]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	69b8      	ldr	r0, [r7, #24]
 800ae50:	f003 fee6 	bl	800ec20 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	7d1b      	ldrb	r3, [r3, #20]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d104      	bne.n	800ae66 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	69b8      	ldr	r0, [r7, #24]
 800ae60:	f003 ff54 	bl	800ed0c <tcp_accept>
 800ae64:	e01d      	b.n	800aea2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ae66:	7dbb      	ldrb	r3, [r7, #22]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d007      	beq.n	800ae7c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	69b8      	ldr	r0, [r7, #24]
 800ae70:	f003 fee8 	bl	800ec44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ae74:	2100      	movs	r1, #0
 800ae76:	69b8      	ldr	r0, [r7, #24]
 800ae78:	f003 ff48 	bl	800ed0c <tcp_accept>
    }
    if (shut_tx) {
 800ae7c:	7d7b      	ldrb	r3, [r7, #21]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ae82:	2100      	movs	r1, #0
 800ae84:	69b8      	ldr	r0, [r7, #24]
 800ae86:	f003 feff 	bl	800ec88 <tcp_sent>
    }
    if (close) {
 800ae8a:	7fbb      	ldrb	r3, [r7, #30]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d008      	beq.n	800aea2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ae90:	2200      	movs	r2, #0
 800ae92:	2100      	movs	r1, #0
 800ae94:	69b8      	ldr	r0, [r7, #24]
 800ae96:	f003 ff51 	bl	800ed3c <tcp_poll>
      tcp_err(tpcb, NULL);
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	69b8      	ldr	r0, [r7, #24]
 800ae9e:	f003 ff13 	bl	800ecc8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800aea2:	7fbb      	ldrb	r3, [r7, #30]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d005      	beq.n	800aeb4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800aea8:	69b8      	ldr	r0, [r7, #24]
 800aeaa:	f002 fe31 	bl	800db10 <tcp_close>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	77fb      	strb	r3, [r7, #31]
 800aeb2:	e007      	b.n	800aec4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800aeb4:	7dbb      	ldrb	r3, [r7, #22]
 800aeb6:	7d7a      	ldrb	r2, [r7, #21]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	69b8      	ldr	r0, [r7, #24]
 800aebc:	f002 fe40 	bl	800db40 <tcp_shutdown>
 800aec0:	4603      	mov	r3, r0
 800aec2:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800aec4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800aecc:	2301      	movs	r3, #1
 800aece:	777b      	strb	r3, [r7, #29]
 800aed0:	e016      	b.n	800af00 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800aed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d10f      	bne.n	800aefc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	7a5b      	ldrb	r3, [r3, #9]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10c      	bne.n	800af00 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800aee6:	2301      	movs	r3, #1
 800aee8:	777b      	strb	r3, [r7, #29]
        if (close) {
 800aeea:	7fbb      	ldrb	r3, [r7, #30]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d007      	beq.n	800af00 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800aef0:	69b8      	ldr	r0, [r7, #24]
 800aef2:	f002 ff1f 	bl	800dd34 <tcp_abort>
          err = ERR_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	77fb      	strb	r3, [r7, #31]
 800aefa:	e001      	b.n	800af00 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800aefc:	2301      	movs	r3, #1
 800aefe:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800af00:	7f7b      	ldrb	r3, [r7, #29]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d056      	beq.n	800afb4 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	330c      	adds	r3, #12
 800af0e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	7ffa      	ldrb	r2, [r7, #31]
 800af16:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800af24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d129      	bne.n	800af80 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800af2c:	7fbb      	ldrb	r3, [r7, #30]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00c      	beq.n	800af4c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d005      	beq.n	800af4c <lwip_netconn_do_close_internal+0x1f0>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	2200      	movs	r2, #0
 800af46:	2104      	movs	r1, #4
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	4798      	blx	r3
      }
      if (shut_rx) {
 800af4c:	7dbb      	ldrb	r3, [r7, #22]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <lwip_netconn_do_close_internal+0x20a>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5e:	2200      	movs	r2, #0
 800af60:	2100      	movs	r1, #0
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
      }
      if (shut_tx) {
 800af66:	7d7b      	ldrb	r3, [r7, #21]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <lwip_netconn_do_close_internal+0x224>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af78:	2200      	movs	r2, #0
 800af7a:	2102      	movs	r1, #2
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00e      	beq.n	800afa4 <lwip_netconn_do_close_internal+0x248>
 800af86:	f00a fe07 	bl	8015b98 <sys_arch_protect>
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800af92:	f113 0f0c 	cmn.w	r3, #12
 800af96:	db02      	blt.n	800af9e <lwip_netconn_do_close_internal+0x242>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7ffa      	ldrb	r2, [r7, #31]
 800af9c:	721a      	strb	r2, [r3, #8]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f00a fe08 	bl	8015bb4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800afaa:	6938      	ldr	r0, [r7, #16]
 800afac:	f00a fd4f 	bl	8015a4e <sys_sem_signal>
    }
    return ERR_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e02e      	b.n	800b012 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800afb4:	7f7b      	ldrb	r3, [r7, #29]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d11e      	bne.n	800aff8 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	7d1b      	ldrb	r3, [r3, #20]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d106      	bne.n	800afd0 <lwip_netconn_do_close_internal+0x274>
 800afc2:	4b16      	ldr	r3, [pc, #88]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800afc4:	f240 32e3 	movw	r2, #995	; 0x3e3
 800afc8:	491b      	ldr	r1, [pc, #108]	; (800b038 <lwip_netconn_do_close_internal+0x2dc>)
 800afca:	4816      	ldr	r0, [pc, #88]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800afcc:	f00a fe4c 	bl	8015c68 <iprintf>
    if (shut_tx) {
 800afd0:	7d7b      	ldrb	r3, [r7, #21]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800afd6:	4919      	ldr	r1, [pc, #100]	; (800b03c <lwip_netconn_do_close_internal+0x2e0>)
 800afd8:	69b8      	ldr	r0, [r7, #24]
 800afda:	f003 fe55 	bl	800ec88 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800afde:	2201      	movs	r2, #1
 800afe0:	4917      	ldr	r1, [pc, #92]	; (800b040 <lwip_netconn_do_close_internal+0x2e4>)
 800afe2:	69b8      	ldr	r0, [r7, #24]
 800afe4:	f003 feaa 	bl	800ed3c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800afe8:	4916      	ldr	r1, [pc, #88]	; (800b044 <lwip_netconn_do_close_internal+0x2e8>)
 800afea:	69b8      	ldr	r0, [r7, #24]
 800afec:	f003 fe6c 	bl	800ecc8 <tcp_err>
    tcp_arg(tpcb, conn);
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	69b8      	ldr	r0, [r7, #24]
 800aff4:	f003 fe14 	bl	800ec20 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800aff8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <lwip_netconn_do_close_internal+0x2b2>
 800b000:	4b06      	ldr	r3, [pc, #24]	; (800b01c <lwip_netconn_do_close_internal+0x2c0>)
 800b002:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b006:	4910      	ldr	r1, [pc, #64]	; (800b048 <lwip_netconn_do_close_internal+0x2ec>)
 800b008:	4806      	ldr	r0, [pc, #24]	; (800b024 <lwip_netconn_do_close_internal+0x2c8>)
 800b00a:	f00a fe2d 	bl	8015c68 <iprintf>
  return err;
 800b00e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3720      	adds	r7, #32
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	0801753c 	.word	0x0801753c
 800b020:	080177b4 	.word	0x080177b4
 800b024:	08017594 	.word	0x08017594
 800b028:	080177c4 	.word	0x080177c4
 800b02c:	080177e4 	.word	0x080177e4
 800b030:	08017808 	.word	0x08017808
 800b034:	08017670 	.word	0x08017670
 800b038:	0801781c 	.word	0x0801781c
 800b03c:	0800a59d 	.word	0x0800a59d
 800b040:	0800a4d5 	.word	0x0800a4d5
 800b044:	0800a645 	.word	0x0800a645
 800b048:	08017840 	.word	0x08017840

0800b04c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b060:	7cfb      	ldrb	r3, [r7, #19]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00d      	beq.n	800b082 <lwip_netconn_do_delconn+0x36>
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b070:	2b10      	cmp	r3, #16
 800b072:	d006      	beq.n	800b082 <lwip_netconn_do_delconn+0x36>
 800b074:	4b6f      	ldr	r3, [pc, #444]	; (800b234 <lwip_netconn_do_delconn+0x1e8>)
 800b076:	f240 4201 	movw	r2, #1025	; 0x401
 800b07a:	496f      	ldr	r1, [pc, #444]	; (800b238 <lwip_netconn_do_delconn+0x1ec>)
 800b07c:	486f      	ldr	r0, [pc, #444]	; (800b23c <lwip_netconn_do_delconn+0x1f0>)
 800b07e:	f00a fdf3 	bl	8015c68 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b082:	7cfb      	ldrb	r3, [r7, #19]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d005      	beq.n	800b094 <lwip_netconn_do_delconn+0x48>
 800b088:	7cfb      	ldrb	r3, [r7, #19]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d002      	beq.n	800b094 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b08e:	7cfb      	ldrb	r3, [r7, #19]
 800b090:	2b03      	cmp	r3, #3
 800b092:	d109      	bne.n	800b0a8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b094:	7cfb      	ldrb	r3, [r7, #19]
 800b096:	2b03      	cmp	r3, #3
 800b098:	d10a      	bne.n	800b0b0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	7f1b      	ldrb	r3, [r3, #28]
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	22fb      	movs	r2, #251	; 0xfb
 800b0ac:	711a      	strb	r2, [r3, #4]
 800b0ae:	e09c      	b.n	800b1ea <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b0b0:	7cfb      	ldrb	r3, [r7, #19]
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d10d      	bne.n	800b0d2 <lwip_netconn_do_delconn+0x86>
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	7f1b      	ldrb	r3, [r3, #28]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <lwip_netconn_do_delconn+0x86>
 800b0c4:	4b5b      	ldr	r3, [pc, #364]	; (800b234 <lwip_netconn_do_delconn+0x1e8>)
 800b0c6:	f240 421f 	movw	r2, #1055	; 0x41f
 800b0ca:	495d      	ldr	r1, [pc, #372]	; (800b240 <lwip_netconn_do_delconn+0x1f4>)
 800b0cc:	485b      	ldr	r0, [pc, #364]	; (800b23c <lwip_netconn_do_delconn+0x1f0>)
 800b0ce:	f00a fdcb 	bl	8015c68 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff fdbd 	bl	800ac5c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d064      	beq.n	800b1b6 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0f6:	2b10      	cmp	r3, #16
 800b0f8:	d00e      	beq.n	800b118 <lwip_netconn_do_delconn+0xcc>
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	d000      	beq.n	800b100 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800b0fe:	e056      	b.n	800b1ae <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	f008 f8d9 	bl	80132c8 <udp_remove>
        break;
 800b116:	e04a      	b.n	800b1ae <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d104      	bne.n	800b12c <lwip_netconn_do_delconn+0xe0>
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d006      	beq.n	800b13a <lwip_netconn_do_delconn+0xee>
 800b12c:	4b41      	ldr	r3, [pc, #260]	; (800b234 <lwip_netconn_do_delconn+0x1e8>)
 800b12e:	f240 4235 	movw	r2, #1077	; 0x435
 800b132:	4944      	ldr	r1, [pc, #272]	; (800b244 <lwip_netconn_do_delconn+0x1f8>)
 800b134:	4841      	ldr	r0, [pc, #260]	; (800b23c <lwip_netconn_do_delconn+0x1f0>)
 800b136:	f00a fd97 	bl	8015c68 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2204      	movs	r2, #4
 800b140:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2203      	movs	r2, #3
 800b146:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2100      	movs	r1, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fe00 	bl	800ad5c <lwip_netconn_do_close_internal>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d064      	beq.n	800b22c <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	785b      	ldrb	r3, [r3, #1]
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d006      	beq.n	800b17a <lwip_netconn_do_delconn+0x12e>
 800b16c:	4b31      	ldr	r3, [pc, #196]	; (800b234 <lwip_netconn_do_delconn+0x1e8>)
 800b16e:	f240 423b 	movw	r2, #1083	; 0x43b
 800b172:	4935      	ldr	r1, [pc, #212]	; (800b248 <lwip_netconn_do_delconn+0x1fc>)
 800b174:	4831      	ldr	r0, [pc, #196]	; (800b23c <lwip_netconn_do_delconn+0x1f0>)
 800b176:	f00a fd77 	bl	8015c68 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b17a:	4834      	ldr	r0, [pc, #208]	; (800b24c <lwip_netconn_do_delconn+0x200>)
 800b17c:	f00a fcd9 	bl	8015b32 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	330c      	adds	r3, #12
 800b186:	2100      	movs	r1, #0
 800b188:	4618      	mov	r0, r3
 800b18a:	f00a fc2f 	bl	80159ec <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b18e:	482f      	ldr	r0, [pc, #188]	; (800b24c <lwip_netconn_do_delconn+0x200>)
 800b190:	f00a fcc0 	bl	8015b14 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	785b      	ldrb	r3, [r3, #1]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d046      	beq.n	800b22c <lwip_netconn_do_delconn+0x1e0>
 800b19e:	4b25      	ldr	r3, [pc, #148]	; (800b234 <lwip_netconn_do_delconn+0x1e8>)
 800b1a0:	f240 423f 	movw	r2, #1087	; 0x43f
 800b1a4:	4928      	ldr	r1, [pc, #160]	; (800b248 <lwip_netconn_do_delconn+0x1fc>)
 800b1a6:	4825      	ldr	r0, [pc, #148]	; (800b23c <lwip_netconn_do_delconn+0x1f0>)
 800b1a8:	f00a fd5e 	bl	8015c68 <iprintf>
        return;
 800b1ac:	e03e      	b.n	800b22c <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d007      	beq.n	800b1d0 <lwip_netconn_do_delconn+0x184>
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	6810      	ldr	r0, [r2, #0]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <lwip_netconn_do_delconn+0x19e>
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	6810      	ldr	r0, [r2, #0]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	2102      	movs	r1, #2
 800b1e8:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	330c      	adds	r3, #12
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f00a fc46 	bl	8015a82 <sys_sem_valid>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d018      	beq.n	800b22e <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d014      	beq.n	800b22e <lwip_netconn_do_delconn+0x1e2>
 800b204:	f00a fcc8 	bl	8015b98 <sys_arch_protect>
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b212:	f113 0f0c 	cmn.w	r3, #12
 800b216:	db05      	blt.n	800b224 <lwip_netconn_do_delconn+0x1d8>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b222:	721a      	strb	r2, [r3, #8]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f00a fcc5 	bl	8015bb4 <sys_arch_unprotect>
 800b22a:	e000      	b.n	800b22e <lwip_netconn_do_delconn+0x1e2>
        return;
 800b22c:	bf00      	nop
  }
}
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	0801753c 	.word	0x0801753c
 800b238:	08017850 	.word	0x08017850
 800b23c:	08017594 	.word	0x08017594
 800b240:	08017864 	.word	0x08017864
 800b244:	08017884 	.word	0x08017884
 800b248:	080178a0 	.word	0x080178a0
 800b24c:	200079ec 	.word	0x200079ec

0800b250 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b264:	f113 0f0c 	cmn.w	r3, #12
 800b268:	da06      	bge.n	800b278 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	711a      	strb	r2, [r3, #4]
 800b276:	e030      	b.n	800b2da <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	22fa      	movs	r2, #250	; 0xfa
 800b27c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d027      	beq.n	800b2d8 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b292:	2b10      	cmp	r3, #16
 800b294:	d011      	beq.n	800b2ba <lwip_netconn_do_bind+0x6a>
 800b296:	2b20      	cmp	r3, #32
 800b298:	d000      	beq.n	800b29c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800b29a:	e01e      	b.n	800b2da <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6858      	ldr	r0, [r3, #4]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6899      	ldr	r1, [r3, #8]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	899b      	ldrh	r3, [r3, #12]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f007 ff8a 	bl	80131c4 <udp_bind>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	711a      	strb	r2, [r3, #4]
        break;
 800b2b8:	e00f      	b.n	800b2da <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6858      	ldr	r0, [r3, #4]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6899      	ldr	r1, [r3, #8]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	899b      	ldrh	r3, [r3, #12]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	f002 fd3f 	bl	800dd4c <tcp_bind>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	711a      	strb	r2, [r3, #4]
        break;
 800b2d6:	e000      	b.n	800b2da <lwip_netconn_do_bind+0x8a>
      }
    }
 800b2d8:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d012      	beq.n	800b308 <lwip_netconn_do_bind+0xb8>
 800b2e2:	f00a fc59 	bl	8015b98 <sys_arch_protect>
 800b2e6:	60b8      	str	r0, [r7, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b2f0:	f113 0f0c 	cmn.w	r3, #12
 800b2f4:	db05      	blt.n	800b302 <lwip_netconn_do_bind+0xb2>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b300:	721a      	strb	r2, [r3, #8]
 800b302:	68b8      	ldr	r0, [r7, #8]
 800b304:	f00a fc56 	bl	8015bb4 <sys_arch_unprotect>
}
 800b308:	bf00      	nop
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b324:	f113 0f0c 	cmn.w	r3, #12
 800b328:	da06      	bge.n	800b338 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	711a      	strb	r2, [r3, #4]
 800b336:	e090      	b.n	800b45a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	22f5      	movs	r2, #245	; 0xf5
 800b33c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f000 8088 	beq.w	800b45a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b354:	2b10      	cmp	r3, #16
 800b356:	d17d      	bne.n	800b454 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	785b      	ldrb	r3, [r3, #1]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d16f      	bne.n	800b442 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	7d1b      	ldrb	r3, [r3, #20]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	22fa      	movs	r2, #250	; 0xfa
 800b372:	711a      	strb	r2, [r3, #4]
 800b374:	e071      	b.n	800b45a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800b376:	23ff      	movs	r3, #255	; 0xff
 800b378:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f107 020f 	add.w	r2, r7, #15
 800b384:	7ef9      	ldrb	r1, [r7, #27]
 800b386:	4618      	mov	r0, r3
 800b388:	f002 fd82 	bl	800de90 <tcp_listen_with_backlog_and_err>
 800b38c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d104      	bne.n	800b39e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800b394:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	711a      	strb	r2, [r3, #4]
 800b39c:	e05d      	b.n	800b45a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3310      	adds	r3, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f00a fadb 	bl	8015960 <sys_mbox_valid>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3310      	adds	r3, #16
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f00a fa36 	bl	8015828 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3310      	adds	r3, #16
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f00a fadd 	bl	8015982 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3314      	adds	r3, #20
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f00a fac3 	bl	8015960 <sys_mbox_valid>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3314      	adds	r3, #20
 800b3e6:	2106      	movs	r1, #6
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f00a f9fb 	bl	80157e4 <sys_mbox_new>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d118      	bne.n	800b432 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2202      	movs	r2, #2
 800b406:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4619      	mov	r1, r3
 800b41c:	4610      	mov	r0, r2
 800b41e:	f003 fbff 	bl	800ec20 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4919      	ldr	r1, [pc, #100]	; (800b490 <lwip_netconn_do_listen+0x180>)
 800b42a:	4618      	mov	r0, r3
 800b42c:	f003 fc6e 	bl	800ed0c <tcp_accept>
 800b430:	e013      	b.n	800b45a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800b432:	6978      	ldr	r0, [r7, #20]
 800b434:	f002 fb6c 	bl	800db10 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2200      	movs	r2, #0
 800b43e:	605a      	str	r2, [r3, #4]
 800b440:	e00b      	b.n	800b45a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	785b      	ldrb	r3, [r3, #1]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d106      	bne.n	800b45a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	2200      	movs	r2, #0
 800b450:	711a      	strb	r2, [r3, #4]
 800b452:	e002      	b.n	800b45a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	22f0      	movs	r2, #240	; 0xf0
 800b458:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d012      	beq.n	800b488 <lwip_netconn_do_listen+0x178>
 800b462:	f00a fb99 	bl	8015b98 <sys_arch_protect>
 800b466:	6138      	str	r0, [r7, #16]
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b470:	f113 0f0c 	cmn.w	r3, #12
 800b474:	db05      	blt.n	800b482 <lwip_netconn_do_listen+0x172>
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b480:	721a      	strb	r2, [r3, #8]
 800b482:	6938      	ldr	r0, [r7, #16]
 800b484:	f00a fb96 	bl	8015bb4 <sys_arch_unprotect>
}
 800b488:	bf00      	nop
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	0800a875 	.word	0x0800a875

0800b494 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d022      	beq.n	800b4f6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4ba:	2b10      	cmp	r3, #16
 800b4bc:	d11b      	bne.n	800b4f6 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ca:	d202      	bcs.n	800b4d2 <lwip_netconn_do_recv+0x3e>
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	e001      	b.n	800b4d6 <lwip_netconn_do_recv+0x42>
 800b4d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4d6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	89fa      	ldrh	r2, [r7, #14]
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f002 fdba 	bl	800e05c <tcp_recved>
        remaining -= recved;
 800b4e8:	89fb      	ldrh	r3, [r7, #14]
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e6      	bne.n	800b4c4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d012      	beq.n	800b524 <lwip_netconn_do_recv+0x90>
 800b4fe:	f00a fb4b 	bl	8015b98 <sys_arch_protect>
 800b502:	60b8      	str	r0, [r7, #8]
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b50c:	f113 0f0c 	cmn.w	r3, #12
 800b510:	db05      	blt.n	800b51e <lwip_netconn_do_recv+0x8a>
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b51c:	721a      	strb	r2, [r3, #8]
 800b51e:	68b8      	ldr	r0, [r7, #8]
 800b520:	f00a fb48 	bl	8015bb4 <sys_arch_unprotect>
}
 800b524:	bf00      	nop
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08a      	sub	sp, #40	; 0x28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <lwip_netconn_do_writemore+0x26>
 800b544:	4ba3      	ldr	r3, [pc, #652]	; (800b7d4 <lwip_netconn_do_writemore+0x2a8>)
 800b546:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800b54a:	49a3      	ldr	r1, [pc, #652]	; (800b7d8 <lwip_netconn_do_writemore+0x2ac>)
 800b54c:	48a3      	ldr	r0, [pc, #652]	; (800b7dc <lwip_netconn_do_writemore+0x2b0>)
 800b54e:	f00a fb8b 	bl	8015c68 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	785b      	ldrb	r3, [r3, #1]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d006      	beq.n	800b568 <lwip_netconn_do_writemore+0x3c>
 800b55a:	4b9e      	ldr	r3, [pc, #632]	; (800b7d4 <lwip_netconn_do_writemore+0x2a8>)
 800b55c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800b560:	499f      	ldr	r1, [pc, #636]	; (800b7e0 <lwip_netconn_do_writemore+0x2b4>)
 800b562:	489e      	ldr	r0, [pc, #632]	; (800b7dc <lwip_netconn_do_writemore+0x2b0>)
 800b564:	f00a fb80 	bl	8015c68 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d106      	bne.n	800b57e <lwip_netconn_do_writemore+0x52>
 800b570:	4b98      	ldr	r3, [pc, #608]	; (800b7d4 <lwip_netconn_do_writemore+0x2a8>)
 800b572:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800b576:	499b      	ldr	r1, [pc, #620]	; (800b7e4 <lwip_netconn_do_writemore+0x2b8>)
 800b578:	4898      	ldr	r0, [pc, #608]	; (800b7dc <lwip_netconn_do_writemore+0x2b0>)
 800b57a:	f00a fb75 	bl	8015c68 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d106      	bne.n	800b594 <lwip_netconn_do_writemore+0x68>
 800b586:	4b93      	ldr	r3, [pc, #588]	; (800b7d4 <lwip_netconn_do_writemore+0x2a8>)
 800b588:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800b58c:	4996      	ldr	r1, [pc, #600]	; (800b7e8 <lwip_netconn_do_writemore+0x2bc>)
 800b58e:	4893      	ldr	r0, [pc, #588]	; (800b7dc <lwip_netconn_do_writemore+0x2b0>)
 800b590:	f00a fb6a 	bl	8015c68 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a1a      	ldr	r2, [r3, #32]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d306      	bcc.n	800b5b0 <lwip_netconn_do_writemore+0x84>
 800b5a2:	4b8c      	ldr	r3, [pc, #560]	; (800b7d4 <lwip_netconn_do_writemore+0x2a8>)
 800b5a4:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800b5a8:	4990      	ldr	r1, [pc, #576]	; (800b7ec <lwip_netconn_do_writemore+0x2c0>)
 800b5aa:	488c      	ldr	r0, [pc, #560]	; (800b7dc <lwip_netconn_do_writemore+0x2b0>)
 800b5ac:	f00a fb5c 	bl	8015c68 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	7c1b      	ldrb	r3, [r3, #16]
 800b5b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7f1b      	ldrb	r3, [r3, #28]
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d105      	bne.n	800b5d2 <lwip_netconn_do_writemore+0xa6>
 800b5c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5ca:	f003 0304 	and.w	r3, r3, #4
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <lwip_netconn_do_writemore+0xaa>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <lwip_netconn_do_writemore+0xac>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	68da      	ldr	r2, [r3, #12]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5fe:	d309      	bcc.n	800b614 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800b600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b604:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800b606:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b60a:	f043 0302 	orr.w	r3, r3, #2
 800b60e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b612:	e001      	b.n	800b618 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b620:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800b622:	8afa      	ldrh	r2, [r7, #22]
 800b624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b626:	429a      	cmp	r2, r3
 800b628:	d212      	bcs.n	800b650 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800b62a:	8afb      	ldrh	r3, [r7, #22]
 800b62c:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800b62e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b632:	2b00      	cmp	r3, #0
 800b634:	d006      	beq.n	800b644 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800b636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d109      	bne.n	800b650 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800b63c:	23f9      	movs	r3, #249	; 0xf9
 800b63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800b642:	e02a      	b.n	800b69a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b644:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b648:	f043 0302 	orr.w	r3, r3, #2
 800b64c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1a      	ldr	r2, [r3, #32]
 800b654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b656:	441a      	add	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d906      	bls.n	800b670 <lwip_netconn_do_writemore+0x144>
 800b662:	4b5c      	ldr	r3, [pc, #368]	; (800b7d4 <lwip_netconn_do_writemore+0x2a8>)
 800b664:	f240 6213 	movw	r2, #1555	; 0x613
 800b668:	4961      	ldr	r1, [pc, #388]	; (800b7f0 <lwip_netconn_do_writemore+0x2c4>)
 800b66a:	485c      	ldr	r0, [pc, #368]	; (800b7dc <lwip_netconn_do_writemore+0x2b0>)
 800b66c:	f00a fafc 	bl	8015c68 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6858      	ldr	r0, [r3, #4]
 800b674:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b67a:	69f9      	ldr	r1, [r7, #28]
 800b67c:	f006 f912 	bl	80118a4 <tcp_write>
 800b680:	4603      	mov	r3, r0
 800b682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b686:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <lwip_netconn_do_writemore+0x16c>
 800b68e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b696:	d133      	bne.n	800b700 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800b698:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800b69a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d017      	beq.n	800b6d2 <lwip_netconn_do_writemore+0x1a6>
 800b6a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d211      	bcs.n	800b6d2 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d005      	beq.n	800b6c2 <lwip_netconn_do_writemore+0x196>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6bc:	2103      	movs	r1, #3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	7f1b      	ldrb	r3, [r3, #28]
 800b6c6:	f043 0310 	orr.w	r3, r3, #16
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	771a      	strb	r2, [r3, #28]
 800b6d0:	e016      	b.n	800b700 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b6de:	d305      	bcc.n	800b6ec <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d909      	bls.n	800b700 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <lwip_netconn_do_writemore+0x1d4>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6fa:	2103      	movs	r1, #3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b700:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b704:	2b00      	cmp	r3, #0
 800b706:	d134      	bne.n	800b772 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a1a      	ldr	r2, [r3, #32]
 800b70c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b70e:	441a      	add	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d003      	beq.n	800b72a <lwip_netconn_do_writemore+0x1fe>
 800b722:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b726:	2b00      	cmp	r3, #0
 800b728:	d007      	beq.n	800b73a <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6a12      	ldr	r2, [r2, #32]
 800b732:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	4618      	mov	r0, r3
 800b740:	f006 fd62 	bl	8012208 <tcp_output>
 800b744:	4603      	mov	r3, r0
 800b746:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800b748:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800b74c:	f113 0f0c 	cmn.w	r3, #12
 800b750:	db04      	blt.n	800b75c <lwip_netconn_do_writemore+0x230>
 800b752:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800b756:	f113 0f04 	cmn.w	r3, #4
 800b75a:	d152      	bne.n	800b802 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b75c:	7d3b      	ldrb	r3, [r7, #20]
 800b75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2200      	movs	r2, #0
 800b76e:	60da      	str	r2, [r3, #12]
 800b770:	e047      	b.n	800b802 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800b772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77a:	d13b      	bne.n	800b7f4 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4618      	mov	r0, r3
 800b782:	f006 fd41 	bl	8012208 <tcp_output>
 800b786:	4603      	mov	r3, r0
 800b788:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800b78a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b78e:	f113 0f0c 	cmn.w	r3, #12
 800b792:	db04      	blt.n	800b79e <lwip_netconn_do_writemore+0x272>
 800b794:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b798:	f113 0f04 	cmn.w	r3, #4
 800b79c:	d10a      	bne.n	800b7b4 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b79e:	7d7b      	ldrb	r3, [r7, #21]
 800b7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	60da      	str	r2, [r3, #12]
 800b7b2:	e026      	b.n	800b802 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800b7b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d022      	beq.n	800b802 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800b7bc:	23f9      	movs	r3, #249	; 0xf9
 800b7be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	60da      	str	r2, [r3, #12]
 800b7d0:	e017      	b.n	800b802 <lwip_netconn_do_writemore+0x2d6>
 800b7d2:	bf00      	nop
 800b7d4:	0801753c 	.word	0x0801753c
 800b7d8:	08017660 	.word	0x08017660
 800b7dc:	08017594 	.word	0x08017594
 800b7e0:	08017940 	.word	0x08017940
 800b7e4:	08017670 	.word	0x08017670
 800b7e8:	08017960 	.word	0x08017960
 800b7ec:	08017978 	.word	0x08017978
 800b7f0:	080179ac 	.word	0x080179ac
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2200      	movs	r2, #0
 800b800:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800b802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b806:	2b00      	cmp	r3, #0
 800b808:	d02c      	beq.n	800b864 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	330c      	adds	r3, #12
 800b812:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b81c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00f      	beq.n	800b856 <lwip_netconn_do_writemore+0x32a>
 800b836:	f00a f9af 	bl	8015b98 <sys_arch_protect>
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b842:	f113 0f0c 	cmn.w	r3, #12
 800b846:	db03      	blt.n	800b850 <lwip_netconn_do_writemore+0x324>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b84e:	721a      	strb	r2, [r3, #8]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f00a f9af 	bl	8015bb4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b856:	78fb      	ldrb	r3, [r7, #3]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d006      	beq.n	800b86a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b85c:	6938      	ldr	r0, [r7, #16]
 800b85e:	f00a f8f6 	bl	8015a4e <sys_sem_signal>
 800b862:	e002      	b.n	800b86a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b864:	f04f 33ff 	mov.w	r3, #4294967295
 800b868:	e000      	b.n	800b86c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3728      	adds	r7, #40	; 0x28
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b888:	f113 0f0c 	cmn.w	r3, #12
 800b88c:	da06      	bge.n	800b89c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	711a      	strb	r2, [r3, #4]
 800b89a:	e072      	b.n	800b982 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8a6:	2b10      	cmp	r3, #16
 800b8a8:	d168      	bne.n	800b97c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	785b      	ldrb	r3, [r3, #1]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	22fb      	movs	r2, #251	; 0xfb
 800b8b8:	711a      	strb	r2, [r3, #4]
 800b8ba:	e062      	b.n	800b982 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d056      	beq.n	800b974 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <lwip_netconn_do_write+0x6e>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d006      	beq.n	800b8f0 <lwip_netconn_do_write+0x7c>
 800b8e2:	4b36      	ldr	r3, [pc, #216]	; (800b9bc <lwip_netconn_do_write+0x148>)
 800b8e4:	f240 6283 	movw	r2, #1667	; 0x683
 800b8e8:	4935      	ldr	r1, [pc, #212]	; (800b9c0 <lwip_netconn_do_write+0x14c>)
 800b8ea:	4836      	ldr	r0, [pc, #216]	; (800b9c4 <lwip_netconn_do_write+0x150>)
 800b8ec:	f00a f9bc 	bl	8015c68 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <lwip_netconn_do_write+0x92>
 800b8f8:	4b30      	ldr	r3, [pc, #192]	; (800b9bc <lwip_netconn_do_write+0x148>)
 800b8fa:	f240 6284 	movw	r2, #1668	; 0x684
 800b8fe:	4932      	ldr	r1, [pc, #200]	; (800b9c8 <lwip_netconn_do_write+0x154>)
 800b900:	4830      	ldr	r0, [pc, #192]	; (800b9c4 <lwip_netconn_do_write+0x150>)
 800b902:	f00a f9b1 	bl	8015c68 <iprintf>
        msg->conn->current_msg = msg;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2200      	movs	r2, #0
 800b914:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2100      	movs	r1, #0
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff fe05 	bl	800b52c <lwip_netconn_do_writemore>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d044      	beq.n	800b9b2 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d006      	beq.n	800b940 <lwip_netconn_do_write+0xcc>
 800b932:	4b22      	ldr	r3, [pc, #136]	; (800b9bc <lwip_netconn_do_write+0x148>)
 800b934:	f240 6289 	movw	r2, #1673	; 0x689
 800b938:	4924      	ldr	r1, [pc, #144]	; (800b9cc <lwip_netconn_do_write+0x158>)
 800b93a:	4822      	ldr	r0, [pc, #136]	; (800b9c4 <lwip_netconn_do_write+0x150>)
 800b93c:	f00a f994 	bl	8015c68 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b940:	4823      	ldr	r0, [pc, #140]	; (800b9d0 <lwip_netconn_do_write+0x15c>)
 800b942:	f00a f8f6 	bl	8015b32 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	330c      	adds	r3, #12
 800b94c:	2100      	movs	r1, #0
 800b94e:	4618      	mov	r0, r3
 800b950:	f00a f84c 	bl	80159ec <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b954:	481e      	ldr	r0, [pc, #120]	; (800b9d0 <lwip_netconn_do_write+0x15c>)
 800b956:	f00a f8dd 	bl	8015b14 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d126      	bne.n	800b9b2 <lwip_netconn_do_write+0x13e>
 800b964:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <lwip_netconn_do_write+0x148>)
 800b966:	f240 628d 	movw	r2, #1677	; 0x68d
 800b96a:	4918      	ldr	r1, [pc, #96]	; (800b9cc <lwip_netconn_do_write+0x158>)
 800b96c:	4815      	ldr	r0, [pc, #84]	; (800b9c4 <lwip_netconn_do_write+0x150>)
 800b96e:	f00a f97b 	bl	8015c68 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b972:	e01e      	b.n	800b9b2 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	22f5      	movs	r2, #245	; 0xf5
 800b978:	711a      	strb	r2, [r3, #4]
 800b97a:	e002      	b.n	800b982 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	22fa      	movs	r2, #250	; 0xfa
 800b980:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d014      	beq.n	800b9b4 <lwip_netconn_do_write+0x140>
 800b98a:	f00a f905 	bl	8015b98 <sys_arch_protect>
 800b98e:	60b8      	str	r0, [r7, #8]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b998:	f113 0f0c 	cmn.w	r3, #12
 800b99c:	db05      	blt.n	800b9aa <lwip_netconn_do_write+0x136>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b9a8:	721a      	strb	r2, [r3, #8]
 800b9aa:	68b8      	ldr	r0, [r7, #8]
 800b9ac:	f00a f902 	bl	8015bb4 <sys_arch_unprotect>
 800b9b0:	e000      	b.n	800b9b4 <lwip_netconn_do_write+0x140>
        return;
 800b9b2:	bf00      	nop
}
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0801753c 	.word	0x0801753c
 800b9c0:	08017884 	.word	0x08017884
 800b9c4:	08017594 	.word	0x08017594
 800b9c8:	080179d8 	.word	0x080179d8
 800b9cc:	080178a0 	.word	0x080178a0
 800b9d0:	200079ec 	.word	0x200079ec

0800b9d4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	785b      	ldrb	r3, [r3, #1]
 800b9e6:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d06e      	beq.n	800bad0 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b9fc:	2b10      	cmp	r3, #16
 800b9fe:	d167      	bne.n	800bad0 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d002      	beq.n	800ba0e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ba08:	7cfb      	ldrb	r3, [r7, #19]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d060      	beq.n	800bad0 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ba0e:	7cfb      	ldrb	r3, [r7, #19]
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d103      	bne.n	800ba1c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	22f5      	movs	r2, #245	; 0xf5
 800ba18:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ba1a:	e05c      	b.n	800bad6 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800ba1c:	7cfb      	ldrb	r3, [r7, #19]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d103      	bne.n	800ba2a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	22fb      	movs	r2, #251	; 0xfb
 800ba26:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ba28:	e055      	b.n	800bad6 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	7a1b      	ldrb	r3, [r3, #8]
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff f90e 	bl	800ac5c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <lwip_netconn_do_close+0x80>
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6a1b      	ldr	r3, [r3, #32]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d006      	beq.n	800ba62 <lwip_netconn_do_close+0x8e>
 800ba54:	4b2e      	ldr	r3, [pc, #184]	; (800bb10 <lwip_netconn_do_close+0x13c>)
 800ba56:	f240 721c 	movw	r2, #1820	; 0x71c
 800ba5a:	492e      	ldr	r1, [pc, #184]	; (800bb14 <lwip_netconn_do_close+0x140>)
 800ba5c:	482e      	ldr	r0, [pc, #184]	; (800bb18 <lwip_netconn_do_close+0x144>)
 800ba5e:	f00a f903 	bl	8015c68 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2204      	movs	r2, #4
 800ba68:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff f96f 	bl	800ad5c <lwip_netconn_do_close_internal>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d040      	beq.n	800bb06 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	d006      	beq.n	800ba9c <lwip_netconn_do_close+0xc8>
 800ba8e:	4b20      	ldr	r3, [pc, #128]	; (800bb10 <lwip_netconn_do_close+0x13c>)
 800ba90:	f240 7221 	movw	r2, #1825	; 0x721
 800ba94:	4921      	ldr	r1, [pc, #132]	; (800bb1c <lwip_netconn_do_close+0x148>)
 800ba96:	4820      	ldr	r0, [pc, #128]	; (800bb18 <lwip_netconn_do_close+0x144>)
 800ba98:	f00a f8e6 	bl	8015c68 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ba9c:	4820      	ldr	r0, [pc, #128]	; (800bb20 <lwip_netconn_do_close+0x14c>)
 800ba9e:	f00a f848 	bl	8015b32 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	2100      	movs	r1, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f009 ff9e 	bl	80159ec <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bab0:	481b      	ldr	r0, [pc, #108]	; (800bb20 <lwip_netconn_do_close+0x14c>)
 800bab2:	f00a f82f 	bl	8015b14 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	785b      	ldrb	r3, [r3, #1]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d022      	beq.n	800bb06 <lwip_netconn_do_close+0x132>
 800bac0:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <lwip_netconn_do_close+0x13c>)
 800bac2:	f240 7225 	movw	r2, #1829	; 0x725
 800bac6:	4915      	ldr	r1, [pc, #84]	; (800bb1c <lwip_netconn_do_close+0x148>)
 800bac8:	4813      	ldr	r0, [pc, #76]	; (800bb18 <lwip_netconn_do_close+0x144>)
 800baca:	f00a f8cd 	bl	8015c68 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bace:	e01a      	b.n	800bb06 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	22f5      	movs	r2, #245	; 0xf5
 800bad4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d014      	beq.n	800bb08 <lwip_netconn_do_close+0x134>
 800bade:	f00a f85b 	bl	8015b98 <sys_arch_protect>
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800baec:	f113 0f0c 	cmn.w	r3, #12
 800baf0:	db05      	blt.n	800bafe <lwip_netconn_do_close+0x12a>
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800bafc:	721a      	strb	r2, [r3, #8]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f00a f858 	bl	8015bb4 <sys_arch_unprotect>
 800bb04:	e000      	b.n	800bb08 <lwip_netconn_do_close+0x134>
      return;
 800bb06:	bf00      	nop
}
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	0801753c 	.word	0x0801753c
 800bb14:	08017884 	.word	0x08017884
 800bb18:	08017594 	.word	0x08017594
 800bb1c:	080178a0 	.word	0x080178a0
 800bb20:	200079ec 	.word	0x200079ec

0800bb24 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d013      	beq.n	800bb5a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00b      	beq.n	800bb52 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f001 fbb2 	bl	800d2a8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	605a      	str	r2, [r3, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	2006      	movs	r0, #6
 800bb56:	f000 fe4d 	bl	800c7f4 <memp_free>
  }
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
	...

0800bb64 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d108      	bne.n	800bb88 <netbuf_data+0x24>
 800bb76:	4b1b      	ldr	r3, [pc, #108]	; (800bbe4 <netbuf_data+0x80>)
 800bb78:	22c2      	movs	r2, #194	; 0xc2
 800bb7a:	491b      	ldr	r1, [pc, #108]	; (800bbe8 <netbuf_data+0x84>)
 800bb7c:	481b      	ldr	r0, [pc, #108]	; (800bbec <netbuf_data+0x88>)
 800bb7e:	f00a f873 	bl	8015c68 <iprintf>
 800bb82:	f06f 030f 	mvn.w	r3, #15
 800bb86:	e029      	b.n	800bbdc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d108      	bne.n	800bba0 <netbuf_data+0x3c>
 800bb8e:	4b15      	ldr	r3, [pc, #84]	; (800bbe4 <netbuf_data+0x80>)
 800bb90:	22c3      	movs	r2, #195	; 0xc3
 800bb92:	4917      	ldr	r1, [pc, #92]	; (800bbf0 <netbuf_data+0x8c>)
 800bb94:	4815      	ldr	r0, [pc, #84]	; (800bbec <netbuf_data+0x88>)
 800bb96:	f00a f867 	bl	8015c68 <iprintf>
 800bb9a:	f06f 030f 	mvn.w	r3, #15
 800bb9e:	e01d      	b.n	800bbdc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d108      	bne.n	800bbb8 <netbuf_data+0x54>
 800bba6:	4b0f      	ldr	r3, [pc, #60]	; (800bbe4 <netbuf_data+0x80>)
 800bba8:	22c4      	movs	r2, #196	; 0xc4
 800bbaa:	4912      	ldr	r1, [pc, #72]	; (800bbf4 <netbuf_data+0x90>)
 800bbac:	480f      	ldr	r0, [pc, #60]	; (800bbec <netbuf_data+0x88>)
 800bbae:	f00a f85b 	bl	8015c68 <iprintf>
 800bbb2:	f06f 030f 	mvn.w	r3, #15
 800bbb6:	e011      	b.n	800bbdc <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <netbuf_data+0x62>
    return ERR_BUF;
 800bbc0:	f06f 0301 	mvn.w	r3, #1
 800bbc4:	e00a      	b.n	800bbdc <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	895a      	ldrh	r2, [r3, #10]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	08017a04 	.word	0x08017a04
 800bbe8:	08017b0c 	.word	0x08017b0c
 800bbec:	08017a54 	.word	0x08017a54
 800bbf0:	08017b28 	.word	0x08017b28
 800bbf4:	08017b48 	.word	0x08017b48

0800bbf8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800bc00:	4b29      	ldr	r3, [pc, #164]	; (800bca8 <tcpip_thread+0xb0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800bc08:	4b27      	ldr	r3, [pc, #156]	; (800bca8 <tcpip_thread+0xb0>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a27      	ldr	r2, [pc, #156]	; (800bcac <tcpip_thread+0xb4>)
 800bc0e:	6812      	ldr	r2, [r2, #0]
 800bc10:	4610      	mov	r0, r2
 800bc12:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800bc14:	4826      	ldr	r0, [pc, #152]	; (800bcb0 <tcpip_thread+0xb8>)
 800bc16:	f009 ff7d 	bl	8015b14 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800bc1a:	4825      	ldr	r0, [pc, #148]	; (800bcb0 <tcpip_thread+0xb8>)
 800bc1c:	f009 ff89 	bl	8015b32 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	4619      	mov	r1, r3
 800bc26:	4823      	ldr	r0, [pc, #140]	; (800bcb4 <tcpip_thread+0xbc>)
 800bc28:	f007 f944 	bl	8012eb4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bc2c:	4820      	ldr	r0, [pc, #128]	; (800bcb0 <tcpip_thread+0xb8>)
 800bc2e:	f009 ff71 	bl	8015b14 <sys_mutex_lock>
    if (msg == NULL) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc38:	4b1f      	ldr	r3, [pc, #124]	; (800bcb8 <tcpip_thread+0xc0>)
 800bc3a:	2269      	movs	r2, #105	; 0x69
 800bc3c:	491f      	ldr	r1, [pc, #124]	; (800bcbc <tcpip_thread+0xc4>)
 800bc3e:	4820      	ldr	r0, [pc, #128]	; (800bcc0 <tcpip_thread+0xc8>)
 800bc40:	f00a f812 	bl	8015c68 <iprintf>
      continue;
 800bc44:	e02f      	b.n	800bca6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d011      	beq.n	800bc72 <tcpip_thread+0x7a>
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	d01b      	beq.n	800bc8a <tcpip_thread+0x92>
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d120      	bne.n	800bc98 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	6850      	ldr	r0, [r2, #4]
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	6892      	ldr	r2, [r2, #8]
 800bc62:	4611      	mov	r1, r2
 800bc64:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	2009      	movs	r0, #9
 800bc6c:	f000 fdc2 	bl	800c7f4 <memp_free>
      break;
 800bc70:	e019      	b.n	800bca6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	6892      	ldr	r2, [r2, #8]
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4619      	mov	r1, r3
 800bc82:	2008      	movs	r0, #8
 800bc84:	f000 fdb6 	bl	800c7f4 <memp_free>
      break;
 800bc88:	e00d      	b.n	800bca6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	6892      	ldr	r2, [r2, #8]
 800bc92:	4610      	mov	r0, r2
 800bc94:	4798      	blx	r3
      break;
 800bc96:	e006      	b.n	800bca6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc98:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <tcpip_thread+0xc0>)
 800bc9a:	229b      	movs	r2, #155	; 0x9b
 800bc9c:	4907      	ldr	r1, [pc, #28]	; (800bcbc <tcpip_thread+0xc4>)
 800bc9e:	4808      	ldr	r0, [pc, #32]	; (800bcc0 <tcpip_thread+0xc8>)
 800bca0:	f009 ffe2 	bl	8015c68 <iprintf>
      break;
 800bca4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800bca6:	e7b8      	b.n	800bc1a <tcpip_thread+0x22>
 800bca8:	200041cc 	.word	0x200041cc
 800bcac:	200041d0 	.word	0x200041d0
 800bcb0:	200079ec 	.word	0x200079ec
 800bcb4:	200041d4 	.word	0x200041d4
 800bcb8:	08017b9c 	.word	0x08017b9c
 800bcbc:	08017bcc 	.word	0x08017bcc
 800bcc0:	08017bec 	.word	0x08017bec

0800bcc4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800bcd0:	481a      	ldr	r0, [pc, #104]	; (800bd3c <tcpip_inpkt+0x78>)
 800bcd2:	f009 fe45 	bl	8015960 <sys_mbox_valid>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <tcpip_inpkt+0x24>
 800bcdc:	4b18      	ldr	r3, [pc, #96]	; (800bd40 <tcpip_inpkt+0x7c>)
 800bcde:	22b5      	movs	r2, #181	; 0xb5
 800bce0:	4918      	ldr	r1, [pc, #96]	; (800bd44 <tcpip_inpkt+0x80>)
 800bce2:	4819      	ldr	r0, [pc, #100]	; (800bd48 <tcpip_inpkt+0x84>)
 800bce4:	f009 ffc0 	bl	8015c68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bce8:	2009      	movs	r0, #9
 800bcea:	f000 fd31 	bl	800c750 <memp_malloc>
 800bcee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bcf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfa:	e01a      	b.n	800bd32 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2202      	movs	r2, #2
 800bd00:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800bd14:	6979      	ldr	r1, [r7, #20]
 800bd16:	4809      	ldr	r0, [pc, #36]	; (800bd3c <tcpip_inpkt+0x78>)
 800bd18:	f009 fdad 	bl	8015876 <sys_mbox_trypost>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d006      	beq.n	800bd30 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bd22:	6979      	ldr	r1, [r7, #20]
 800bd24:	2009      	movs	r0, #9
 800bd26:	f000 fd65 	bl	800c7f4 <memp_free>
    return ERR_MEM;
 800bd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2e:	e000      	b.n	800bd32 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bd30:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	200041d4 	.word	0x200041d4
 800bd40:	08017b9c 	.word	0x08017b9c
 800bd44:	08017c14 	.word	0x08017c14
 800bd48:	08017bec 	.word	0x08017bec

0800bd4c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd5c:	f003 0318 	and.w	r3, r3, #24
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d006      	beq.n	800bd72 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bd64:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <tcpip_input+0x3c>)
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff ffab 	bl	800bcc4 <tcpip_inpkt>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	e005      	b.n	800bd7e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800bd72:	4a06      	ldr	r2, [pc, #24]	; (800bd8c <tcpip_input+0x40>)
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff ffa4 	bl	800bcc4 <tcpip_inpkt>
 800bd7c:	4603      	mov	r3, r0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	0801562d 	.word	0x0801562d
 800bd8c:	080145f1 	.word	0x080145f1

0800bd90 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800bd9e:	481d      	ldr	r0, [pc, #116]	; (800be14 <tcpip_callback_with_block+0x84>)
 800bda0:	f009 fdde 	bl	8015960 <sys_mbox_valid>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d105      	bne.n	800bdb6 <tcpip_callback_with_block+0x26>
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <tcpip_callback_with_block+0x88>)
 800bdac:	22ee      	movs	r2, #238	; 0xee
 800bdae:	491b      	ldr	r1, [pc, #108]	; (800be1c <tcpip_callback_with_block+0x8c>)
 800bdb0:	481b      	ldr	r0, [pc, #108]	; (800be20 <tcpip_callback_with_block+0x90>)
 800bdb2:	f009 ff59 	bl	8015c68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bdb6:	2008      	movs	r0, #8
 800bdb8:	f000 fcca 	bl	800c750 <memp_malloc>
 800bdbc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800bdc4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc8:	e01f      	b.n	800be0a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	609a      	str	r2, [r3, #8]
  if (block) {
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d004      	beq.n	800bdec <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800bde2:	6979      	ldr	r1, [r7, #20]
 800bde4:	480b      	ldr	r0, [pc, #44]	; (800be14 <tcpip_callback_with_block+0x84>)
 800bde6:	f009 fd31 	bl	801584c <sys_mbox_post>
 800bdea:	e00d      	b.n	800be08 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800bdec:	6979      	ldr	r1, [r7, #20]
 800bdee:	4809      	ldr	r0, [pc, #36]	; (800be14 <tcpip_callback_with_block+0x84>)
 800bdf0:	f009 fd41 	bl	8015876 <sys_mbox_trypost>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d006      	beq.n	800be08 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bdfa:	6979      	ldr	r1, [r7, #20]
 800bdfc:	2008      	movs	r0, #8
 800bdfe:	f000 fcf9 	bl	800c7f4 <memp_free>
      return ERR_MEM;
 800be02:	f04f 33ff 	mov.w	r3, #4294967295
 800be06:	e000      	b.n	800be0a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	200041d4 	.word	0x200041d4
 800be18:	08017b9c 	.word	0x08017b9c
 800be1c:	08017c14 	.word	0x08017c14
 800be20:	08017bec 	.word	0x08017bec

0800be24 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800be30:	4806      	ldr	r0, [pc, #24]	; (800be4c <tcpip_send_msg_wait_sem+0x28>)
 800be32:	f009 fe6f 	bl	8015b14 <sys_mutex_lock>
  fn(apimsg);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	68b8      	ldr	r0, [r7, #8]
 800be3a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800be3c:	4803      	ldr	r0, [pc, #12]	; (800be4c <tcpip_send_msg_wait_sem+0x28>)
 800be3e:	f009 fe78 	bl	8015b32 <sys_mutex_unlock>
  return ERR_OK;
 800be42:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	200079ec 	.word	0x200079ec

0800be50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af02      	add	r7, sp, #8
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  lwip_init();
 800be5a:	f000 f8b2 	bl	800bfc2 <lwip_init>

  tcpip_init_done = initfunc;
 800be5e:	4a17      	ldr	r2, [pc, #92]	; (800bebc <tcpip_init+0x6c>)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800be64:	4a16      	ldr	r2, [pc, #88]	; (800bec0 <tcpip_init+0x70>)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800be6a:	2106      	movs	r1, #6
 800be6c:	4815      	ldr	r0, [pc, #84]	; (800bec4 <tcpip_init+0x74>)
 800be6e:	f009 fcb9 	bl	80157e4 <sys_mbox_new>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d006      	beq.n	800be86 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800be78:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <tcpip_init+0x78>)
 800be7a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800be7e:	4913      	ldr	r1, [pc, #76]	; (800becc <tcpip_init+0x7c>)
 800be80:	4813      	ldr	r0, [pc, #76]	; (800bed0 <tcpip_init+0x80>)
 800be82:	f009 fef1 	bl	8015c68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800be86:	4813      	ldr	r0, [pc, #76]	; (800bed4 <tcpip_init+0x84>)
 800be88:	f009 fe28 	bl	8015adc <sys_mutex_new>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d006      	beq.n	800bea0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800be92:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <tcpip_init+0x78>)
 800be94:	f240 12d9 	movw	r2, #473	; 0x1d9
 800be98:	490f      	ldr	r1, [pc, #60]	; (800bed8 <tcpip_init+0x88>)
 800be9a:	480d      	ldr	r0, [pc, #52]	; (800bed0 <tcpip_init+0x80>)
 800be9c:	f009 fee4 	bl	8015c68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bea0:	2300      	movs	r3, #0
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bea8:	2200      	movs	r2, #0
 800beaa:	490c      	ldr	r1, [pc, #48]	; (800bedc <tcpip_init+0x8c>)
 800beac:	480c      	ldr	r0, [pc, #48]	; (800bee0 <tcpip_init+0x90>)
 800beae:	f009 fe4d 	bl	8015b4c <sys_thread_new>
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	200041cc 	.word	0x200041cc
 800bec0:	200041d0 	.word	0x200041d0
 800bec4:	200041d4 	.word	0x200041d4
 800bec8:	08017b9c 	.word	0x08017b9c
 800becc:	08017c24 	.word	0x08017c24
 800bed0:	08017bec 	.word	0x08017bec
 800bed4:	200079ec 	.word	0x200079ec
 800bed8:	08017c48 	.word	0x08017c48
 800bedc:	0800bbf9 	.word	0x0800bbf9
 800bee0:	08017c6c 	.word	0x08017c6c

0800bee4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <fs_open+0x16>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <fs_open+0x1c>
     return ERR_ARG;
 800befa:	f06f 030f 	mvn.w	r3, #15
 800befe:	e028      	b.n	800bf52 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800bf00:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <fs_open+0x78>)
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	e020      	b.n	800bf48 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6838      	ldr	r0, [r7, #0]
 800bf0e:	f7f4 f97f 	bl	8000210 <strcmp>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d114      	bne.n	800bf42 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	689a      	ldr	r2, [r3, #8]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	68da      	ldr	r2, [r3, #12]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	7c1a      	ldrb	r2, [r3, #16]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e007      	b.n	800bf52 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	60fb      	str	r3, [r7, #12]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1db      	bne.n	800bf06 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800bf4e:	f06f 0305 	mvn.w	r3, #5
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0801d4b8 	.word	0x0801d4b8

0800bf60 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800bf7e:	88fb      	ldrh	r3, [r7, #6]
 800bf80:	ba5b      	rev16	r3, r3
 800bf82:	b29b      	uxth	r3, r3
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	061a      	lsls	r2, r3, #24
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	021b      	lsls	r3, r3, #8
 800bfa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfa4:	431a      	orrs	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	0a1b      	lsrs	r3, r3, #8
 800bfaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	0e1b      	lsrs	r3, r3, #24
 800bfb4:	4313      	orrs	r3, r2
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bfcc:	f009 fd78 	bl	8015ac0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bfd0:	f000 f8a6 	bl	800c120 <mem_init>
  memp_init();
 800bfd4:	f000 fb70 	bl	800c6b8 <memp_init>
  pbuf_init();
  netif_init();
 800bfd8:	f000 fc36 	bl	800c848 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bfdc:	f006 ff90 	bl	8012f00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bfe0:	f001 fbd8 	bl	800d794 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800bfe4:	f006 fe22 	bl	8012c2c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bff8:	4b40      	ldr	r3, [pc, #256]	; (800c0fc <plug_holes+0x10c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d206      	bcs.n	800c010 <plug_holes+0x20>
 800c002:	4b3f      	ldr	r3, [pc, #252]	; (800c100 <plug_holes+0x110>)
 800c004:	f240 125d 	movw	r2, #349	; 0x15d
 800c008:	493e      	ldr	r1, [pc, #248]	; (800c104 <plug_holes+0x114>)
 800c00a:	483f      	ldr	r0, [pc, #252]	; (800c108 <plug_holes+0x118>)
 800c00c:	f009 fe2c 	bl	8015c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c010:	4b3e      	ldr	r3, [pc, #248]	; (800c10c <plug_holes+0x11c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	429a      	cmp	r2, r3
 800c018:	d306      	bcc.n	800c028 <plug_holes+0x38>
 800c01a:	4b39      	ldr	r3, [pc, #228]	; (800c100 <plug_holes+0x110>)
 800c01c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c020:	493b      	ldr	r1, [pc, #236]	; (800c110 <plug_holes+0x120>)
 800c022:	4839      	ldr	r0, [pc, #228]	; (800c108 <plug_holes+0x118>)
 800c024:	f009 fe20 	bl	8015c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	791b      	ldrb	r3, [r3, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d006      	beq.n	800c03e <plug_holes+0x4e>
 800c030:	4b33      	ldr	r3, [pc, #204]	; (800c100 <plug_holes+0x110>)
 800c032:	f240 125f 	movw	r2, #351	; 0x15f
 800c036:	4937      	ldr	r1, [pc, #220]	; (800c114 <plug_holes+0x124>)
 800c038:	4833      	ldr	r0, [pc, #204]	; (800c108 <plug_holes+0x118>)
 800c03a:	f009 fe15 	bl	8015c68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c046:	d906      	bls.n	800c056 <plug_holes+0x66>
 800c048:	4b2d      	ldr	r3, [pc, #180]	; (800c100 <plug_holes+0x110>)
 800c04a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c04e:	4932      	ldr	r1, [pc, #200]	; (800c118 <plug_holes+0x128>)
 800c050:	482d      	ldr	r0, [pc, #180]	; (800c108 <plug_holes+0x118>)
 800c052:	f009 fe09 	bl	8015c68 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c056:	4b29      	ldr	r3, [pc, #164]	; (800c0fc <plug_holes+0x10c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	8812      	ldrh	r2, [r2, #0]
 800c05e:	4413      	add	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	429a      	cmp	r2, r3
 800c068:	d01f      	beq.n	800c0aa <plug_holes+0xba>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	791b      	ldrb	r3, [r3, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d11b      	bne.n	800c0aa <plug_holes+0xba>
 800c072:	4b26      	ldr	r3, [pc, #152]	; (800c10c <plug_holes+0x11c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d016      	beq.n	800c0aa <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c07c:	4b27      	ldr	r3, [pc, #156]	; (800c11c <plug_holes+0x12c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	429a      	cmp	r2, r3
 800c084:	d102      	bne.n	800c08c <plug_holes+0x9c>
      lfree = mem;
 800c086:	4a25      	ldr	r2, [pc, #148]	; (800c11c <plug_holes+0x12c>)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	881a      	ldrh	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a19      	ldr	r2, [pc, #100]	; (800c0fc <plug_holes+0x10c>)
 800c098:	6812      	ldr	r2, [r2, #0]
 800c09a:	1a99      	subs	r1, r3, r2
 800c09c:	4b17      	ldr	r3, [pc, #92]	; (800c0fc <plug_holes+0x10c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	8812      	ldrh	r2, [r2, #0]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b28a      	uxth	r2, r1
 800c0a8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c0aa:	4b14      	ldr	r3, [pc, #80]	; (800c0fc <plug_holes+0x10c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	8852      	ldrh	r2, [r2, #2]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d01a      	beq.n	800c0f4 <plug_holes+0x104>
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	791b      	ldrb	r3, [r3, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d116      	bne.n	800c0f4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c0c6:	4b15      	ldr	r3, [pc, #84]	; (800c11c <plug_holes+0x12c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d102      	bne.n	800c0d6 <plug_holes+0xe6>
      lfree = pmem;
 800c0d0:	4a12      	ldr	r2, [pc, #72]	; (800c11c <plug_holes+0x12c>)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	881a      	ldrh	r2, [r3, #0]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	4a06      	ldr	r2, [pc, #24]	; (800c0fc <plug_holes+0x10c>)
 800c0e2:	6812      	ldr	r2, [r2, #0]
 800c0e4:	1a99      	subs	r1, r3, r2
 800c0e6:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <plug_holes+0x10c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	8812      	ldrh	r2, [r2, #0]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	b28a      	uxth	r2, r1
 800c0f2:	805a      	strh	r2, [r3, #2]
  }
}
 800c0f4:	bf00      	nop
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	200041d8 	.word	0x200041d8
 800c100:	08017c7c 	.word	0x08017c7c
 800c104:	08017cac 	.word	0x08017cac
 800c108:	08017cc4 	.word	0x08017cc4
 800c10c:	200041dc 	.word	0x200041dc
 800c110:	08017cec 	.word	0x08017cec
 800c114:	08017d08 	.word	0x08017d08
 800c118:	08017d24 	.word	0x08017d24
 800c11c:	200041e0 	.word	0x200041e0

0800c120 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c126:	4b1e      	ldr	r3, [pc, #120]	; (800c1a0 <mem_init+0x80>)
 800c128:	3303      	adds	r3, #3
 800c12a:	f023 0303 	bic.w	r3, r3, #3
 800c12e:	461a      	mov	r2, r3
 800c130:	4b1c      	ldr	r3, [pc, #112]	; (800c1a4 <mem_init+0x84>)
 800c132:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c134:	4b1b      	ldr	r3, [pc, #108]	; (800c1a4 <mem_init+0x84>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c140:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800c14e:	4b15      	ldr	r3, [pc, #84]	; (800c1a4 <mem_init+0x84>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c156:	4a14      	ldr	r2, [pc, #80]	; (800c1a8 <mem_init+0x88>)
 800c158:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c15a:	4b13      	ldr	r3, [pc, #76]	; (800c1a8 <mem_init+0x88>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2201      	movs	r2, #1
 800c160:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c162:	4b11      	ldr	r3, [pc, #68]	; (800c1a8 <mem_init+0x88>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c16a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c16c:	4b0e      	ldr	r3, [pc, #56]	; (800c1a8 <mem_init+0x88>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c174:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <mem_init+0x84>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a0c      	ldr	r2, [pc, #48]	; (800c1ac <mem_init+0x8c>)
 800c17c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c17e:	480c      	ldr	r0, [pc, #48]	; (800c1b0 <mem_init+0x90>)
 800c180:	f009 fcac 	bl	8015adc <sys_mutex_new>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d006      	beq.n	800c198 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c18a:	4b0a      	ldr	r3, [pc, #40]	; (800c1b4 <mem_init+0x94>)
 800c18c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c190:	4909      	ldr	r1, [pc, #36]	; (800c1b8 <mem_init+0x98>)
 800c192:	480a      	ldr	r0, [pc, #40]	; (800c1bc <mem_init+0x9c>)
 800c194:	f009 fd68 	bl	8015c68 <iprintf>
  }
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	20007a08 	.word	0x20007a08
 800c1a4:	200041d8 	.word	0x200041d8
 800c1a8:	200041dc 	.word	0x200041dc
 800c1ac:	200041e0 	.word	0x200041e0
 800c1b0:	200041e4 	.word	0x200041e4
 800c1b4:	08017c7c 	.word	0x08017c7c
 800c1b8:	08017d50 	.word	0x08017d50
 800c1bc:	08017cc4 	.word	0x08017cc4

0800c1c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d050      	beq.n	800c270 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f003 0303 	and.w	r3, r3, #3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d006      	beq.n	800c1e6 <mem_free+0x26>
 800c1d8:	4b27      	ldr	r3, [pc, #156]	; (800c278 <mem_free+0xb8>)
 800c1da:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800c1de:	4927      	ldr	r1, [pc, #156]	; (800c27c <mem_free+0xbc>)
 800c1e0:	4827      	ldr	r0, [pc, #156]	; (800c280 <mem_free+0xc0>)
 800c1e2:	f009 fd41 	bl	8015c68 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c1e6:	4b27      	ldr	r3, [pc, #156]	; (800c284 <mem_free+0xc4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d304      	bcc.n	800c1fa <mem_free+0x3a>
 800c1f0:	4b25      	ldr	r3, [pc, #148]	; (800c288 <mem_free+0xc8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d306      	bcc.n	800c208 <mem_free+0x48>
 800c1fa:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <mem_free+0xb8>)
 800c1fc:	f240 12af 	movw	r2, #431	; 0x1af
 800c200:	4922      	ldr	r1, [pc, #136]	; (800c28c <mem_free+0xcc>)
 800c202:	481f      	ldr	r0, [pc, #124]	; (800c280 <mem_free+0xc0>)
 800c204:	f009 fd30 	bl	8015c68 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c208:	4b1e      	ldr	r3, [pc, #120]	; (800c284 <mem_free+0xc4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d304      	bcc.n	800c21c <mem_free+0x5c>
 800c212:	4b1d      	ldr	r3, [pc, #116]	; (800c288 <mem_free+0xc8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d306      	bcc.n	800c22a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c21c:	f009 fcbc 	bl	8015b98 <sys_arch_protect>
 800c220:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c222:	68b8      	ldr	r0, [r7, #8]
 800c224:	f009 fcc6 	bl	8015bb4 <sys_arch_unprotect>
    return;
 800c228:	e023      	b.n	800c272 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c22a:	4819      	ldr	r0, [pc, #100]	; (800c290 <mem_free+0xd0>)
 800c22c:	f009 fc72 	bl	8015b14 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3b08      	subs	r3, #8
 800c234:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	791b      	ldrb	r3, [r3, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d106      	bne.n	800c24c <mem_free+0x8c>
 800c23e:	4b0e      	ldr	r3, [pc, #56]	; (800c278 <mem_free+0xb8>)
 800c240:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800c244:	4913      	ldr	r1, [pc, #76]	; (800c294 <mem_free+0xd4>)
 800c246:	480e      	ldr	r0, [pc, #56]	; (800c280 <mem_free+0xc0>)
 800c248:	f009 fd0e 	bl	8015c68 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c252:	4b11      	ldr	r3, [pc, #68]	; (800c298 <mem_free+0xd8>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d202      	bcs.n	800c262 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c25c:	4a0e      	ldr	r2, [pc, #56]	; (800c298 <mem_free+0xd8>)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f7ff fec4 	bl	800bff0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c268:	4809      	ldr	r0, [pc, #36]	; (800c290 <mem_free+0xd0>)
 800c26a:	f009 fc62 	bl	8015b32 <sys_mutex_unlock>
 800c26e:	e000      	b.n	800c272 <mem_free+0xb2>
    return;
 800c270:	bf00      	nop
}
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	08017c7c 	.word	0x08017c7c
 800c27c:	08017d6c 	.word	0x08017d6c
 800c280:	08017cc4 	.word	0x08017cc4
 800c284:	200041d8 	.word	0x200041d8
 800c288:	200041dc 	.word	0x200041dc
 800c28c:	08017d90 	.word	0x08017d90
 800c290:	200041e4 	.word	0x200041e4
 800c294:	08017da8 	.word	0x08017da8
 800c298:	200041e0 	.word	0x200041e0

0800c29c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800c2a8:	887b      	ldrh	r3, [r7, #2]
 800c2aa:	3303      	adds	r3, #3
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	f023 0303 	bic.w	r3, r3, #3
 800c2b2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800c2b4:	887b      	ldrh	r3, [r7, #2]
 800c2b6:	2b0b      	cmp	r3, #11
 800c2b8:	d801      	bhi.n	800c2be <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800c2be:	887b      	ldrh	r3, [r7, #2]
 800c2c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2c4:	d901      	bls.n	800c2ca <mem_trim+0x2e>
    return NULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e0bd      	b.n	800c446 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c2ca:	4b61      	ldr	r3, [pc, #388]	; (800c450 <mem_trim+0x1b4>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d304      	bcc.n	800c2de <mem_trim+0x42>
 800c2d4:	4b5f      	ldr	r3, [pc, #380]	; (800c454 <mem_trim+0x1b8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d306      	bcc.n	800c2ec <mem_trim+0x50>
 800c2de:	4b5e      	ldr	r3, [pc, #376]	; (800c458 <mem_trim+0x1bc>)
 800c2e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c2e4:	495d      	ldr	r1, [pc, #372]	; (800c45c <mem_trim+0x1c0>)
 800c2e6:	485e      	ldr	r0, [pc, #376]	; (800c460 <mem_trim+0x1c4>)
 800c2e8:	f009 fcbe 	bl	8015c68 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c2ec:	4b58      	ldr	r3, [pc, #352]	; (800c450 <mem_trim+0x1b4>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d304      	bcc.n	800c300 <mem_trim+0x64>
 800c2f6:	4b57      	ldr	r3, [pc, #348]	; (800c454 <mem_trim+0x1b8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d307      	bcc.n	800c310 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c300:	f009 fc4a 	bl	8015b98 <sys_arch_protect>
 800c304:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f009 fc54 	bl	8015bb4 <sys_arch_unprotect>
    return rmem;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	e09a      	b.n	800c446 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3b08      	subs	r3, #8
 800c314:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	4a4d      	ldr	r2, [pc, #308]	; (800c450 <mem_trim+0x1b4>)
 800c31a:	6812      	ldr	r2, [r2, #0]
 800c31c:	1a9b      	subs	r3, r3, r2
 800c31e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	881a      	ldrh	r2, [r3, #0]
 800c324:	8b7b      	ldrh	r3, [r7, #26]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b08      	subs	r3, #8
 800c32c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c32e:	887a      	ldrh	r2, [r7, #2]
 800c330:	8b3b      	ldrh	r3, [r7, #24]
 800c332:	429a      	cmp	r2, r3
 800c334:	d906      	bls.n	800c344 <mem_trim+0xa8>
 800c336:	4b48      	ldr	r3, [pc, #288]	; (800c458 <mem_trim+0x1bc>)
 800c338:	f240 2206 	movw	r2, #518	; 0x206
 800c33c:	4949      	ldr	r1, [pc, #292]	; (800c464 <mem_trim+0x1c8>)
 800c33e:	4848      	ldr	r0, [pc, #288]	; (800c460 <mem_trim+0x1c4>)
 800c340:	f009 fc92 	bl	8015c68 <iprintf>
  if (newsize > size) {
 800c344:	887a      	ldrh	r2, [r7, #2]
 800c346:	8b3b      	ldrh	r3, [r7, #24]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d901      	bls.n	800c350 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800c34c:	2300      	movs	r3, #0
 800c34e:	e07a      	b.n	800c446 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800c350:	887a      	ldrh	r2, [r7, #2]
 800c352:	8b3b      	ldrh	r3, [r7, #24]
 800c354:	429a      	cmp	r2, r3
 800c356:	d101      	bne.n	800c35c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	e074      	b.n	800c446 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c35c:	4842      	ldr	r0, [pc, #264]	; (800c468 <mem_trim+0x1cc>)
 800c35e:	f009 fbd9 	bl	8015b14 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800c362:	4b3b      	ldr	r3, [pc, #236]	; (800c450 <mem_trim+0x1b4>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	8812      	ldrh	r2, [r2, #0]
 800c36a:	4413      	add	r3, r2
 800c36c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	791b      	ldrb	r3, [r3, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d131      	bne.n	800c3da <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c37c:	8b7a      	ldrh	r2, [r7, #26]
 800c37e:	887b      	ldrh	r3, [r7, #2]
 800c380:	4413      	add	r3, r2
 800c382:	b29b      	uxth	r3, r3
 800c384:	3308      	adds	r3, #8
 800c386:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800c388:	4b38      	ldr	r3, [pc, #224]	; (800c46c <mem_trim+0x1d0>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d105      	bne.n	800c39e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c392:	4b2f      	ldr	r3, [pc, #188]	; (800c450 <mem_trim+0x1b4>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	8a7b      	ldrh	r3, [r7, #18]
 800c398:	4413      	add	r3, r2
 800c39a:	4a34      	ldr	r2, [pc, #208]	; (800c46c <mem_trim+0x1d0>)
 800c39c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c39e:	4b2c      	ldr	r3, [pc, #176]	; (800c450 <mem_trim+0x1b4>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	8a7b      	ldrh	r3, [r7, #18]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	8a3a      	ldrh	r2, [r7, #16]
 800c3b2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	8b7a      	ldrh	r2, [r7, #26]
 800c3b8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	8a7a      	ldrh	r2, [r7, #18]
 800c3be:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3c8:	d039      	beq.n	800c43e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c3ca:	4b21      	ldr	r3, [pc, #132]	; (800c450 <mem_trim+0x1b4>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	8812      	ldrh	r2, [r2, #0]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	8a7a      	ldrh	r2, [r7, #18]
 800c3d6:	805a      	strh	r2, [r3, #2]
 800c3d8:	e031      	b.n	800c43e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c3da:	887b      	ldrh	r3, [r7, #2]
 800c3dc:	f103 0214 	add.w	r2, r3, #20
 800c3e0:	8b3b      	ldrh	r3, [r7, #24]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d82b      	bhi.n	800c43e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c3e6:	8b7a      	ldrh	r2, [r7, #26]
 800c3e8:	887b      	ldrh	r3, [r7, #2]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c3f2:	4b17      	ldr	r3, [pc, #92]	; (800c450 <mem_trim+0x1b4>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	8a7b      	ldrh	r3, [r7, #18]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c3fc:	4b1b      	ldr	r3, [pc, #108]	; (800c46c <mem_trim+0x1d0>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	429a      	cmp	r2, r3
 800c404:	d202      	bcs.n	800c40c <mem_trim+0x170>
      lfree = mem2;
 800c406:	4a19      	ldr	r2, [pc, #100]	; (800c46c <mem_trim+0x1d0>)
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	2200      	movs	r2, #0
 800c410:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	881a      	ldrh	r2, [r3, #0]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	8b7a      	ldrh	r2, [r7, #26]
 800c41e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	8a7a      	ldrh	r2, [r7, #18]
 800c424:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c42e:	d006      	beq.n	800c43e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c430:	4b07      	ldr	r3, [pc, #28]	; (800c450 <mem_trim+0x1b4>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	8812      	ldrh	r2, [r2, #0]
 800c438:	4413      	add	r3, r2
 800c43a:	8a7a      	ldrh	r2, [r7, #18]
 800c43c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c43e:	480a      	ldr	r0, [pc, #40]	; (800c468 <mem_trim+0x1cc>)
 800c440:	f009 fb77 	bl	8015b32 <sys_mutex_unlock>
  return rmem;
 800c444:	687b      	ldr	r3, [r7, #4]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3720      	adds	r7, #32
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	200041d8 	.word	0x200041d8
 800c454:	200041dc 	.word	0x200041dc
 800c458:	08017c7c 	.word	0x08017c7c
 800c45c:	08017dbc 	.word	0x08017dbc
 800c460:	08017cc4 	.word	0x08017cc4
 800c464:	08017dd4 	.word	0x08017dd4
 800c468:	200041e4 	.word	0x200041e4
 800c46c:	200041e0 	.word	0x200041e0

0800c470 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c47a:	88fb      	ldrh	r3, [r7, #6]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <mem_malloc+0x14>
    return NULL;
 800c480:	2300      	movs	r3, #0
 800c482:	e0d1      	b.n	800c628 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c484:	88fb      	ldrh	r3, [r7, #6]
 800c486:	3303      	adds	r3, #3
 800c488:	b29b      	uxth	r3, r3
 800c48a:	f023 0303 	bic.w	r3, r3, #3
 800c48e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c490:	88fb      	ldrh	r3, [r7, #6]
 800c492:	2b0b      	cmp	r3, #11
 800c494:	d801      	bhi.n	800c49a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c496:	230c      	movs	r3, #12
 800c498:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c49a:	88fb      	ldrh	r3, [r7, #6]
 800c49c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4a0:	d901      	bls.n	800c4a6 <mem_malloc+0x36>
    return NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e0c0      	b.n	800c628 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c4a6:	4862      	ldr	r0, [pc, #392]	; (800c630 <mem_malloc+0x1c0>)
 800c4a8:	f009 fb34 	bl	8015b14 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c4ac:	4b61      	ldr	r3, [pc, #388]	; (800c634 <mem_malloc+0x1c4>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4b61      	ldr	r3, [pc, #388]	; (800c638 <mem_malloc+0x1c8>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	83fb      	strh	r3, [r7, #30]
 800c4ba:	e0aa      	b.n	800c612 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c4bc:	4b5e      	ldr	r3, [pc, #376]	; (800c638 <mem_malloc+0x1c8>)
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	8bfb      	ldrh	r3, [r7, #30]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	791b      	ldrb	r3, [r3, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f040 809b 	bne.w	800c606 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	8bfb      	ldrh	r3, [r7, #30]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f1a3 0208 	sub.w	r2, r3, #8
 800c4de:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	f0c0 8090 	bcc.w	800c606 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	8bfb      	ldrh	r3, [r7, #30]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	f1a3 0208 	sub.w	r2, r3, #8
 800c4f4:	88fb      	ldrh	r3, [r7, #6]
 800c4f6:	3314      	adds	r3, #20
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d327      	bcc.n	800c54c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c4fc:	8bfa      	ldrh	r2, [r7, #30]
 800c4fe:	88fb      	ldrh	r3, [r7, #6]
 800c500:	4413      	add	r3, r2
 800c502:	b29b      	uxth	r3, r3
 800c504:	3308      	adds	r3, #8
 800c506:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c508:	4b4b      	ldr	r3, [pc, #300]	; (800c638 <mem_malloc+0x1c8>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	8a7b      	ldrh	r3, [r7, #18]
 800c50e:	4413      	add	r3, r2
 800c510:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	881a      	ldrh	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	8bfa      	ldrh	r2, [r7, #30]
 800c524:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	8a7a      	ldrh	r2, [r7, #18]
 800c52a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2201      	movs	r2, #1
 800c530:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	881b      	ldrh	r3, [r3, #0]
 800c536:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c53a:	d00a      	beq.n	800c552 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c53c:	4b3e      	ldr	r3, [pc, #248]	; (800c638 <mem_malloc+0x1c8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	8812      	ldrh	r2, [r2, #0]
 800c544:	4413      	add	r3, r2
 800c546:	8a7a      	ldrh	r2, [r7, #18]
 800c548:	805a      	strh	r2, [r3, #2]
 800c54a:	e002      	b.n	800c552 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	2201      	movs	r2, #1
 800c550:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c552:	4b38      	ldr	r3, [pc, #224]	; (800c634 <mem_malloc+0x1c4>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d127      	bne.n	800c5ac <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800c55c:	4b35      	ldr	r3, [pc, #212]	; (800c634 <mem_malloc+0x1c4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c562:	e005      	b.n	800c570 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800c564:	4b34      	ldr	r3, [pc, #208]	; (800c638 <mem_malloc+0x1c8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	8812      	ldrh	r2, [r2, #0]
 800c56c:	4413      	add	r3, r2
 800c56e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	791b      	ldrb	r3, [r3, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <mem_malloc+0x112>
 800c578:	4b30      	ldr	r3, [pc, #192]	; (800c63c <mem_malloc+0x1cc>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d1f0      	bne.n	800c564 <mem_malloc+0xf4>
          }
          lfree = cur;
 800c582:	4a2c      	ldr	r2, [pc, #176]	; (800c634 <mem_malloc+0x1c4>)
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c588:	4b2a      	ldr	r3, [pc, #168]	; (800c634 <mem_malloc+0x1c4>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	4b2b      	ldr	r3, [pc, #172]	; (800c63c <mem_malloc+0x1cc>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	429a      	cmp	r2, r3
 800c592:	d00b      	beq.n	800c5ac <mem_malloc+0x13c>
 800c594:	4b27      	ldr	r3, [pc, #156]	; (800c634 <mem_malloc+0x1c4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	791b      	ldrb	r3, [r3, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d006      	beq.n	800c5ac <mem_malloc+0x13c>
 800c59e:	4b28      	ldr	r3, [pc, #160]	; (800c640 <mem_malloc+0x1d0>)
 800c5a0:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c5a4:	4927      	ldr	r1, [pc, #156]	; (800c644 <mem_malloc+0x1d4>)
 800c5a6:	4828      	ldr	r0, [pc, #160]	; (800c648 <mem_malloc+0x1d8>)
 800c5a8:	f009 fb5e 	bl	8015c68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c5ac:	4820      	ldr	r0, [pc, #128]	; (800c630 <mem_malloc+0x1c0>)
 800c5ae:	f009 fac0 	bl	8015b32 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c5b2:	88fa      	ldrh	r2, [r7, #6]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	4a20      	ldr	r2, [pc, #128]	; (800c63c <mem_malloc+0x1cc>)
 800c5bc:	6812      	ldr	r2, [r2, #0]
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d906      	bls.n	800c5d0 <mem_malloc+0x160>
 800c5c2:	4b1f      	ldr	r3, [pc, #124]	; (800c640 <mem_malloc+0x1d0>)
 800c5c4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c5c8:	4920      	ldr	r1, [pc, #128]	; (800c64c <mem_malloc+0x1dc>)
 800c5ca:	481f      	ldr	r0, [pc, #124]	; (800c648 <mem_malloc+0x1d8>)
 800c5cc:	f009 fb4c 	bl	8015c68 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f003 0303 	and.w	r3, r3, #3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d006      	beq.n	800c5e8 <mem_malloc+0x178>
 800c5da:	4b19      	ldr	r3, [pc, #100]	; (800c640 <mem_malloc+0x1d0>)
 800c5dc:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c5e0:	491b      	ldr	r1, [pc, #108]	; (800c650 <mem_malloc+0x1e0>)
 800c5e2:	4819      	ldr	r0, [pc, #100]	; (800c648 <mem_malloc+0x1d8>)
 800c5e4:	f009 fb40 	bl	8015c68 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f003 0303 	and.w	r3, r3, #3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d006      	beq.n	800c600 <mem_malloc+0x190>
 800c5f2:	4b13      	ldr	r3, [pc, #76]	; (800c640 <mem_malloc+0x1d0>)
 800c5f4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c5f8:	4916      	ldr	r1, [pc, #88]	; (800c654 <mem_malloc+0x1e4>)
 800c5fa:	4813      	ldr	r0, [pc, #76]	; (800c648 <mem_malloc+0x1d8>)
 800c5fc:	f009 fb34 	bl	8015c68 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	3308      	adds	r3, #8
 800c604:	e010      	b.n	800c628 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c606:	4b0c      	ldr	r3, [pc, #48]	; (800c638 <mem_malloc+0x1c8>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	8bfb      	ldrh	r3, [r7, #30]
 800c60c:	4413      	add	r3, r2
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c612:	8bfa      	ldrh	r2, [r7, #30]
 800c614:	88fb      	ldrh	r3, [r7, #6]
 800c616:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c61a:	429a      	cmp	r2, r3
 800c61c:	f4ff af4e 	bcc.w	800c4bc <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c620:	4803      	ldr	r0, [pc, #12]	; (800c630 <mem_malloc+0x1c0>)
 800c622:	f009 fa86 	bl	8015b32 <sys_mutex_unlock>
  return NULL;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3720      	adds	r7, #32
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	200041e4 	.word	0x200041e4
 800c634:	200041e0 	.word	0x200041e0
 800c638:	200041d8 	.word	0x200041d8
 800c63c:	200041dc 	.word	0x200041dc
 800c640:	08017c7c 	.word	0x08017c7c
 800c644:	08017df4 	.word	0x08017df4
 800c648:	08017cc4 	.word	0x08017cc4
 800c64c:	08017e10 	.word	0x08017e10
 800c650:	08017e40 	.word	0x08017e40
 800c654:	08017e70 	.word	0x08017e70

0800c658 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	3303      	adds	r3, #3
 800c66e:	f023 0303 	bic.w	r3, r3, #3
 800c672:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]
 800c678:	e011      	b.n	800c69e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	461a      	mov	r2, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	4413      	add	r3, r2
 800c696:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3301      	adds	r3, #1
 800c69c:	60fb      	str	r3, [r7, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	dbe7      	blt.n	800c67a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c6aa:	bf00      	nop
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c6be:	2300      	movs	r3, #0
 800c6c0:	80fb      	strh	r3, [r7, #6]
 800c6c2:	e009      	b.n	800c6d8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c6c4:	88fb      	ldrh	r3, [r7, #6]
 800c6c6:	4a08      	ldr	r2, [pc, #32]	; (800c6e8 <memp_init+0x30>)
 800c6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff ffc3 	bl	800c658 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c6d2:	88fb      	ldrh	r3, [r7, #6]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	80fb      	strh	r3, [r7, #6]
 800c6d8:	88fb      	ldrh	r3, [r7, #6]
 800c6da:	2b0c      	cmp	r3, #12
 800c6dc:	d9f2      	bls.n	800c6c4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	0801d568 	.word	0x0801d568

0800c6ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c6f4:	f009 fa50 	bl	8015b98 <sys_arch_protect>
 800c6f8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d015      	beq.n	800c734 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	f003 0303 	and.w	r3, r3, #3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d006      	beq.n	800c72a <do_memp_malloc_pool+0x3e>
 800c71c:	4b09      	ldr	r3, [pc, #36]	; (800c744 <do_memp_malloc_pool+0x58>)
 800c71e:	f240 1249 	movw	r2, #329	; 0x149
 800c722:	4909      	ldr	r1, [pc, #36]	; (800c748 <do_memp_malloc_pool+0x5c>)
 800c724:	4809      	ldr	r0, [pc, #36]	; (800c74c <do_memp_malloc_pool+0x60>)
 800c726:	f009 fa9f 	bl	8015c68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f009 fa42 	bl	8015bb4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	e003      	b.n	800c73c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f009 fa3d 	bl	8015bb4 <sys_arch_unprotect>
  return NULL;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	08017e94 	.word	0x08017e94
 800c748:	08017ec4 	.word	0x08017ec4
 800c74c:	08017ee8 	.word	0x08017ee8

0800c750 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	2b0c      	cmp	r3, #12
 800c75e:	d908      	bls.n	800c772 <memp_malloc+0x22>
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <memp_malloc+0x3c>)
 800c762:	f240 1287 	movw	r2, #391	; 0x187
 800c766:	490a      	ldr	r1, [pc, #40]	; (800c790 <memp_malloc+0x40>)
 800c768:	480a      	ldr	r0, [pc, #40]	; (800c794 <memp_malloc+0x44>)
 800c76a:	f009 fa7d 	bl	8015c68 <iprintf>
 800c76e:	2300      	movs	r3, #0
 800c770:	e008      	b.n	800c784 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	4a08      	ldr	r2, [pc, #32]	; (800c798 <memp_malloc+0x48>)
 800c776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7ff ffb6 	bl	800c6ec <do_memp_malloc_pool>
 800c780:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c782:	68fb      	ldr	r3, [r7, #12]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	08017e94 	.word	0x08017e94
 800c790:	08017f24 	.word	0x08017f24
 800c794:	08017ee8 	.word	0x08017ee8
 800c798:	0801d568 	.word	0x0801d568

0800c79c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	f003 0303 	and.w	r3, r3, #3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d006      	beq.n	800c7be <do_memp_free_pool+0x22>
 800c7b0:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <do_memp_free_pool+0x4c>)
 800c7b2:	f240 129d 	movw	r2, #413	; 0x19d
 800c7b6:	490d      	ldr	r1, [pc, #52]	; (800c7ec <do_memp_free_pool+0x50>)
 800c7b8:	480d      	ldr	r0, [pc, #52]	; (800c7f0 <do_memp_free_pool+0x54>)
 800c7ba:	f009 fa55 	bl	8015c68 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c7c2:	f009 f9e9 	bl	8015b98 <sys_arch_protect>
 800c7c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c7da:	68b8      	ldr	r0, [r7, #8]
 800c7dc:	f009 f9ea 	bl	8015bb4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c7e0:	bf00      	nop
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	08017e94 	.word	0x08017e94
 800c7ec:	08017f44 	.word	0x08017f44
 800c7f0:	08017ee8 	.word	0x08017ee8

0800c7f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	6039      	str	r1, [r7, #0]
 800c7fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	2b0c      	cmp	r3, #12
 800c804:	d907      	bls.n	800c816 <memp_free+0x22>
 800c806:	4b0c      	ldr	r3, [pc, #48]	; (800c838 <memp_free+0x44>)
 800c808:	f240 12db 	movw	r2, #475	; 0x1db
 800c80c:	490b      	ldr	r1, [pc, #44]	; (800c83c <memp_free+0x48>)
 800c80e:	480c      	ldr	r0, [pc, #48]	; (800c840 <memp_free+0x4c>)
 800c810:	f009 fa2a 	bl	8015c68 <iprintf>
 800c814:	e00c      	b.n	800c830 <memp_free+0x3c>

  if (mem == NULL) {
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d008      	beq.n	800c82e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	4a09      	ldr	r2, [pc, #36]	; (800c844 <memp_free+0x50>)
 800c820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff ffb8 	bl	800c79c <do_memp_free_pool>
 800c82c:	e000      	b.n	800c830 <memp_free+0x3c>
    return;
 800c82e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	08017e94 	.word	0x08017e94
 800c83c:	08017f64 	.word	0x08017f64
 800c840:	08017ee8 	.word	0x08017ee8
 800c844:	0801d568 	.word	0x0801d568

0800c848 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c84c:	bf00      	nop
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
	...

0800c858 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
 800c864:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d105      	bne.n	800c878 <netif_add+0x20>
 800c86c:	4b1f      	ldr	r3, [pc, #124]	; (800c8ec <netif_add+0x94>)
 800c86e:	22fb      	movs	r2, #251	; 0xfb
 800c870:	491f      	ldr	r1, [pc, #124]	; (800c8f0 <netif_add+0x98>)
 800c872:	4820      	ldr	r0, [pc, #128]	; (800c8f4 <netif_add+0x9c>)
 800c874:	f009 f9f8 	bl	8015c68 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2200      	movs	r2, #0
 800c888:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2203      	movs	r2, #3
 800c896:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	69ba      	ldr	r2, [r7, #24]
 800c89e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c8a0:	4b15      	ldr	r3, [pc, #84]	; (800c8f8 <netif_add+0xa0>)
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	1c5a      	adds	r2, r3, #1
 800c8a6:	b2d1      	uxtb	r1, r2
 800c8a8:	4a13      	ldr	r2, [pc, #76]	; (800c8f8 <netif_add+0xa0>)
 800c8aa:	7011      	strb	r1, [r2, #0]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6a3a      	ldr	r2, [r7, #32]
 800c8b6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 f81e 	bl	800c900 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	4798      	blx	r3
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <netif_add+0x7c>
    return NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e007      	b.n	800c8e4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c8d4:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <netif_add+0xa4>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c8dc:	4a07      	ldr	r2, [pc, #28]	; (800c8fc <netif_add+0xa4>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	08017f80 	.word	0x08017f80
 800c8f0:	08017fb4 	.word	0x08017fb4
 800c8f4:	08017fcc 	.word	0x08017fcc
 800c8f8:	2000421c 	.word	0x2000421c
 800c8fc:	2000b0f0 	.word	0x2000b0f0

0800c900 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <netif_set_addr+0x1c>
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10c      	bne.n	800c936 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f000 f81a 	bl	800c958 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c924:	6879      	ldr	r1, [r7, #4]
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f000 f862 	bl	800c9f0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 f84a 	bl	800c9c8 <netif_set_gw>
 800c934:	e00b      	b.n	800c94e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 f859 	bl	800c9f0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 f841 	bl	800c9c8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c946:	68b9      	ldr	r1, [r7, #8]
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f000 f805 	bl	800c958 <netif_set_ipaddr>
  }
}
 800c94e:	bf00      	nop
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
	...

0800c958 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <netif_set_ipaddr+0x18>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e002      	b.n	800c976 <netif_set_ipaddr+0x1e>
 800c970:	4b14      	ldr	r3, [pc, #80]	; (800c9c4 <netif_set_ipaddr+0x6c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3304      	adds	r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d01c      	beq.n	800c9bc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3304      	adds	r3, #4
 800c986:	f107 020c 	add.w	r2, r7, #12
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f002 fb15 	bl	800efbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3304      	adds	r3, #4
 800c996:	f107 020c 	add.w	r2, r7, #12
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f006 fce9 	bl	8013374 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <netif_set_ipaddr+0x56>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	e000      	b.n	800c9b0 <netif_set_ipaddr+0x58>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f861 	bl	800ca7e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c9bc:	bf00      	nop
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	0801d5dc 	.word	0x0801d5dc

0800c9c8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <netif_set_gw+0x16>
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	e000      	b.n	800c9e0 <netif_set_gw+0x18>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <netif_set_netmask+0x16>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	e000      	b.n	800ca08 <netif_set_netmask+0x18>
 800ca06:	2300      	movs	r3, #0
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ca20:	4a04      	ldr	r2, [pc, #16]	; (800ca34 <netif_set_default+0x1c>)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ca26:	bf00      	nop
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	2000b0f4 	.word	0x2000b0f4

0800ca38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d113      	bne.n	800ca76 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ca66:	f003 0304 	and.w	r3, r3, #4
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ca6e:	2103      	movs	r1, #3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f804 	bl	800ca7e <netif_issue_reports>
    }
  }
}
 800ca76:	bf00      	nop
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b082      	sub	sp, #8
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	460b      	mov	r3, r1
 800ca88:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca8a:	78fb      	ldrb	r3, [r7, #3]
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d011      	beq.n	800cab8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3304      	adds	r3, #4
 800ca98:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00c      	beq.n	800cab8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800caa4:	f003 0308 	and.w	r3, r3, #8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3304      	adds	r3, #4
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f007 fb92 	bl	80141dc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d012      	beq.n	800cafc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cadc:	f023 0301 	bic.w	r3, r3, #1
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800caee:	f003 0308 	and.w	r3, r3, #8
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d002      	beq.n	800cafc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f006 ff36 	bl	8013968 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cb0a:	f009 f845 	bl	8015b98 <sys_arch_protect>
 800cb0e:	6038      	str	r0, [r7, #0]
 800cb10:	4b0f      	ldr	r3, [pc, #60]	; (800cb50 <pbuf_free_ooseq+0x4c>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	701a      	strb	r2, [r3, #0]
 800cb16:	6838      	ldr	r0, [r7, #0]
 800cb18:	f009 f84c 	bl	8015bb4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb1c:	4b0d      	ldr	r3, [pc, #52]	; (800cb54 <pbuf_free_ooseq+0x50>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	e00f      	b.n	800cb44 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d008      	beq.n	800cb3e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 febe 	bl	800e8b2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800cb3c:	e005      	b.n	800cb4a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	607b      	str	r3, [r7, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1ec      	bne.n	800cb24 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	2000b0f8 	.word	0x2000b0f8
 800cb54:	2000b100 	.word	0x2000b100

0800cb58 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cb60:	f7ff ffd0 	bl	800cb04 <pbuf_free_ooseq>
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cb72:	f009 f811 	bl	8015b98 <sys_arch_protect>
 800cb76:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cb78:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <pbuf_pool_is_empty+0x50>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cb7e:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <pbuf_pool_is_empty+0x50>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f009 f815 	bl	8015bb4 <sys_arch_unprotect>

  if (!queued) {
 800cb8a:	78fb      	ldrb	r3, [r7, #3]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d110      	bne.n	800cbb2 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cb90:	2200      	movs	r2, #0
 800cb92:	2100      	movs	r1, #0
 800cb94:	480a      	ldr	r0, [pc, #40]	; (800cbc0 <pbuf_pool_is_empty+0x54>)
 800cb96:	f7ff f8fb 	bl	800bd90 <tcpip_callback_with_block>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d008      	beq.n	800cbb2 <pbuf_pool_is_empty+0x46>
 800cba0:	f008 fffa 	bl	8015b98 <sys_arch_protect>
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	4b05      	ldr	r3, [pc, #20]	; (800cbbc <pbuf_pool_is_empty+0x50>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f009 f801 	bl	8015bb4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	2000b0f8 	.word	0x2000b0f8
 800cbc0:	0800cb59 	.word	0x0800cb59

0800cbc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	71fb      	strb	r3, [r7, #7]
 800cbce:	460b      	mov	r3, r1
 800cbd0:	80bb      	strh	r3, [r7, #4]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	d81c      	bhi.n	800cc16 <pbuf_alloc+0x52>
 800cbdc:	a201      	add	r2, pc, #4	; (adr r2, 800cbe4 <pbuf_alloc+0x20>)
 800cbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe2:	bf00      	nop
 800cbe4:	0800cbf9 	.word	0x0800cbf9
 800cbe8:	0800cbff 	.word	0x0800cbff
 800cbec:	0800cc05 	.word	0x0800cc05
 800cbf0:	0800cc0b 	.word	0x0800cc0b
 800cbf4:	0800cc11 	.word	0x0800cc11
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cbf8:	2336      	movs	r3, #54	; 0x36
 800cbfa:	82fb      	strh	r3, [r7, #22]
    break;
 800cbfc:	e014      	b.n	800cc28 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cbfe:	2322      	movs	r3, #34	; 0x22
 800cc00:	82fb      	strh	r3, [r7, #22]
    break;
 800cc02:	e011      	b.n	800cc28 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cc04:	230e      	movs	r3, #14
 800cc06:	82fb      	strh	r3, [r7, #22]
    break;
 800cc08:	e00e      	b.n	800cc28 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	82fb      	strh	r3, [r7, #22]
    break;
 800cc0e:	e00b      	b.n	800cc28 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	82fb      	strh	r3, [r7, #22]
    break;
 800cc14:	e008      	b.n	800cc28 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800cc16:	4ba5      	ldr	r3, [pc, #660]	; (800ceac <pbuf_alloc+0x2e8>)
 800cc18:	f44f 728b 	mov.w	r2, #278	; 0x116
 800cc1c:	49a4      	ldr	r1, [pc, #656]	; (800ceb0 <pbuf_alloc+0x2ec>)
 800cc1e:	48a5      	ldr	r0, [pc, #660]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800cc20:	f009 f822 	bl	8015c68 <iprintf>
    return NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	e15d      	b.n	800cee4 <pbuf_alloc+0x320>
  }

  switch (type) {
 800cc28:	79bb      	ldrb	r3, [r7, #6]
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	f200 8134 	bhi.w	800ce98 <pbuf_alloc+0x2d4>
 800cc30:	a201      	add	r2, pc, #4	; (adr r2, 800cc38 <pbuf_alloc+0x74>)
 800cc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc36:	bf00      	nop
 800cc38:	0800cdd9 	.word	0x0800cdd9
 800cc3c:	0800ce65 	.word	0x0800ce65
 800cc40:	0800ce65 	.word	0x0800ce65
 800cc44:	0800cc49 	.word	0x0800cc49
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc48:	200c      	movs	r0, #12
 800cc4a:	f7ff fd81 	bl	800c750 <memp_malloc>
 800cc4e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800cc56:	f7ff ff89 	bl	800cb6c <pbuf_pool_is_empty>
      return NULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e142      	b.n	800cee4 <pbuf_alloc+0x320>
    }
    p->type = type;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	79ba      	ldrb	r2, [r7, #6]
 800cc62:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800cc6a:	8afb      	ldrh	r3, [r7, #22]
 800cc6c:	3310      	adds	r3, #16
 800cc6e:	69fa      	ldr	r2, [r7, #28]
 800cc70:	4413      	add	r3, r2
 800cc72:	3303      	adds	r3, #3
 800cc74:	f023 0303 	bic.w	r3, r3, #3
 800cc78:	461a      	mov	r2, r3
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f003 0303 	and.w	r3, r3, #3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <pbuf_alloc+0xd4>
 800cc8a:	4b88      	ldr	r3, [pc, #544]	; (800ceac <pbuf_alloc+0x2e8>)
 800cc8c:	f240 1229 	movw	r2, #297	; 0x129
 800cc90:	4989      	ldr	r1, [pc, #548]	; (800ceb8 <pbuf_alloc+0x2f4>)
 800cc92:	4888      	ldr	r0, [pc, #544]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800cc94:	f008 ffe8 	bl	8015c68 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	88ba      	ldrh	r2, [r7, #4]
 800cc9c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800cc9e:	8afb      	ldrh	r3, [r7, #22]
 800cca0:	3303      	adds	r3, #3
 800cca2:	f023 0303 	bic.w	r3, r3, #3
 800cca6:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800ccaa:	88bb      	ldrh	r3, [r7, #4]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	bf28      	it	cs
 800ccb0:	4613      	movcs	r3, r2
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	69fa      	ldr	r2, [r7, #28]
 800ccbe:	8952      	ldrh	r2, [r2, #10]
 800ccc0:	441a      	add	r2, r3
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d906      	bls.n	800ccda <pbuf_alloc+0x116>
 800cccc:	4b77      	ldr	r3, [pc, #476]	; (800ceac <pbuf_alloc+0x2e8>)
 800ccce:	f44f 7298 	mov.w	r2, #304	; 0x130
 800ccd2:	497a      	ldr	r1, [pc, #488]	; (800cebc <pbuf_alloc+0x2f8>)
 800ccd4:	4877      	ldr	r0, [pc, #476]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800ccd6:	f008 ffc7 	bl	8015c68 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ccda:	8afb      	ldrh	r3, [r7, #22]
 800ccdc:	3303      	adds	r3, #3
 800ccde:	f023 0303 	bic.w	r3, r3, #3
 800cce2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cce6:	d106      	bne.n	800ccf6 <pbuf_alloc+0x132>
 800cce8:	4b70      	ldr	r3, [pc, #448]	; (800ceac <pbuf_alloc+0x2e8>)
 800ccea:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ccee:	4974      	ldr	r1, [pc, #464]	; (800cec0 <pbuf_alloc+0x2fc>)
 800ccf0:	4870      	ldr	r0, [pc, #448]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800ccf2:	f008 ffb9 	bl	8015c68 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800cd00:	88bb      	ldrh	r3, [r7, #4]
 800cd02:	69fa      	ldr	r2, [r7, #28]
 800cd04:	8952      	ldrh	r2, [r2, #10]
 800cd06:	1a9b      	subs	r3, r3, r2
 800cd08:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800cd0a:	e061      	b.n	800cdd0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cd0c:	200c      	movs	r0, #12
 800cd0e:	f7ff fd1f 	bl	800c750 <memp_malloc>
 800cd12:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800cd1a:	f7ff ff27 	bl	800cb6c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800cd1e:	69f8      	ldr	r0, [r7, #28]
 800cd20:	f000 fac2 	bl	800d2a8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800cd24:	2300      	movs	r3, #0
 800cd26:	e0dd      	b.n	800cee4 <pbuf_alloc+0x320>
      }
      q->type = type;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	79ba      	ldrb	r2, [r7, #6]
 800cd2c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cd46:	4293      	cmp	r3, r2
 800cd48:	dd06      	ble.n	800cd58 <pbuf_alloc+0x194>
 800cd4a:	4b58      	ldr	r3, [pc, #352]	; (800ceac <pbuf_alloc+0x2e8>)
 800cd4c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800cd50:	495c      	ldr	r1, [pc, #368]	; (800cec4 <pbuf_alloc+0x300>)
 800cd52:	4858      	ldr	r0, [pc, #352]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800cd54:	f008 ff88 	bl	8015c68 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd68:	bf28      	it	cs
 800cd6a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f103 0210 	add.w	r2, r3, #16
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f003 0303 	and.w	r3, r3, #3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d006      	beq.n	800cd98 <pbuf_alloc+0x1d4>
 800cd8a:	4b48      	ldr	r3, [pc, #288]	; (800ceac <pbuf_alloc+0x2e8>)
 800cd8c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800cd90:	494d      	ldr	r1, [pc, #308]	; (800cec8 <pbuf_alloc+0x304>)
 800cd92:	4848      	ldr	r0, [pc, #288]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800cd94:	f008 ff68 	bl	8015c68 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	69fa      	ldr	r2, [r7, #28]
 800cd9e:	8952      	ldrh	r2, [r2, #10]
 800cda0:	441a      	add	r2, r3
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d906      	bls.n	800cdba <pbuf_alloc+0x1f6>
 800cdac:	4b3f      	ldr	r3, [pc, #252]	; (800ceac <pbuf_alloc+0x2e8>)
 800cdae:	f240 1255 	movw	r2, #341	; 0x155
 800cdb2:	4942      	ldr	r1, [pc, #264]	; (800cebc <pbuf_alloc+0x2f8>)
 800cdb4:	483f      	ldr	r0, [pc, #252]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800cdb6:	f008 ff57 	bl	8015c68 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	895b      	ldrh	r3, [r3, #10]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dc9a      	bgt.n	800cd0c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800cdd6:	e07e      	b.n	800ced6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800cdd8:	8afb      	ldrh	r3, [r7, #22]
 800cdda:	3313      	adds	r3, #19
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	f023 0303 	bic.w	r3, r3, #3
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	88bb      	ldrh	r3, [r7, #4]
 800cde6:	3303      	adds	r3, #3
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	f023 0303 	bic.w	r3, r3, #3
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4413      	add	r3, r2
 800cdf2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800cdf4:	897a      	ldrh	r2, [r7, #10]
 800cdf6:	88bb      	ldrh	r3, [r7, #4]
 800cdf8:	3303      	adds	r3, #3
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d201      	bcs.n	800ce06 <pbuf_alloc+0x242>
        return NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	e06e      	b.n	800cee4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800ce06:	897b      	ldrh	r3, [r7, #10]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff fb31 	bl	800c470 <mem_malloc>
 800ce0e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <pbuf_alloc+0x256>
      return NULL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	e064      	b.n	800cee4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800ce1a:	8afb      	ldrh	r3, [r7, #22]
 800ce1c:	3310      	adds	r3, #16
 800ce1e:	69fa      	ldr	r2, [r7, #28]
 800ce20:	4413      	add	r3, r2
 800ce22:	3303      	adds	r3, #3
 800ce24:	f023 0303 	bic.w	r3, r3, #3
 800ce28:	461a      	mov	r2, r3
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	88ba      	ldrh	r2, [r7, #4]
 800ce32:	811a      	strh	r2, [r3, #8]
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	891a      	ldrh	r2, [r3, #8]
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	79ba      	ldrb	r2, [r7, #6]
 800ce46:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	f003 0303 	and.w	r3, r3, #3
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d03f      	beq.n	800ced4 <pbuf_alloc+0x310>
 800ce54:	4b15      	ldr	r3, [pc, #84]	; (800ceac <pbuf_alloc+0x2e8>)
 800ce56:	f240 1277 	movw	r2, #375	; 0x177
 800ce5a:	491c      	ldr	r1, [pc, #112]	; (800cecc <pbuf_alloc+0x308>)
 800ce5c:	4815      	ldr	r0, [pc, #84]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800ce5e:	f008 ff03 	bl	8015c68 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ce62:	e037      	b.n	800ced4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce64:	200b      	movs	r0, #11
 800ce66:	f7ff fc73 	bl	800c750 <memp_malloc>
 800ce6a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d101      	bne.n	800ce76 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	e036      	b.n	800cee4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	88ba      	ldrh	r2, [r7, #4]
 800ce80:	811a      	strh	r2, [r3, #8]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	891a      	ldrh	r2, [r3, #8]
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	79ba      	ldrb	r2, [r7, #6]
 800ce94:	731a      	strb	r2, [r3, #12]
    break;
 800ce96:	e01e      	b.n	800ced6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce98:	4b04      	ldr	r3, [pc, #16]	; (800ceac <pbuf_alloc+0x2e8>)
 800ce9a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800ce9e:	490c      	ldr	r1, [pc, #48]	; (800ced0 <pbuf_alloc+0x30c>)
 800cea0:	4804      	ldr	r0, [pc, #16]	; (800ceb4 <pbuf_alloc+0x2f0>)
 800cea2:	f008 fee1 	bl	8015c68 <iprintf>
    return NULL;
 800cea6:	2300      	movs	r3, #0
 800cea8:	e01c      	b.n	800cee4 <pbuf_alloc+0x320>
 800ceaa:	bf00      	nop
 800ceac:	08017ff4 	.word	0x08017ff4
 800ceb0:	08018024 	.word	0x08018024
 800ceb4:	08018040 	.word	0x08018040
 800ceb8:	08018068 	.word	0x08018068
 800cebc:	08018098 	.word	0x08018098
 800cec0:	080180cc 	.word	0x080180cc
 800cec4:	08018100 	.word	0x08018100
 800cec8:	08018114 	.word	0x08018114
 800cecc:	08018144 	.word	0x08018144
 800ced0:	08018170 	.word	0x08018170
    break;
 800ced4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	2201      	movs	r2, #1
 800ceda:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	2200      	movs	r2, #0
 800cee0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cee2:	69fb      	ldr	r3, [r7, #28]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3720      	adds	r7, #32
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	4603      	mov	r3, r0
 800cef6:	71fb      	strb	r3, [r7, #7]
 800cef8:	460b      	mov	r3, r1
 800cefa:	80bb      	strh	r3, [r7, #4]
 800cefc:	4613      	mov	r3, r2
 800cefe:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800cf00:	79fb      	ldrb	r3, [r7, #7]
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	d81b      	bhi.n	800cf3e <pbuf_alloced_custom+0x52>
 800cf06:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <pbuf_alloced_custom+0x20>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf21 	.word	0x0800cf21
 800cf10:	0800cf27 	.word	0x0800cf27
 800cf14:	0800cf2d 	.word	0x0800cf2d
 800cf18:	0800cf33 	.word	0x0800cf33
 800cf1c:	0800cf39 	.word	0x0800cf39
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cf20:	2336      	movs	r3, #54	; 0x36
 800cf22:	81fb      	strh	r3, [r7, #14]
    break;
 800cf24:	e014      	b.n	800cf50 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cf26:	2322      	movs	r3, #34	; 0x22
 800cf28:	81fb      	strh	r3, [r7, #14]
    break;
 800cf2a:	e011      	b.n	800cf50 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cf2c:	230e      	movs	r3, #14
 800cf2e:	81fb      	strh	r3, [r7, #14]
    break;
 800cf30:	e00e      	b.n	800cf50 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cf32:	2300      	movs	r3, #0
 800cf34:	81fb      	strh	r3, [r7, #14]
    break;
 800cf36:	e00b      	b.n	800cf50 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	81fb      	strh	r3, [r7, #14]
    break;
 800cf3c:	e008      	b.n	800cf50 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800cf3e:	4b1d      	ldr	r3, [pc, #116]	; (800cfb4 <pbuf_alloced_custom+0xc8>)
 800cf40:	f240 12c5 	movw	r2, #453	; 0x1c5
 800cf44:	491c      	ldr	r1, [pc, #112]	; (800cfb8 <pbuf_alloced_custom+0xcc>)
 800cf46:	481d      	ldr	r0, [pc, #116]	; (800cfbc <pbuf_alloced_custom+0xd0>)
 800cf48:	f008 fe8e 	bl	8015c68 <iprintf>
    return NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e02d      	b.n	800cfac <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf50:	89fb      	ldrh	r3, [r7, #14]
 800cf52:	3303      	adds	r3, #3
 800cf54:	f023 0203 	bic.w	r2, r3, #3
 800cf58:	88bb      	ldrh	r3, [r7, #4]
 800cf5a:	441a      	add	r2, r3
 800cf5c:	8bbb      	ldrh	r3, [r7, #28]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d901      	bls.n	800cf66 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e022      	b.n	800cfac <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d008      	beq.n	800cf84 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf72:	89fb      	ldrh	r3, [r7, #14]
 800cf74:	3303      	adds	r3, #3
 800cf76:	f023 0303 	bic.w	r3, r3, #3
 800cf7a:	69ba      	ldr	r2, [r7, #24]
 800cf7c:	441a      	add	r2, r3
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	e002      	b.n	800cf8a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2200      	movs	r2, #0
 800cf88:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	88ba      	ldrh	r2, [r7, #4]
 800cf94:	811a      	strh	r2, [r3, #8]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	891a      	ldrh	r2, [r3, #8]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	79ba      	ldrb	r2, [r7, #6]
 800cfa2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800cfaa:	683b      	ldr	r3, [r7, #0]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08017ff4 	.word	0x08017ff4
 800cfb8:	0801818c 	.word	0x0801818c
 800cfbc:	08018040 	.word	0x08018040

0800cfc0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <pbuf_realloc+0x20>
 800cfd2:	4b4b      	ldr	r3, [pc, #300]	; (800d100 <pbuf_realloc+0x140>)
 800cfd4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cfd8:	494a      	ldr	r1, [pc, #296]	; (800d104 <pbuf_realloc+0x144>)
 800cfda:	484b      	ldr	r0, [pc, #300]	; (800d108 <pbuf_realloc+0x148>)
 800cfdc:	f008 fe44 	bl	8015c68 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	7b1b      	ldrb	r3, [r3, #12]
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d012      	beq.n	800d00e <pbuf_realloc+0x4e>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7b1b      	ldrb	r3, [r3, #12]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d00e      	beq.n	800d00e <pbuf_realloc+0x4e>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	7b1b      	ldrb	r3, [r3, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00a      	beq.n	800d00e <pbuf_realloc+0x4e>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7b1b      	ldrb	r3, [r3, #12]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d006      	beq.n	800d00e <pbuf_realloc+0x4e>
 800d000:	4b3f      	ldr	r3, [pc, #252]	; (800d100 <pbuf_realloc+0x140>)
 800d002:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d006:	4941      	ldr	r1, [pc, #260]	; (800d10c <pbuf_realloc+0x14c>)
 800d008:	483f      	ldr	r0, [pc, #252]	; (800d108 <pbuf_realloc+0x148>)
 800d00a:	f008 fe2d 	bl	8015c68 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	891b      	ldrh	r3, [r3, #8]
 800d012:	887a      	ldrh	r2, [r7, #2]
 800d014:	429a      	cmp	r2, r3
 800d016:	d26f      	bcs.n	800d0f8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800d018:	887b      	ldrh	r3, [r7, #2]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	8912      	ldrh	r2, [r2, #8]
 800d01e:	1a9b      	subs	r3, r3, r2
 800d020:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d022:	887b      	ldrh	r3, [r7, #2]
 800d024:	827b      	strh	r3, [r7, #18]
  q = p;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d02a:	e025      	b.n	800d078 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	895b      	ldrh	r3, [r3, #10]
 800d030:	8a7a      	ldrh	r2, [r7, #18]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d03c:	4293      	cmp	r3, r2
 800d03e:	dd06      	ble.n	800d04e <pbuf_realloc+0x8e>
 800d040:	4b2f      	ldr	r3, [pc, #188]	; (800d100 <pbuf_realloc+0x140>)
 800d042:	f240 220b 	movw	r2, #523	; 0x20b
 800d046:	4932      	ldr	r1, [pc, #200]	; (800d110 <pbuf_realloc+0x150>)
 800d048:	482f      	ldr	r0, [pc, #188]	; (800d108 <pbuf_realloc+0x148>)
 800d04a:	f008 fe0d 	bl	8015c68 <iprintf>
    q->tot_len += (u16_t)grow;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	891a      	ldrh	r2, [r3, #8]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	b29b      	uxth	r3, r3
 800d056:	4413      	add	r3, r2
 800d058:	b29a      	uxth	r2, r3
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <pbuf_realloc+0xb8>
 800d06a:	4b25      	ldr	r3, [pc, #148]	; (800d100 <pbuf_realloc+0x140>)
 800d06c:	f240 220f 	movw	r2, #527	; 0x20f
 800d070:	4928      	ldr	r1, [pc, #160]	; (800d114 <pbuf_realloc+0x154>)
 800d072:	4825      	ldr	r0, [pc, #148]	; (800d108 <pbuf_realloc+0x148>)
 800d074:	f008 fdf8 	bl	8015c68 <iprintf>
  while (rem_len > q->len) {
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	895b      	ldrh	r3, [r3, #10]
 800d07c:	8a7a      	ldrh	r2, [r7, #18]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d8d4      	bhi.n	800d02c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	7b1b      	ldrb	r3, [r3, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d122      	bne.n	800d0d0 <pbuf_realloc+0x110>
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	895b      	ldrh	r3, [r3, #10]
 800d08e:	8a7a      	ldrh	r2, [r7, #18]
 800d090:	429a      	cmp	r2, r3
 800d092:	d01d      	beq.n	800d0d0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	7b5b      	ldrb	r3, [r3, #13]
 800d098:	f003 0302 	and.w	r3, r3, #2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d117      	bne.n	800d0d0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	8a7b      	ldrh	r3, [r7, #18]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6978      	ldr	r0, [r7, #20]
 800d0b6:	f7ff f8f1 	bl	800c29c <mem_trim>
 800d0ba:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d106      	bne.n	800d0d0 <pbuf_realloc+0x110>
 800d0c2:	4b0f      	ldr	r3, [pc, #60]	; (800d100 <pbuf_realloc+0x140>)
 800d0c4:	f240 221d 	movw	r2, #541	; 0x21d
 800d0c8:	4913      	ldr	r1, [pc, #76]	; (800d118 <pbuf_realloc+0x158>)
 800d0ca:	480f      	ldr	r0, [pc, #60]	; (800d108 <pbuf_realloc+0x148>)
 800d0cc:	f008 fdcc 	bl	8015c68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	8a7a      	ldrh	r2, [r7, #18]
 800d0d4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	895a      	ldrh	r2, [r3, #10]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d004      	beq.n	800d0f0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 f8dc 	bl	800d2a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	e000      	b.n	800d0fa <pbuf_realloc+0x13a>
    return;
 800d0f8:	bf00      	nop

}
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	08017ff4 	.word	0x08017ff4
 800d104:	080181b0 	.word	0x080181b0
 800d108:	08018040 	.word	0x08018040
 800d10c:	080181c8 	.word	0x080181c8
 800d110:	080181e4 	.word	0x080181e4
 800d114:	080181f8 	.word	0x080181f8
 800d118:	08018210 	.word	0x08018210

0800d11c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	807b      	strh	r3, [r7, #2]
 800d128:	4613      	mov	r3, r2
 800d12a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <pbuf_header_impl+0x24>
 800d132:	4b46      	ldr	r3, [pc, #280]	; (800d24c <pbuf_header_impl+0x130>)
 800d134:	f240 223f 	movw	r2, #575	; 0x23f
 800d138:	4945      	ldr	r1, [pc, #276]	; (800d250 <pbuf_header_impl+0x134>)
 800d13a:	4846      	ldr	r0, [pc, #280]	; (800d254 <pbuf_header_impl+0x138>)
 800d13c:	f008 fd94 	bl	8015c68 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800d140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <pbuf_header_impl+0x32>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <pbuf_header_impl+0x36>
    return 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	e078      	b.n	800d244 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800d152:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d156:	2b00      	cmp	r3, #0
 800d158:	da10      	bge.n	800d17c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800d15a:	887b      	ldrh	r3, [r7, #2]
 800d15c:	425b      	negs	r3, r3
 800d15e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	895b      	ldrh	r3, [r3, #10]
 800d164:	89fa      	ldrh	r2, [r7, #14]
 800d166:	429a      	cmp	r2, r3
 800d168:	d90a      	bls.n	800d180 <pbuf_header_impl+0x64>
 800d16a:	4b38      	ldr	r3, [pc, #224]	; (800d24c <pbuf_header_impl+0x130>)
 800d16c:	f240 2247 	movw	r2, #583	; 0x247
 800d170:	4939      	ldr	r1, [pc, #228]	; (800d258 <pbuf_header_impl+0x13c>)
 800d172:	4838      	ldr	r0, [pc, #224]	; (800d254 <pbuf_header_impl+0x138>)
 800d174:	f008 fd78 	bl	8015c68 <iprintf>
 800d178:	2301      	movs	r3, #1
 800d17a:	e063      	b.n	800d244 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800d17c:	887b      	ldrh	r3, [r7, #2]
 800d17e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	7b1b      	ldrb	r3, [r3, #12]
 800d184:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800d18c:	89bb      	ldrh	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <pbuf_header_impl+0x7c>
 800d192:	89bb      	ldrh	r3, [r7, #12]
 800d194:	2b03      	cmp	r3, #3
 800d196:	d112      	bne.n	800d1be <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1a0:	425b      	negs	r3, r3
 800d1a2:	441a      	add	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	3310      	adds	r3, #16
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d238      	bcs.n	800d226 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e042      	b.n	800d244 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800d1be:	89bb      	ldrh	r3, [r7, #12]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d002      	beq.n	800d1ca <pbuf_header_impl+0xae>
 800d1c4:	89bb      	ldrh	r3, [r7, #12]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d124      	bne.n	800d214 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d1ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	da0d      	bge.n	800d1ee <pbuf_header_impl+0xd2>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	895b      	ldrh	r3, [r3, #10]
 800d1d6:	89fa      	ldrh	r2, [r7, #14]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d808      	bhi.n	800d1ee <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685a      	ldr	r2, [r3, #4]
 800d1e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1e4:	425b      	negs	r3, r3
 800d1e6:	441a      	add	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	605a      	str	r2, [r3, #4]
 800d1ec:	e011      	b.n	800d212 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800d1ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	dd0b      	ble.n	800d20e <pbuf_header_impl+0xf2>
 800d1f6:	787b      	ldrb	r3, [r7, #1]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d008      	beq.n	800d20e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d204:	425b      	negs	r3, r3
 800d206:	441a      	add	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	605a      	str	r2, [r3, #4]
 800d20c:	e001      	b.n	800d212 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d20e:	2301      	movs	r3, #1
 800d210:	e018      	b.n	800d244 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d212:	e008      	b.n	800d226 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800d214:	4b0d      	ldr	r3, [pc, #52]	; (800d24c <pbuf_header_impl+0x130>)
 800d216:	f240 2277 	movw	r2, #631	; 0x277
 800d21a:	4910      	ldr	r1, [pc, #64]	; (800d25c <pbuf_header_impl+0x140>)
 800d21c:	480d      	ldr	r0, [pc, #52]	; (800d254 <pbuf_header_impl+0x138>)
 800d21e:	f008 fd23 	bl	8015c68 <iprintf>
    return 1;
 800d222:	2301      	movs	r3, #1
 800d224:	e00e      	b.n	800d244 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	895a      	ldrh	r2, [r3, #10]
 800d22a:	887b      	ldrh	r3, [r7, #2]
 800d22c:	4413      	add	r3, r2
 800d22e:	b29a      	uxth	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	891a      	ldrh	r2, [r3, #8]
 800d238:	887b      	ldrh	r3, [r7, #2]
 800d23a:	4413      	add	r3, r2
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	08017ff4 	.word	0x08017ff4
 800d250:	0801822c 	.word	0x0801822c
 800d254:	08018040 	.word	0x08018040
 800d258:	08018238 	.word	0x08018238
 800d25c:	08018258 	.word	0x08018258

0800d260 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800d26c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d270:	2200      	movs	r2, #0
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff ff51 	bl	800d11c <pbuf_header_impl>
 800d27a:	4603      	mov	r3, r0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800d290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d294:	2201      	movs	r2, #1
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ff3f 	bl	800d11c <pbuf_header_impl>
 800d29e:	4603      	mov	r3, r0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d106      	bne.n	800d2ca <pbuf_free+0x22>
 800d2bc:	4b41      	ldr	r3, [pc, #260]	; (800d3c4 <pbuf_free+0x11c>)
 800d2be:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d2c2:	4941      	ldr	r1, [pc, #260]	; (800d3c8 <pbuf_free+0x120>)
 800d2c4:	4841      	ldr	r0, [pc, #260]	; (800d3cc <pbuf_free+0x124>)
 800d2c6:	f008 fccf 	bl	8015c68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e076      	b.n	800d3bc <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	7b1b      	ldrb	r3, [r3, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d012      	beq.n	800d2fc <pbuf_free+0x54>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7b1b      	ldrb	r3, [r3, #12]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d00e      	beq.n	800d2fc <pbuf_free+0x54>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7b1b      	ldrb	r3, [r3, #12]
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d00a      	beq.n	800d2fc <pbuf_free+0x54>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7b1b      	ldrb	r3, [r3, #12]
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d006      	beq.n	800d2fc <pbuf_free+0x54>
 800d2ee:	4b35      	ldr	r3, [pc, #212]	; (800d3c4 <pbuf_free+0x11c>)
 800d2f0:	f240 22de 	movw	r2, #734	; 0x2de
 800d2f4:	4936      	ldr	r1, [pc, #216]	; (800d3d0 <pbuf_free+0x128>)
 800d2f6:	4835      	ldr	r0, [pc, #212]	; (800d3cc <pbuf_free+0x124>)
 800d2f8:	f008 fcb6 	bl	8015c68 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d300:	e058      	b.n	800d3b4 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d302:	f008 fc49 	bl	8015b98 <sys_arch_protect>
 800d306:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	89db      	ldrh	r3, [r3, #14]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d106      	bne.n	800d31e <pbuf_free+0x76>
 800d310:	4b2c      	ldr	r3, [pc, #176]	; (800d3c4 <pbuf_free+0x11c>)
 800d312:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d316:	492f      	ldr	r1, [pc, #188]	; (800d3d4 <pbuf_free+0x12c>)
 800d318:	482c      	ldr	r0, [pc, #176]	; (800d3cc <pbuf_free+0x124>)
 800d31a:	f008 fca5 	bl	8015c68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	89db      	ldrh	r3, [r3, #14]
 800d322:	3b01      	subs	r3, #1
 800d324:	b29a      	uxth	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	81da      	strh	r2, [r3, #14]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	89db      	ldrh	r3, [r3, #14]
 800d32e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800d330:	69b8      	ldr	r0, [r7, #24]
 800d332:	f008 fc3f 	bl	8015bb4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d336:	8afb      	ldrh	r3, [r7, #22]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d139      	bne.n	800d3b0 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7b1b      	ldrb	r3, [r3, #12]
 800d346:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	7b5b      	ldrb	r3, [r3, #13]
 800d34c:	f003 0302 	and.w	r3, r3, #2
 800d350:	2b00      	cmp	r3, #0
 800d352:	d011      	beq.n	800d378 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d106      	bne.n	800d36e <pbuf_free+0xc6>
 800d360:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <pbuf_free+0x11c>)
 800d362:	f240 22f9 	movw	r2, #761	; 0x2f9
 800d366:	491c      	ldr	r1, [pc, #112]	; (800d3d8 <pbuf_free+0x130>)
 800d368:	4818      	ldr	r0, [pc, #96]	; (800d3cc <pbuf_free+0x124>)
 800d36a:	f008 fc7d 	bl	8015c68 <iprintf>
        pc->custom_free_function(p);
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	4798      	blx	r3
 800d376:	e015      	b.n	800d3a4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800d378:	89fb      	ldrh	r3, [r7, #14]
 800d37a:	2b03      	cmp	r3, #3
 800d37c:	d104      	bne.n	800d388 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	200c      	movs	r0, #12
 800d382:	f7ff fa37 	bl	800c7f4 <memp_free>
 800d386:	e00d      	b.n	800d3a4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d002      	beq.n	800d394 <pbuf_free+0xec>
 800d38e:	89fb      	ldrh	r3, [r7, #14]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d104      	bne.n	800d39e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	200b      	movs	r0, #11
 800d398:	f7ff fa2c 	bl	800c7f4 <memp_free>
 800d39c:	e002      	b.n	800d3a4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7fe ff0e 	bl	800c1c0 <mem_free>
        }
      }
      count++;
 800d3a4:	7ffb      	ldrb	r3, [r7, #31]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	607b      	str	r3, [r7, #4]
 800d3ae:	e001      	b.n	800d3b4 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1a3      	bne.n	800d302 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d3ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3720      	adds	r7, #32
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	08017ff4 	.word	0x08017ff4
 800d3c8:	0801822c 	.word	0x0801822c
 800d3cc:	08018040 	.word	0x08018040
 800d3d0:	08018268 	.word	0x08018268
 800d3d4:	08018280 	.word	0x08018280
 800d3d8:	08018298 	.word	0x08018298

0800d3dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d3e8:	e005      	b.n	800d3f6 <pbuf_clen+0x1a>
    ++len;
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f6      	bne.n	800d3ea <pbuf_clen+0xe>
  }
  return len;
 800d3fc:	89fb      	ldrh	r3, [r7, #14]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
	...

0800d40c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d016      	beq.n	800d448 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800d41a:	f008 fbbd 	bl	8015b98 <sys_arch_protect>
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	89db      	ldrh	r3, [r3, #14]
 800d424:	3301      	adds	r3, #1
 800d426:	b29a      	uxth	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	81da      	strh	r2, [r3, #14]
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f008 fbc1 	bl	8015bb4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	89db      	ldrh	r3, [r3, #14]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d106      	bne.n	800d448 <pbuf_ref+0x3c>
 800d43a:	4b05      	ldr	r3, [pc, #20]	; (800d450 <pbuf_ref+0x44>)
 800d43c:	f240 3239 	movw	r2, #825	; 0x339
 800d440:	4904      	ldr	r1, [pc, #16]	; (800d454 <pbuf_ref+0x48>)
 800d442:	4805      	ldr	r0, [pc, #20]	; (800d458 <pbuf_ref+0x4c>)
 800d444:	f008 fc10 	bl	8015c68 <iprintf>
  }
}
 800d448:	bf00      	nop
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	08017ff4 	.word	0x08017ff4
 800d454:	080182bc 	.word	0x080182bc
 800d458:	08018040 	.word	0x08018040

0800d45c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <pbuf_cat+0x16>
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d107      	bne.n	800d482 <pbuf_cat+0x26>
 800d472:	4b20      	ldr	r3, [pc, #128]	; (800d4f4 <pbuf_cat+0x98>)
 800d474:	f240 324d 	movw	r2, #845	; 0x34d
 800d478:	491f      	ldr	r1, [pc, #124]	; (800d4f8 <pbuf_cat+0x9c>)
 800d47a:	4820      	ldr	r0, [pc, #128]	; (800d4fc <pbuf_cat+0xa0>)
 800d47c:	f008 fbf4 	bl	8015c68 <iprintf>
 800d480:	e034      	b.n	800d4ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	e00a      	b.n	800d49e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	891a      	ldrh	r2, [r3, #8]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	891b      	ldrh	r3, [r3, #8]
 800d490:	4413      	add	r3, r2
 800d492:	b29a      	uxth	r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1f0      	bne.n	800d488 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	891a      	ldrh	r2, [r3, #8]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	895b      	ldrh	r3, [r3, #10]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d006      	beq.n	800d4c0 <pbuf_cat+0x64>
 800d4b2:	4b10      	ldr	r3, [pc, #64]	; (800d4f4 <pbuf_cat+0x98>)
 800d4b4:	f240 3255 	movw	r2, #853	; 0x355
 800d4b8:	4911      	ldr	r1, [pc, #68]	; (800d500 <pbuf_cat+0xa4>)
 800d4ba:	4810      	ldr	r0, [pc, #64]	; (800d4fc <pbuf_cat+0xa0>)
 800d4bc:	f008 fbd4 	bl	8015c68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d006      	beq.n	800d4d6 <pbuf_cat+0x7a>
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <pbuf_cat+0x98>)
 800d4ca:	f240 3256 	movw	r2, #854	; 0x356
 800d4ce:	490d      	ldr	r1, [pc, #52]	; (800d504 <pbuf_cat+0xa8>)
 800d4d0:	480a      	ldr	r0, [pc, #40]	; (800d4fc <pbuf_cat+0xa0>)
 800d4d2:	f008 fbc9 	bl	8015c68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	891a      	ldrh	r2, [r3, #8]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	891b      	ldrh	r3, [r3, #8]
 800d4de:	4413      	add	r3, r2
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	683a      	ldr	r2, [r7, #0]
 800d4ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	08017ff4 	.word	0x08017ff4
 800d4f8:	080182d0 	.word	0x080182d0
 800d4fc:	08018040 	.word	0x08018040
 800d500:	08018308 	.word	0x08018308
 800d504:	08018338 	.word	0x08018338

0800d508 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d512:	2300      	movs	r3, #0
 800d514:	81fb      	strh	r3, [r7, #14]
 800d516:	2300      	movs	r3, #0
 800d518:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d008      	beq.n	800d532 <pbuf_copy+0x2a>
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d005      	beq.n	800d532 <pbuf_copy+0x2a>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	891a      	ldrh	r2, [r3, #8]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	891b      	ldrh	r3, [r3, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d209      	bcs.n	800d546 <pbuf_copy+0x3e>
 800d532:	4b54      	ldr	r3, [pc, #336]	; (800d684 <pbuf_copy+0x17c>)
 800d534:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d538:	4953      	ldr	r1, [pc, #332]	; (800d688 <pbuf_copy+0x180>)
 800d53a:	4854      	ldr	r0, [pc, #336]	; (800d68c <pbuf_copy+0x184>)
 800d53c:	f008 fb94 	bl	8015c68 <iprintf>
 800d540:	f06f 030f 	mvn.w	r3, #15
 800d544:	e099      	b.n	800d67a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	895b      	ldrh	r3, [r3, #10]
 800d54a:	461a      	mov	r2, r3
 800d54c:	89fb      	ldrh	r3, [r7, #14]
 800d54e:	1ad2      	subs	r2, r2, r3
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	895b      	ldrh	r3, [r3, #10]
 800d554:	4619      	mov	r1, r3
 800d556:	89bb      	ldrh	r3, [r7, #12]
 800d558:	1acb      	subs	r3, r1, r3
 800d55a:	429a      	cmp	r2, r3
 800d55c:	db05      	blt.n	800d56a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	895a      	ldrh	r2, [r3, #10]
 800d562:	89bb      	ldrh	r3, [r7, #12]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	817b      	strh	r3, [r7, #10]
 800d568:	e004      	b.n	800d574 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	895a      	ldrh	r2, [r3, #10]
 800d56e:	89fb      	ldrh	r3, [r7, #14]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685a      	ldr	r2, [r3, #4]
 800d578:	89fb      	ldrh	r3, [r7, #14]
 800d57a:	18d0      	adds	r0, r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	89bb      	ldrh	r3, [r7, #12]
 800d582:	4413      	add	r3, r2
 800d584:	897a      	ldrh	r2, [r7, #10]
 800d586:	4619      	mov	r1, r3
 800d588:	f008 fb5b 	bl	8015c42 <memcpy>
    offset_to += len;
 800d58c:	89fa      	ldrh	r2, [r7, #14]
 800d58e:	897b      	ldrh	r3, [r7, #10]
 800d590:	4413      	add	r3, r2
 800d592:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d594:	89ba      	ldrh	r2, [r7, #12]
 800d596:	897b      	ldrh	r3, [r7, #10]
 800d598:	4413      	add	r3, r2
 800d59a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	895b      	ldrh	r3, [r3, #10]
 800d5a0:	89fa      	ldrh	r2, [r7, #14]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d906      	bls.n	800d5b4 <pbuf_copy+0xac>
 800d5a6:	4b37      	ldr	r3, [pc, #220]	; (800d684 <pbuf_copy+0x17c>)
 800d5a8:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d5ac:	4938      	ldr	r1, [pc, #224]	; (800d690 <pbuf_copy+0x188>)
 800d5ae:	4837      	ldr	r0, [pc, #220]	; (800d68c <pbuf_copy+0x184>)
 800d5b0:	f008 fb5a 	bl	8015c68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	895b      	ldrh	r3, [r3, #10]
 800d5b8:	89ba      	ldrh	r2, [r7, #12]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d906      	bls.n	800d5cc <pbuf_copy+0xc4>
 800d5be:	4b31      	ldr	r3, [pc, #196]	; (800d684 <pbuf_copy+0x17c>)
 800d5c0:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d5c4:	4933      	ldr	r1, [pc, #204]	; (800d694 <pbuf_copy+0x18c>)
 800d5c6:	4831      	ldr	r0, [pc, #196]	; (800d68c <pbuf_copy+0x184>)
 800d5c8:	f008 fb4e 	bl	8015c68 <iprintf>
    if (offset_from >= p_from->len) {
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	895b      	ldrh	r3, [r3, #10]
 800d5d0:	89ba      	ldrh	r2, [r7, #12]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d304      	bcc.n	800d5e0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	895b      	ldrh	r3, [r3, #10]
 800d5e4:	89fa      	ldrh	r2, [r7, #14]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d114      	bne.n	800d614 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10c      	bne.n	800d614 <pbuf_copy+0x10c>
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d009      	beq.n	800d614 <pbuf_copy+0x10c>
 800d600:	4b20      	ldr	r3, [pc, #128]	; (800d684 <pbuf_copy+0x17c>)
 800d602:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d606:	4924      	ldr	r1, [pc, #144]	; (800d698 <pbuf_copy+0x190>)
 800d608:	4820      	ldr	r0, [pc, #128]	; (800d68c <pbuf_copy+0x184>)
 800d60a:	f008 fb2d 	bl	8015c68 <iprintf>
 800d60e:	f06f 030f 	mvn.w	r3, #15
 800d612:	e032      	b.n	800d67a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d013      	beq.n	800d642 <pbuf_copy+0x13a>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	895a      	ldrh	r2, [r3, #10]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	891b      	ldrh	r3, [r3, #8]
 800d622:	429a      	cmp	r2, r3
 800d624:	d10d      	bne.n	800d642 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d009      	beq.n	800d642 <pbuf_copy+0x13a>
 800d62e:	4b15      	ldr	r3, [pc, #84]	; (800d684 <pbuf_copy+0x17c>)
 800d630:	f240 32de 	movw	r2, #990	; 0x3de
 800d634:	4919      	ldr	r1, [pc, #100]	; (800d69c <pbuf_copy+0x194>)
 800d636:	4815      	ldr	r0, [pc, #84]	; (800d68c <pbuf_copy+0x184>)
 800d638:	f008 fb16 	bl	8015c68 <iprintf>
 800d63c:	f06f 0305 	mvn.w	r3, #5
 800d640:	e01b      	b.n	800d67a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d013      	beq.n	800d670 <pbuf_copy+0x168>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	895a      	ldrh	r2, [r3, #10]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	891b      	ldrh	r3, [r3, #8]
 800d650:	429a      	cmp	r2, r3
 800d652:	d10d      	bne.n	800d670 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d009      	beq.n	800d670 <pbuf_copy+0x168>
 800d65c:	4b09      	ldr	r3, [pc, #36]	; (800d684 <pbuf_copy+0x17c>)
 800d65e:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d662:	490e      	ldr	r1, [pc, #56]	; (800d69c <pbuf_copy+0x194>)
 800d664:	4809      	ldr	r0, [pc, #36]	; (800d68c <pbuf_copy+0x184>)
 800d666:	f008 faff 	bl	8015c68 <iprintf>
 800d66a:	f06f 0305 	mvn.w	r3, #5
 800d66e:	e004      	b.n	800d67a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	f47f af67 	bne.w	800d546 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	08017ff4 	.word	0x08017ff4
 800d688:	08018384 	.word	0x08018384
 800d68c:	08018040 	.word	0x08018040
 800d690:	080183b4 	.word	0x080183b4
 800d694:	080183cc 	.word	0x080183cc
 800d698:	080183e8 	.word	0x080183e8
 800d69c:	080183f8 	.word	0x080183f8

0800d6a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	80fb      	strh	r3, [r7, #6]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d108      	bne.n	800d6d2 <pbuf_copy_partial+0x32>
 800d6c0:	4b30      	ldr	r3, [pc, #192]	; (800d784 <pbuf_copy_partial+0xe4>)
 800d6c2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d6c6:	4930      	ldr	r1, [pc, #192]	; (800d788 <pbuf_copy_partial+0xe8>)
 800d6c8:	4830      	ldr	r0, [pc, #192]	; (800d78c <pbuf_copy_partial+0xec>)
 800d6ca:	f008 facd 	bl	8015c68 <iprintf>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e054      	b.n	800d77c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d108      	bne.n	800d6ea <pbuf_copy_partial+0x4a>
 800d6d8:	4b2a      	ldr	r3, [pc, #168]	; (800d784 <pbuf_copy_partial+0xe4>)
 800d6da:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d6de:	492c      	ldr	r1, [pc, #176]	; (800d790 <pbuf_copy_partial+0xf0>)
 800d6e0:	482a      	ldr	r0, [pc, #168]	; (800d78c <pbuf_copy_partial+0xec>)
 800d6e2:	f008 fac1 	bl	8015c68 <iprintf>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e048      	b.n	800d77c <pbuf_copy_partial+0xdc>

  left = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <pbuf_copy_partial+0x5a>
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <pbuf_copy_partial+0x5e>
    return 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e03e      	b.n	800d77c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	61fb      	str	r3, [r7, #28]
 800d702:	e034      	b.n	800d76e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800d704:	88bb      	ldrh	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <pbuf_copy_partial+0x80>
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	895b      	ldrh	r3, [r3, #10]
 800d70e:	88ba      	ldrh	r2, [r7, #4]
 800d710:	429a      	cmp	r2, r3
 800d712:	d305      	bcc.n	800d720 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	895b      	ldrh	r3, [r3, #10]
 800d718:	88ba      	ldrh	r2, [r7, #4]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	80bb      	strh	r3, [r7, #4]
 800d71e:	e023      	b.n	800d768 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	895a      	ldrh	r2, [r3, #10]
 800d724:	88bb      	ldrh	r3, [r7, #4]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d72a:	8b3a      	ldrh	r2, [r7, #24]
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d901      	bls.n	800d736 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800d732:	88fb      	ldrh	r3, [r7, #6]
 800d734:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800d736:	8b7b      	ldrh	r3, [r7, #26]
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	18d0      	adds	r0, r2, r3
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	685a      	ldr	r2, [r3, #4]
 800d740:	88bb      	ldrh	r3, [r7, #4]
 800d742:	4413      	add	r3, r2
 800d744:	8b3a      	ldrh	r2, [r7, #24]
 800d746:	4619      	mov	r1, r3
 800d748:	f008 fa7b 	bl	8015c42 <memcpy>
      copied_total += buf_copy_len;
 800d74c:	8afa      	ldrh	r2, [r7, #22]
 800d74e:	8b3b      	ldrh	r3, [r7, #24]
 800d750:	4413      	add	r3, r2
 800d752:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800d754:	8b7a      	ldrh	r2, [r7, #26]
 800d756:	8b3b      	ldrh	r3, [r7, #24]
 800d758:	4413      	add	r3, r2
 800d75a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800d75c:	88fa      	ldrh	r2, [r7, #6]
 800d75e:	8b3b      	ldrh	r3, [r7, #24]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	61fb      	str	r3, [r7, #28]
 800d76e:	88fb      	ldrh	r3, [r7, #6]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d002      	beq.n	800d77a <pbuf_copy_partial+0xda>
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1c4      	bne.n	800d704 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800d77a:	8afb      	ldrh	r3, [r7, #22]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3720      	adds	r7, #32
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	08017ff4 	.word	0x08017ff4
 800d788:	08018424 	.word	0x08018424
 800d78c:	08018040 	.word	0x08018040
 800d790:	08018444 	.word	0x08018444

0800d794 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d794:	b480      	push	{r7}
 800d796:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d798:	bf00      	nop
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d7a8:	f000 ffb6 	bl	800e718 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d7ac:	4b07      	ldr	r3, [pc, #28]	; (800d7cc <tcp_tmr+0x28>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <tcp_tmr+0x28>)
 800d7b6:	701a      	strb	r2, [r3, #0]
 800d7b8:	4b04      	ldr	r3, [pc, #16]	; (800d7cc <tcp_tmr+0x28>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d7c4:	f000 fce8 	bl	800e198 <tcp_slowtmr>
  }
}
 800d7c8:	bf00      	nop
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	2000421d 	.word	0x2000421d

0800d7d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	60fb      	str	r3, [r7, #12]
 800d7de:	e00a      	b.n	800d7f6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d102      	bne.n	800d7f0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	60fb      	str	r3, [r7, #12]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1f1      	bne.n	800d7e0 <tcp_remove_listener+0x10>
      }
   }
}
 800d7fc:	bf00      	nop
 800d7fe:	3714      	adds	r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d105      	bne.n	800d822 <tcp_listen_closed+0x1a>
 800d816:	4b13      	ldr	r3, [pc, #76]	; (800d864 <tcp_listen_closed+0x5c>)
 800d818:	22c0      	movs	r2, #192	; 0xc0
 800d81a:	4913      	ldr	r1, [pc, #76]	; (800d868 <tcp_listen_closed+0x60>)
 800d81c:	4813      	ldr	r0, [pc, #76]	; (800d86c <tcp_listen_closed+0x64>)
 800d81e:	f008 fa23 	bl	8015c68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7d1b      	ldrb	r3, [r3, #20]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d005      	beq.n	800d836 <tcp_listen_closed+0x2e>
 800d82a:	4b0e      	ldr	r3, [pc, #56]	; (800d864 <tcp_listen_closed+0x5c>)
 800d82c:	22c1      	movs	r2, #193	; 0xc1
 800d82e:	4910      	ldr	r1, [pc, #64]	; (800d870 <tcp_listen_closed+0x68>)
 800d830:	480e      	ldr	r0, [pc, #56]	; (800d86c <tcp_listen_closed+0x64>)
 800d832:	f008 fa19 	bl	8015c68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d836:	2301      	movs	r3, #1
 800d838:	60fb      	str	r3, [r7, #12]
 800d83a:	e00b      	b.n	800d854 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800d83c:	4a0d      	ldr	r2, [pc, #52]	; (800d874 <tcp_listen_closed+0x6c>)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	6879      	ldr	r1, [r7, #4]
 800d848:	4618      	mov	r0, r3
 800d84a:	f7ff ffc1 	bl	800d7d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	3301      	adds	r3, #1
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b03      	cmp	r3, #3
 800d858:	d9f0      	bls.n	800d83c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d85a:	bf00      	nop
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	08018578 	.word	0x08018578
 800d868:	080185a8 	.word	0x080185a8
 800d86c:	080185b4 	.word	0x080185b4
 800d870:	080185dc 	.word	0x080185dc
 800d874:	0801d5b4 	.word	0x0801d5b4

0800d878 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d878:	b5b0      	push	{r4, r5, r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af02      	add	r7, sp, #8
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	460b      	mov	r3, r1
 800d882:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d075      	beq.n	800d976 <tcp_close_shutdown+0xfe>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	7d1b      	ldrb	r3, [r3, #20]
 800d88e:	2b04      	cmp	r3, #4
 800d890:	d003      	beq.n	800d89a <tcp_close_shutdown+0x22>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7d1b      	ldrb	r3, [r3, #20]
 800d896:	2b07      	cmp	r3, #7
 800d898:	d16d      	bne.n	800d976 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d104      	bne.n	800d8ac <tcp_close_shutdown+0x34>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8aa:	d064      	beq.n	800d976 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	7e9b      	ldrb	r3, [r3, #26]
 800d8b0:	f003 0310 	and.w	r3, r3, #16
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d106      	bne.n	800d8c6 <tcp_close_shutdown+0x4e>
 800d8b8:	4b59      	ldr	r3, [pc, #356]	; (800da20 <tcp_close_shutdown+0x1a8>)
 800d8ba:	f240 120f 	movw	r2, #271	; 0x10f
 800d8be:	4959      	ldr	r1, [pc, #356]	; (800da24 <tcp_close_shutdown+0x1ac>)
 800d8c0:	4859      	ldr	r0, [pc, #356]	; (800da28 <tcp_close_shutdown+0x1b0>)
 800d8c2:	f008 f9d1 	bl	8015c68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d8ce:	687c      	ldr	r4, [r7, #4]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	1d1d      	adds	r5, r3, #4
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8adb      	ldrh	r3, [r3, #22]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	8b12      	ldrh	r2, [r2, #24]
 800d8dc:	9201      	str	r2, [sp, #4]
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	f004 ff1a 	bl	801271c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 fa4b 	bl	800ed84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d8ee:	4b4f      	ldr	r3, [pc, #316]	; (800da2c <tcp_close_shutdown+0x1b4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d105      	bne.n	800d904 <tcp_close_shutdown+0x8c>
 800d8f8:	4b4c      	ldr	r3, [pc, #304]	; (800da2c <tcp_close_shutdown+0x1b4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	4a4b      	ldr	r2, [pc, #300]	; (800da2c <tcp_close_shutdown+0x1b4>)
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	e013      	b.n	800d92c <tcp_close_shutdown+0xb4>
 800d904:	4b49      	ldr	r3, [pc, #292]	; (800da2c <tcp_close_shutdown+0x1b4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	60fb      	str	r3, [r7, #12]
 800d90a:	e00c      	b.n	800d926 <tcp_close_shutdown+0xae>
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	429a      	cmp	r2, r3
 800d914:	d104      	bne.n	800d920 <tcp_close_shutdown+0xa8>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	60da      	str	r2, [r3, #12]
 800d91e:	e005      	b.n	800d92c <tcp_close_shutdown+0xb4>
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1ef      	bne.n	800d90c <tcp_close_shutdown+0x94>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	60da      	str	r2, [r3, #12]
 800d932:	4b3f      	ldr	r3, [pc, #252]	; (800da30 <tcp_close_shutdown+0x1b8>)
 800d934:	2201      	movs	r2, #1
 800d936:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	7d1b      	ldrb	r3, [r3, #20]
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	d10c      	bne.n	800d95a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	220a      	movs	r2, #10
 800d944:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d946:	4b3b      	ldr	r3, [pc, #236]	; (800da34 <tcp_close_shutdown+0x1bc>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60da      	str	r2, [r3, #12]
 800d94e:	4a39      	ldr	r2, [pc, #228]	; (800da34 <tcp_close_shutdown+0x1bc>)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	f005 f934 	bl	8012bc0 <tcp_timer_needed>
 800d958:	e00b      	b.n	800d972 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800d95a:	4b37      	ldr	r3, [pc, #220]	; (800da38 <tcp_close_shutdown+0x1c0>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	429a      	cmp	r2, r3
 800d962:	d102      	bne.n	800d96a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800d964:	f003 fd72 	bl	801144c <tcp_trigger_input_pcb_close>
 800d968:	e003      	b.n	800d972 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	2001      	movs	r0, #1
 800d96e:	f7fe ff41 	bl	800c7f4 <memp_free>
        }
      }
      return ERR_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	e050      	b.n	800da18 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7d1b      	ldrb	r3, [r3, #20]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d02e      	beq.n	800d9dc <tcp_close_shutdown+0x164>
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d038      	beq.n	800d9f4 <tcp_close_shutdown+0x17c>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d142      	bne.n	800da0c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	8adb      	ldrh	r3, [r3, #22]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d021      	beq.n	800d9d2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d98e:	4b2b      	ldr	r3, [pc, #172]	; (800da3c <tcp_close_shutdown+0x1c4>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d105      	bne.n	800d9a4 <tcp_close_shutdown+0x12c>
 800d998:	4b28      	ldr	r3, [pc, #160]	; (800da3c <tcp_close_shutdown+0x1c4>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	4a27      	ldr	r2, [pc, #156]	; (800da3c <tcp_close_shutdown+0x1c4>)
 800d9a0:	6013      	str	r3, [r2, #0]
 800d9a2:	e013      	b.n	800d9cc <tcp_close_shutdown+0x154>
 800d9a4:	4b25      	ldr	r3, [pc, #148]	; (800da3c <tcp_close_shutdown+0x1c4>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	60bb      	str	r3, [r7, #8]
 800d9aa:	e00c      	b.n	800d9c6 <tcp_close_shutdown+0x14e>
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d104      	bne.n	800d9c0 <tcp_close_shutdown+0x148>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	60da      	str	r2, [r3, #12]
 800d9be:	e005      	b.n	800d9cc <tcp_close_shutdown+0x154>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	60bb      	str	r3, [r7, #8]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1ef      	bne.n	800d9ac <tcp_close_shutdown+0x134>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d9d2:	6879      	ldr	r1, [r7, #4]
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	f7fe ff0d 	bl	800c7f4 <memp_free>
    break;
 800d9da:	e01c      	b.n	800da16 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ff13 	bl	800d808 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	4816      	ldr	r0, [pc, #88]	; (800da40 <tcp_close_shutdown+0x1c8>)
 800d9e6:	f001 fa0f 	bl	800ee08 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d9ea:	6879      	ldr	r1, [r7, #4]
 800d9ec:	2002      	movs	r0, #2
 800d9ee:	f7fe ff01 	bl	800c7f4 <memp_free>
    break;
 800d9f2:	e010      	b.n	800da16 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d9f4:	6879      	ldr	r1, [r7, #4]
 800d9f6:	480d      	ldr	r0, [pc, #52]	; (800da2c <tcp_close_shutdown+0x1b4>)
 800d9f8:	f001 fa06 	bl	800ee08 <tcp_pcb_remove>
 800d9fc:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <tcp_close_shutdown+0x1b8>)
 800d9fe:	2201      	movs	r2, #1
 800da00:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800da02:	6879      	ldr	r1, [r7, #4]
 800da04:	2001      	movs	r0, #1
 800da06:	f7fe fef5 	bl	800c7f4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800da0a:	e004      	b.n	800da16 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f819 	bl	800da44 <tcp_close_shutdown_fin>
 800da12:	4603      	mov	r3, r0
 800da14:	e000      	b.n	800da18 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bdb0      	pop	{r4, r5, r7, pc}
 800da20:	08018578 	.word	0x08018578
 800da24:	080185f4 	.word	0x080185f4
 800da28:	080185b4 	.word	0x080185b4
 800da2c:	2000b100 	.word	0x2000b100
 800da30:	2000b0fc 	.word	0x2000b0fc
 800da34:	2000b110 	.word	0x2000b110
 800da38:	2000b114 	.word	0x2000b114
 800da3c:	2000b10c 	.word	0x2000b10c
 800da40:	2000b108 	.word	0x2000b108

0800da44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d106      	bne.n	800da60 <tcp_close_shutdown_fin+0x1c>
 800da52:	4b2c      	ldr	r3, [pc, #176]	; (800db04 <tcp_close_shutdown_fin+0xc0>)
 800da54:	f240 124d 	movw	r2, #333	; 0x14d
 800da58:	492b      	ldr	r1, [pc, #172]	; (800db08 <tcp_close_shutdown_fin+0xc4>)
 800da5a:	482c      	ldr	r0, [pc, #176]	; (800db0c <tcp_close_shutdown_fin+0xc8>)
 800da5c:	f008 f904 	bl	8015c68 <iprintf>

  switch (pcb->state) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	7d1b      	ldrb	r3, [r3, #20]
 800da64:	2b04      	cmp	r3, #4
 800da66:	d010      	beq.n	800da8a <tcp_close_shutdown_fin+0x46>
 800da68:	2b07      	cmp	r3, #7
 800da6a:	d01b      	beq.n	800daa4 <tcp_close_shutdown_fin+0x60>
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d126      	bne.n	800dabe <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f003 fd77 	bl	8011564 <tcp_send_fin>
 800da76:	4603      	mov	r3, r0
 800da78:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d11f      	bne.n	800dac2 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2205      	movs	r2, #5
 800da86:	751a      	strb	r2, [r3, #20]
    }
    break;
 800da88:	e01b      	b.n	800dac2 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f003 fd6a 	bl	8011564 <tcp_send_fin>
 800da90:	4603      	mov	r3, r0
 800da92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d114      	bne.n	800dac6 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2205      	movs	r2, #5
 800daa0:	751a      	strb	r2, [r3, #20]
    }
    break;
 800daa2:	e010      	b.n	800dac6 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f003 fd5d 	bl	8011564 <tcp_send_fin>
 800daaa:	4603      	mov	r3, r0
 800daac:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800daae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d109      	bne.n	800daca <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2209      	movs	r2, #9
 800daba:	751a      	strb	r2, [r3, #20]
    }
    break;
 800dabc:	e005      	b.n	800daca <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e01c      	b.n	800dafc <tcp_close_shutdown_fin+0xb8>
    break;
 800dac2:	bf00      	nop
 800dac4:	e002      	b.n	800dacc <tcp_close_shutdown_fin+0x88>
    break;
 800dac6:	bf00      	nop
 800dac8:	e000      	b.n	800dacc <tcp_close_shutdown_fin+0x88>
    break;
 800daca:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d103      	bne.n	800dadc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f004 fb97 	bl	8012208 <tcp_output>
 800dada:	e00d      	b.n	800daf8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800dadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae4:	d108      	bne.n	800daf8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	7e9b      	ldrb	r3, [r3, #26]
 800daea:	f043 0308 	orr.w	r3, r3, #8
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e001      	b.n	800dafc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800daf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	08018578 	.word	0x08018578
 800db08:	080185a8 	.word	0x080185a8
 800db0c:	080185b4 	.word	0x080185b4

0800db10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d006      	beq.n	800db2e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7e9b      	ldrb	r3, [r3, #26]
 800db24:	f043 0310 	orr.w	r3, r3, #16
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800db2e:	2101      	movs	r1, #1
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7ff fea1 	bl	800d878 <tcp_close_shutdown>
 800db36:	4603      	mov	r3, r0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	7d1b      	ldrb	r3, [r3, #20]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d102      	bne.n	800db5a <tcp_shutdown+0x1a>
    return ERR_CONN;
 800db54:	f06f 030a 	mvn.w	r3, #10
 800db58:	e035      	b.n	800dbc6 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01b      	beq.n	800db98 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	7e9b      	ldrb	r3, [r3, #26]
 800db64:	f043 0310 	orr.w	r3, r3, #16
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800db74:	2101      	movs	r1, #1
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f7ff fe7e 	bl	800d878 <tcp_close_shutdown>
 800db7c:	4603      	mov	r3, r0
 800db7e:	e022      	b.n	800dbc6 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7ff fb8b 	bl	800d2a8 <pbuf_free>
      pcb->refused_data = NULL;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d012      	beq.n	800dbc4 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	7d1b      	ldrb	r3, [r3, #20]
 800dba2:	2b03      	cmp	r3, #3
 800dba4:	db0b      	blt.n	800dbbe <tcp_shutdown+0x7e>
 800dba6:	2b04      	cmp	r3, #4
 800dba8:	dd01      	ble.n	800dbae <tcp_shutdown+0x6e>
 800dbaa:	2b07      	cmp	r3, #7
 800dbac:	d107      	bne.n	800dbbe <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f7ff fe5f 	bl	800d878 <tcp_close_shutdown>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	e003      	b.n	800dbc6 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800dbbe:	f06f 030a 	mvn.w	r3, #10
 800dbc2:	e000      	b.n	800dbc6 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
	...

0800dbd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08c      	sub	sp, #48	; 0x30
 800dbd4:	af02      	add	r7, sp, #8
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7d1b      	ldrb	r3, [r3, #20]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d106      	bne.n	800dbf0 <tcp_abandon+0x20>
 800dbe2:	4b4d      	ldr	r3, [pc, #308]	; (800dd18 <tcp_abandon+0x148>)
 800dbe4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dbe8:	494c      	ldr	r1, [pc, #304]	; (800dd1c <tcp_abandon+0x14c>)
 800dbea:	484d      	ldr	r0, [pc, #308]	; (800dd20 <tcp_abandon+0x150>)
 800dbec:	f008 f83c 	bl	8015c68 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7d1b      	ldrb	r3, [r3, #20]
 800dbf4:	2b0a      	cmp	r3, #10
 800dbf6:	d108      	bne.n	800dc0a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dbf8:	6879      	ldr	r1, [r7, #4]
 800dbfa:	484a      	ldr	r0, [pc, #296]	; (800dd24 <tcp_abandon+0x154>)
 800dbfc:	f001 f904 	bl	800ee08 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	2001      	movs	r0, #1
 800dc04:	f7fe fdf6 	bl	800c7f4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800dc08:	e081      	b.n	800dd0e <tcp_abandon+0x13e>
    int send_rst = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc16:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc24:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d126      	bne.n	800dc82 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	8adb      	ldrh	r3, [r3, #22]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d02e      	beq.n	800dc9a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc3c:	4b3a      	ldr	r3, [pc, #232]	; (800dd28 <tcp_abandon+0x158>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d105      	bne.n	800dc52 <tcp_abandon+0x82>
 800dc46:	4b38      	ldr	r3, [pc, #224]	; (800dd28 <tcp_abandon+0x158>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	4a36      	ldr	r2, [pc, #216]	; (800dd28 <tcp_abandon+0x158>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	e013      	b.n	800dc7a <tcp_abandon+0xaa>
 800dc52:	4b35      	ldr	r3, [pc, #212]	; (800dd28 <tcp_abandon+0x158>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	61fb      	str	r3, [r7, #28]
 800dc58:	e00c      	b.n	800dc74 <tcp_abandon+0xa4>
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d104      	bne.n	800dc6e <tcp_abandon+0x9e>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68da      	ldr	r2, [r3, #12]
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	60da      	str	r2, [r3, #12]
 800dc6c:	e005      	b.n	800dc7a <tcp_abandon+0xaa>
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	61fb      	str	r3, [r7, #28]
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1ef      	bne.n	800dc5a <tcp_abandon+0x8a>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	60da      	str	r2, [r3, #12]
 800dc80:	e00b      	b.n	800dc9a <tcp_abandon+0xca>
      send_rst = reset;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	8adb      	ldrh	r3, [r3, #22]
 800dc8a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	4827      	ldr	r0, [pc, #156]	; (800dd2c <tcp_abandon+0x15c>)
 800dc90:	f001 f8ba 	bl	800ee08 <tcp_pcb_remove>
 800dc94:	4b26      	ldr	r3, [pc, #152]	; (800dd30 <tcp_abandon+0x160>)
 800dc96:	2201      	movs	r2, #1
 800dc98:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d004      	beq.n	800dcac <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 fe03 	bl	800e8b2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d004      	beq.n	800dcbe <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f000 fdfa 	bl	800e8b2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d004      	beq.n	800dcd0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fdf1 	bl	800e8b2 <tcp_segs_free>
    if (send_rst) {
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00c      	beq.n	800dcf0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	1d19      	adds	r1, r3, #4
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	8b1b      	ldrh	r3, [r3, #24]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	460b      	mov	r3, r1
 800dce8:	6979      	ldr	r1, [r7, #20]
 800dcea:	69b8      	ldr	r0, [r7, #24]
 800dcec:	f004 fd16 	bl	801271c <tcp_rst>
    last_state = pcb->state;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	7d1b      	ldrb	r3, [r3, #20]
 800dcf4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	2001      	movs	r0, #1
 800dcfa:	f7fe fd7b 	bl	800c7f4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d004      	beq.n	800dd0e <tcp_abandon+0x13e>
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	f06f 010c 	mvn.w	r1, #12
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	4798      	blx	r3
}
 800dd0e:	bf00      	nop
 800dd10:	3728      	adds	r7, #40	; 0x28
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	08018578 	.word	0x08018578
 800dd1c:	08018610 	.word	0x08018610
 800dd20:	080185b4 	.word	0x080185b4
 800dd24:	2000b110 	.word	0x2000b110
 800dd28:	2000b10c 	.word	0x2000b10c
 800dd2c:	2000b100 	.word	0x2000b100
 800dd30:	2000b0fc 	.word	0x2000b0fc

0800dd34 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff ff46 	bl	800dbd0 <tcp_abandon>
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b088      	sub	sp, #32
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	4613      	mov	r3, r2
 800dd58:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dd5a:	2304      	movs	r3, #4
 800dd5c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dd64:	4b3c      	ldr	r3, [pc, #240]	; (800de58 <tcp_bind+0x10c>)
 800dd66:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <tcp_bind+0x28>
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <tcp_bind+0x2e>
    return ERR_VAL;
 800dd74:	f06f 0305 	mvn.w	r3, #5
 800dd78:	e06a      	b.n	800de50 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	7d1b      	ldrb	r3, [r3, #20]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d009      	beq.n	800dd96 <tcp_bind+0x4a>
 800dd82:	4b36      	ldr	r3, [pc, #216]	; (800de5c <tcp_bind+0x110>)
 800dd84:	f44f 7211 	mov.w	r2, #580	; 0x244
 800dd88:	4935      	ldr	r1, [pc, #212]	; (800de60 <tcp_bind+0x114>)
 800dd8a:	4836      	ldr	r0, [pc, #216]	; (800de64 <tcp_bind+0x118>)
 800dd8c:	f007 ff6c 	bl	8015c68 <iprintf>
 800dd90:	f06f 0305 	mvn.w	r3, #5
 800dd94:	e05c      	b.n	800de50 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800dd96:	88fb      	ldrh	r3, [r7, #6]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d109      	bne.n	800ddb0 <tcp_bind+0x64>
    port = tcp_new_port();
 800dd9c:	f000 f9b8 	bl	800e110 <tcp_new_port>
 800dda0:	4603      	mov	r3, r0
 800dda2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dda4:	88fb      	ldrh	r3, [r7, #6]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d135      	bne.n	800de16 <tcp_bind+0xca>
      return ERR_BUF;
 800ddaa:	f06f 0301 	mvn.w	r3, #1
 800ddae:	e04f      	b.n	800de50 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	61fb      	str	r3, [r7, #28]
 800ddb4:	e02b      	b.n	800de0e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ddb6:	4a2c      	ldr	r2, [pc, #176]	; (800de68 <tcp_bind+0x11c>)
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	61bb      	str	r3, [r7, #24]
 800ddc2:	e01e      	b.n	800de02 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	8adb      	ldrh	r3, [r3, #22]
 800ddc8:	88fa      	ldrh	r2, [r7, #6]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d116      	bne.n	800ddfc <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ddce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d010      	beq.n	800ddf6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00c      	beq.n	800ddf6 <tcp_bind+0xaa>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d009      	beq.n	800ddf6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d005      	beq.n	800ddf6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d102      	bne.n	800ddfc <tcp_bind+0xb0>
              return ERR_USE;
 800ddf6:	f06f 0307 	mvn.w	r3, #7
 800ddfa:	e029      	b.n	800de50 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	61bb      	str	r3, [r7, #24]
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1dd      	bne.n	800ddc4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	3301      	adds	r3, #1
 800de0c:	61fb      	str	r3, [r7, #28]
 800de0e:	69fa      	ldr	r2, [r7, #28]
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	429a      	cmp	r2, r3
 800de14:	dbcf      	blt.n	800ddb6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00c      	beq.n	800de36 <tcp_bind+0xea>
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d008      	beq.n	800de36 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d002      	beq.n	800de30 <tcp_bind+0xe4>
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	e000      	b.n	800de32 <tcp_bind+0xe6>
 800de30:	2300      	movs	r3, #0
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	88fa      	ldrh	r2, [r7, #6]
 800de3a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800de3c:	4b0b      	ldr	r3, [pc, #44]	; (800de6c <tcp_bind+0x120>)
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	60da      	str	r2, [r3, #12]
 800de44:	4a09      	ldr	r2, [pc, #36]	; (800de6c <tcp_bind+0x120>)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6013      	str	r3, [r2, #0]
 800de4a:	f004 feb9 	bl	8012bc0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3720      	adds	r7, #32
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	0801d5dc 	.word	0x0801d5dc
 800de5c:	08018578 	.word	0x08018578
 800de60:	08018644 	.word	0x08018644
 800de64:	080185b4 	.word	0x080185b4
 800de68:	0801d5b4 	.word	0x0801d5b4
 800de6c:	2000b10c 	.word	0x2000b10c

0800de70 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	4613      	mov	r3, r2
 800de7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800de7e:	68b8      	ldr	r0, [r7, #8]
 800de80:	f7ff ff58 	bl	800dd34 <tcp_abort>

  return ERR_ABRT;
 800de84:	f06f 030c 	mvn.w	r3, #12
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	460b      	mov	r3, r1
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	7d1b      	ldrb	r3, [r3, #20]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d009      	beq.n	800debe <tcp_listen_with_backlog_and_err+0x2e>
 800deaa:	4b3f      	ldr	r3, [pc, #252]	; (800dfa8 <tcp_listen_with_backlog_and_err+0x118>)
 800deac:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800deb0:	493e      	ldr	r1, [pc, #248]	; (800dfac <tcp_listen_with_backlog_and_err+0x11c>)
 800deb2:	483f      	ldr	r0, [pc, #252]	; (800dfb0 <tcp_listen_with_backlog_and_err+0x120>)
 800deb4:	f007 fed8 	bl	8015c68 <iprintf>
 800deb8:	23f1      	movs	r3, #241	; 0xf1
 800deba:	76fb      	strb	r3, [r7, #27]
 800debc:	e069      	b.n	800df92 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d104      	bne.n	800ded0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800deca:	23f7      	movs	r3, #247	; 0xf7
 800decc:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dece:	e060      	b.n	800df92 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ded0:	2002      	movs	r0, #2
 800ded2:	f7fe fc3d 	bl	800c750 <memp_malloc>
 800ded6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d102      	bne.n	800dee4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800dede:	23ff      	movs	r3, #255	; 0xff
 800dee0:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dee2:	e056      	b.n	800df92 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	691a      	ldr	r2, [r3, #16]
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	8ada      	ldrh	r2, [r3, #22]
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	2201      	movs	r2, #1
 800def8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	7d5a      	ldrb	r2, [r3, #21]
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	7a1a      	ldrb	r2, [r3, #8]
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	7a9a      	ldrb	r2, [r3, #10]
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	7a5a      	ldrb	r2, [r3, #9]
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	8adb      	ldrh	r3, [r3, #22]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d021      	beq.n	800df6e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800df2a:	4b22      	ldr	r3, [pc, #136]	; (800dfb4 <tcp_listen_with_backlog_and_err+0x124>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	429a      	cmp	r2, r3
 800df32:	d105      	bne.n	800df40 <tcp_listen_with_backlog_and_err+0xb0>
 800df34:	4b1f      	ldr	r3, [pc, #124]	; (800dfb4 <tcp_listen_with_backlog_and_err+0x124>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	4a1e      	ldr	r2, [pc, #120]	; (800dfb4 <tcp_listen_with_backlog_and_err+0x124>)
 800df3c:	6013      	str	r3, [r2, #0]
 800df3e:	e013      	b.n	800df68 <tcp_listen_with_backlog_and_err+0xd8>
 800df40:	4b1c      	ldr	r3, [pc, #112]	; (800dfb4 <tcp_listen_with_backlog_and_err+0x124>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	617b      	str	r3, [r7, #20]
 800df46:	e00c      	b.n	800df62 <tcp_listen_with_backlog_and_err+0xd2>
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d104      	bne.n	800df5c <tcp_listen_with_backlog_and_err+0xcc>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	68da      	ldr	r2, [r3, #12]
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	60da      	str	r2, [r3, #12]
 800df5a:	e005      	b.n	800df68 <tcp_listen_with_backlog_and_err+0xd8>
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	617b      	str	r3, [r7, #20]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1ef      	bne.n	800df48 <tcp_listen_with_backlog_and_err+0xb8>
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800df6e:	68f9      	ldr	r1, [r7, #12]
 800df70:	2001      	movs	r0, #1
 800df72:	f7fe fc3f 	bl	800c7f4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4a0f      	ldr	r2, [pc, #60]	; (800dfb8 <tcp_listen_with_backlog_and_err+0x128>)
 800df7a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800df7c:	4b0f      	ldr	r3, [pc, #60]	; (800dfbc <tcp_listen_with_backlog_and_err+0x12c>)
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	60da      	str	r2, [r3, #12]
 800df84:	4a0d      	ldr	r2, [pc, #52]	; (800dfbc <tcp_listen_with_backlog_and_err+0x12c>)
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	6013      	str	r3, [r2, #0]
 800df8a:	f004 fe19 	bl	8012bc0 <tcp_timer_needed>
  res = ERR_OK;
 800df8e:	2300      	movs	r3, #0
 800df90:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	7efa      	ldrb	r2, [r7, #27]
 800df9c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800df9e:	69fb      	ldr	r3, [r7, #28]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3720      	adds	r7, #32
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	08018578 	.word	0x08018578
 800dfac:	0801866c 	.word	0x0801866c
 800dfb0:	080185b4 	.word	0x080185b4
 800dfb4:	2000b10c 	.word	0x2000b10c
 800dfb8:	0800de71 	.word	0x0800de71
 800dfbc:	2000b108 	.word	0x2000b108

0800dfc0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfd0:	4413      	add	r3, r2
 800dfd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dfdc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dfe0:	bf28      	it	cs
 800dfe2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dfe6:	b292      	uxth	r2, r2
 800dfe8:	4413      	add	r3, r2
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	db08      	blt.n	800e004 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	e020      	b.n	800e046 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	dd03      	ble.n	800e01a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e018:	e014      	b.n	800e044 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e02c:	d306      	bcc.n	800e03c <tcp_update_rcv_ann_wnd+0x7c>
 800e02e:	4b08      	ldr	r3, [pc, #32]	; (800e050 <tcp_update_rcv_ann_wnd+0x90>)
 800e030:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e034:	4907      	ldr	r1, [pc, #28]	; (800e054 <tcp_update_rcv_ann_wnd+0x94>)
 800e036:	4808      	ldr	r0, [pc, #32]	; (800e058 <tcp_update_rcv_ann_wnd+0x98>)
 800e038:	f007 fe16 	bl	8015c68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e044:	2300      	movs	r3, #0
  }
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	08018578 	.word	0x08018578
 800e054:	08018690 	.word	0x08018690
 800e058:	080185b4 	.word	0x080185b4

0800e05c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7d1b      	ldrb	r3, [r3, #20]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d106      	bne.n	800e07e <tcp_recved+0x22>
 800e070:	4b23      	ldr	r3, [pc, #140]	; (800e100 <tcp_recved+0xa4>)
 800e072:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e076:	4923      	ldr	r1, [pc, #140]	; (800e104 <tcp_recved+0xa8>)
 800e078:	4823      	ldr	r0, [pc, #140]	; (800e108 <tcp_recved+0xac>)
 800e07a:	f007 fdf5 	bl	8015c68 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e082:	887b      	ldrh	r3, [r7, #2]
 800e084:	4413      	add	r3, r2
 800e086:	b29a      	uxth	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e090:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e094:	d904      	bls.n	800e0a0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e09c:	851a      	strh	r2, [r3, #40]	; 0x28
 800e09e:	e017      	b.n	800e0d0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d113      	bne.n	800e0d0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7d1b      	ldrb	r3, [r3, #20]
 800e0ac:	2b07      	cmp	r3, #7
 800e0ae:	d003      	beq.n	800e0b8 <tcp_recved+0x5c>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	7d1b      	ldrb	r3, [r3, #20]
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	d104      	bne.n	800e0c2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0be:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0c0:	e006      	b.n	800e0d0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e0c2:	4b0f      	ldr	r3, [pc, #60]	; (800e100 <tcp_recved+0xa4>)
 800e0c4:	f240 322d 	movw	r2, #813	; 0x32d
 800e0c8:	4910      	ldr	r1, [pc, #64]	; (800e10c <tcp_recved+0xb0>)
 800e0ca:	480f      	ldr	r0, [pc, #60]	; (800e108 <tcp_recved+0xac>)
 800e0cc:	f007 fdcc 	bl	8015c68 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff ff75 	bl	800dfc0 <tcp_update_rcv_ann_wnd>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0e0:	db09      	blt.n	800e0f6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	7e9b      	ldrb	r3, [r3, #26]
 800e0e6:	f043 0302 	orr.w	r3, r3, #2
 800e0ea:	b2da      	uxtb	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f004 f889 	bl	8012208 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0f6:	bf00      	nop
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	08018578 	.word	0x08018578
 800e104:	080186ac 	.word	0x080186ac
 800e108:	080185b4 	.word	0x080185b4
 800e10c:	080186d4 	.word	0x080186d4

0800e110 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800e11a:	4b1d      	ldr	r3, [pc, #116]	; (800e190 <tcp_new_port+0x80>)
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	b291      	uxth	r1, r2
 800e122:	4a1b      	ldr	r2, [pc, #108]	; (800e190 <tcp_new_port+0x80>)
 800e124:	8011      	strh	r1, [r2, #0]
 800e126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d103      	bne.n	800e136 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e12e:	4b18      	ldr	r3, [pc, #96]	; (800e190 <tcp_new_port+0x80>)
 800e130:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e134:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e136:	2300      	movs	r3, #0
 800e138:	71fb      	strb	r3, [r7, #7]
 800e13a:	e01e      	b.n	800e17a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e13c:	79fb      	ldrb	r3, [r7, #7]
 800e13e:	4a15      	ldr	r2, [pc, #84]	; (800e194 <tcp_new_port+0x84>)
 800e140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	e011      	b.n	800e16e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	8ada      	ldrh	r2, [r3, #22]
 800e14e:	4b10      	ldr	r3, [pc, #64]	; (800e190 <tcp_new_port+0x80>)
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	429a      	cmp	r2, r3
 800e154:	d108      	bne.n	800e168 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e156:	88bb      	ldrh	r3, [r7, #4]
 800e158:	3301      	adds	r3, #1
 800e15a:	80bb      	strh	r3, [r7, #4]
 800e15c:	88bb      	ldrh	r3, [r7, #4]
 800e15e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e162:	d3da      	bcc.n	800e11a <tcp_new_port+0xa>
          return 0;
 800e164:	2300      	movs	r3, #0
 800e166:	e00d      	b.n	800e184 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	603b      	str	r3, [r7, #0]
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1ea      	bne.n	800e14a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	3301      	adds	r3, #1
 800e178:	71fb      	strb	r3, [r7, #7]
 800e17a:	79fb      	ldrb	r3, [r7, #7]
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	d9dd      	bls.n	800e13c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e180:	4b03      	ldr	r3, [pc, #12]	; (800e190 <tcp_new_port+0x80>)
 800e182:	881b      	ldrh	r3, [r3, #0]
}
 800e184:	4618      	mov	r0, r3
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	20000028 	.word	0x20000028
 800e194:	0801d5b4 	.word	0x0801d5b4

0800e198 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e198:	b5b0      	push	{r4, r5, r7, lr}
 800e19a:	b08c      	sub	sp, #48	; 0x30
 800e19c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e1a2:	4b96      	ldr	r3, [pc, #600]	; (800e3fc <tcp_slowtmr+0x264>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	4a94      	ldr	r2, [pc, #592]	; (800e3fc <tcp_slowtmr+0x264>)
 800e1aa:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e1ac:	4b94      	ldr	r3, [pc, #592]	; (800e400 <tcp_slowtmr+0x268>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	4b92      	ldr	r3, [pc, #584]	; (800e400 <tcp_slowtmr+0x268>)
 800e1b6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e1bc:	4b91      	ldr	r3, [pc, #580]	; (800e404 <tcp_slowtmr+0x26c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e1c2:	e227      	b.n	800e614 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	7d1b      	ldrb	r3, [r3, #20]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <tcp_slowtmr+0x42>
 800e1cc:	4b8e      	ldr	r3, [pc, #568]	; (800e408 <tcp_slowtmr+0x270>)
 800e1ce:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e1d2:	498e      	ldr	r1, [pc, #568]	; (800e40c <tcp_slowtmr+0x274>)
 800e1d4:	488e      	ldr	r0, [pc, #568]	; (800e410 <tcp_slowtmr+0x278>)
 800e1d6:	f007 fd47 	bl	8015c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	7d1b      	ldrb	r3, [r3, #20]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d106      	bne.n	800e1f0 <tcp_slowtmr+0x58>
 800e1e2:	4b89      	ldr	r3, [pc, #548]	; (800e408 <tcp_slowtmr+0x270>)
 800e1e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e1e8:	498a      	ldr	r1, [pc, #552]	; (800e414 <tcp_slowtmr+0x27c>)
 800e1ea:	4889      	ldr	r0, [pc, #548]	; (800e410 <tcp_slowtmr+0x278>)
 800e1ec:	f007 fd3c 	bl	8015c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	7d1b      	ldrb	r3, [r3, #20]
 800e1f4:	2b0a      	cmp	r3, #10
 800e1f6:	d106      	bne.n	800e206 <tcp_slowtmr+0x6e>
 800e1f8:	4b83      	ldr	r3, [pc, #524]	; (800e408 <tcp_slowtmr+0x270>)
 800e1fa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e1fe:	4986      	ldr	r1, [pc, #536]	; (800e418 <tcp_slowtmr+0x280>)
 800e200:	4883      	ldr	r0, [pc, #524]	; (800e410 <tcp_slowtmr+0x278>)
 800e202:	f007 fd31 	bl	8015c68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e208:	7f5a      	ldrb	r2, [r3, #29]
 800e20a:	4b7d      	ldr	r3, [pc, #500]	; (800e400 <tcp_slowtmr+0x268>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d103      	bne.n	800e21a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e218:	e1fc      	b.n	800e614 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e21a:	4b79      	ldr	r3, [pc, #484]	; (800e400 <tcp_slowtmr+0x268>)
 800e21c:	781a      	ldrb	r2, [r3, #0]
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e226:	2300      	movs	r3, #0
 800e228:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	7d1b      	ldrb	r3, [r3, #20]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d108      	bne.n	800e244 <tcp_slowtmr+0xac>
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e238:	2b05      	cmp	r3, #5
 800e23a:	d903      	bls.n	800e244 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e23c:	7ffb      	ldrb	r3, [r7, #31]
 800e23e:	3301      	adds	r3, #1
 800e240:	77fb      	strb	r3, [r7, #31]
 800e242:	e0a2      	b.n	800e38a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e24a:	2b0b      	cmp	r3, #11
 800e24c:	d903      	bls.n	800e256 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e24e:	7ffb      	ldrb	r3, [r7, #31]
 800e250:	3301      	adds	r3, #1
 800e252:	77fb      	strb	r3, [r7, #31]
 800e254:	e099      	b.n	800e38a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d032      	beq.n	800e2c6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e266:	3b01      	subs	r3, #1
 800e268:	4a6c      	ldr	r2, [pc, #432]	; (800e41c <tcp_slowtmr+0x284>)
 800e26a:	5cd3      	ldrb	r3, [r2, r3]
 800e26c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800e26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e270:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e274:	7cfa      	ldrb	r2, [r7, #19]
 800e276:	429a      	cmp	r2, r3
 800e278:	d907      	bls.n	800e28a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e280:	3301      	adds	r3, #1
 800e282:	b2da      	uxtb	r2, r3
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e290:	7cfa      	ldrb	r2, [r7, #19]
 800e292:	429a      	cmp	r2, r3
 800e294:	d879      	bhi.n	800e38a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e298:	f004 fbd2 	bl	8012a40 <tcp_zero_window_probe>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d173      	bne.n	800e38a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e2b0:	2b06      	cmp	r3, #6
 800e2b2:	d86a      	bhi.n	800e38a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e2c4:	e061      	b.n	800e38a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	db08      	blt.n	800e2e2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	3301      	adds	r3, #1
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	b21a      	sxth	r2, r3
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d04f      	beq.n	800e38a <tcp_slowtmr+0x1f2>
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	db47      	blt.n	800e38a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	7d1b      	ldrb	r3, [r3, #20]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d018      	beq.n	800e334 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e308:	2b0c      	cmp	r3, #12
 800e30a:	bf28      	it	cs
 800e30c:	230c      	movcs	r3, #12
 800e30e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e316:	10db      	asrs	r3, r3, #3
 800e318:	b21b      	sxth	r3, r3
 800e31a:	461a      	mov	r2, r3
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e322:	4413      	add	r3, r2
 800e324:	7dfa      	ldrb	r2, [r7, #23]
 800e326:	493e      	ldr	r1, [pc, #248]	; (800e420 <tcp_slowtmr+0x288>)
 800e328:	5c8a      	ldrb	r2, [r1, r2]
 800e32a:	4093      	lsls	r3, r2
 800e32c:	b21a      	sxth	r2, r3
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e336:	2200      	movs	r2, #0
 800e338:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e346:	4293      	cmp	r3, r2
 800e348:	bf28      	it	cs
 800e34a:	4613      	movcs	r3, r2
 800e34c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800e34e:	8abb      	ldrh	r3, [r7, #20]
 800e350:	085b      	lsrs	r3, r3, #1
 800e352:	b29a      	uxth	r2, r3
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	b29b      	uxth	r3, r3
 800e368:	429a      	cmp	r2, r3
 800e36a:	d206      	bcs.n	800e37a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	b29a      	uxth	r2, r3
 800e374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e376:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e380:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e386:	f004 fa3f 	bl	8012808 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	7d1b      	ldrb	r3, [r3, #20]
 800e38e:	2b06      	cmp	r3, #6
 800e390:	d10f      	bne.n	800e3b2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	7e9b      	ldrb	r3, [r3, #26]
 800e396:	f003 0310 	and.w	r3, r3, #16
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d009      	beq.n	800e3b2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e39e:	4b17      	ldr	r3, [pc, #92]	; (800e3fc <tcp_slowtmr+0x264>)
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	6a1b      	ldr	r3, [r3, #32]
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	2b28      	cmp	r3, #40	; 0x28
 800e3aa:	d902      	bls.n	800e3b2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e3ac:	7ffb      	ldrb	r3, [r7, #31]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	7a1b      	ldrb	r3, [r3, #8]
 800e3b6:	f003 0308 	and.w	r3, r3, #8
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d05d      	beq.n	800e47a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e3c2:	2b04      	cmp	r3, #4
 800e3c4:	d003      	beq.n	800e3ce <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800e3ca:	2b07      	cmp	r3, #7
 800e3cc:	d155      	bne.n	800e47a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <tcp_slowtmr+0x264>)
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e3de:	4b11      	ldr	r3, [pc, #68]	; (800e424 <tcp_slowtmr+0x28c>)
 800e3e0:	440b      	add	r3, r1
 800e3e2:	4911      	ldr	r1, [pc, #68]	; (800e428 <tcp_slowtmr+0x290>)
 800e3e4:	fba1 1303 	umull	r1, r3, r1, r3
 800e3e8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d91e      	bls.n	800e42c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e3ee:	7ffb      	ldrb	r3, [r7, #31]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800e3f4:	7fbb      	ldrb	r3, [r7, #30]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	77bb      	strb	r3, [r7, #30]
 800e3fa:	e03e      	b.n	800e47a <tcp_slowtmr+0x2e2>
 800e3fc:	2000b104 	.word	0x2000b104
 800e400:	2000421e 	.word	0x2000421e
 800e404:	2000b100 	.word	0x2000b100
 800e408:	08018578 	.word	0x08018578
 800e40c:	08018728 	.word	0x08018728
 800e410:	080185b4 	.word	0x080185b4
 800e414:	08018754 	.word	0x08018754
 800e418:	08018780 	.word	0x08018780
 800e41c:	0801d5ac 	.word	0x0801d5ac
 800e420:	0801d59c 	.word	0x0801d59c
 800e424:	000a4cb8 	.word	0x000a4cb8
 800e428:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e42c:	4b97      	ldr	r3, [pc, #604]	; (800e68c <tcp_slowtmr+0x4f4>)
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	6a1b      	ldr	r3, [r3, #32]
 800e434:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e442:	4618      	mov	r0, r3
 800e444:	4b92      	ldr	r3, [pc, #584]	; (800e690 <tcp_slowtmr+0x4f8>)
 800e446:	fb03 f300 	mul.w	r3, r3, r0
 800e44a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800e44c:	4991      	ldr	r1, [pc, #580]	; (800e694 <tcp_slowtmr+0x4fc>)
 800e44e:	fba1 1303 	umull	r1, r3, r1, r3
 800e452:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e454:	429a      	cmp	r2, r3
 800e456:	d910      	bls.n	800e47a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800e458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e45a:	f004 fab4 	bl	80129c6 <tcp_keepalive>
 800e45e:	4603      	mov	r3, r0
 800e460:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800e462:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d107      	bne.n	800e47a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e470:	3301      	adds	r3, #1
 800e472:	b2da      	uxtb	r2, r3
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d016      	beq.n	800e4b0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800e482:	4b82      	ldr	r3, [pc, #520]	; (800e68c <tcp_slowtmr+0x4f4>)
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	6a1b      	ldr	r3, [r3, #32]
 800e48a:	1ad2      	subs	r2, r2, r3
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e492:	4619      	mov	r1, r3
 800e494:	460b      	mov	r3, r1
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	440b      	add	r3, r1
 800e49a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d307      	bcc.n	800e4b0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 fa04 	bl	800e8b2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d109      	bne.n	800e4cc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4b8:	4b74      	ldr	r3, [pc, #464]	; (800e68c <tcp_slowtmr+0x4f4>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	6a1b      	ldr	r3, [r3, #32]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	2b28      	cmp	r3, #40	; 0x28
 800e4c4:	d902      	bls.n	800e4cc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e4c6:	7ffb      	ldrb	r3, [r7, #31]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	7d1b      	ldrb	r3, [r3, #20]
 800e4d0:	2b09      	cmp	r3, #9
 800e4d2:	d109      	bne.n	800e4e8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e4d4:	4b6d      	ldr	r3, [pc, #436]	; (800e68c <tcp_slowtmr+0x4f4>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	6a1b      	ldr	r3, [r3, #32]
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	2bf0      	cmp	r3, #240	; 0xf0
 800e4e0:	d902      	bls.n	800e4e8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800e4e2:	7ffb      	ldrb	r3, [r7, #31]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e4e8:	7ffb      	ldrb	r3, [r7, #31]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d05d      	beq.n	800e5aa <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e4f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f8:	f000 fc44 	bl	800ed84 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e4fc:	6a3b      	ldr	r3, [r7, #32]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d010      	beq.n	800e524 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e502:	4b65      	ldr	r3, [pc, #404]	; (800e698 <tcp_slowtmr+0x500>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e508:	429a      	cmp	r2, r3
 800e50a:	d106      	bne.n	800e51a <tcp_slowtmr+0x382>
 800e50c:	4b63      	ldr	r3, [pc, #396]	; (800e69c <tcp_slowtmr+0x504>)
 800e50e:	f240 4289 	movw	r2, #1161	; 0x489
 800e512:	4963      	ldr	r1, [pc, #396]	; (800e6a0 <tcp_slowtmr+0x508>)
 800e514:	4863      	ldr	r0, [pc, #396]	; (800e6a4 <tcp_slowtmr+0x50c>)
 800e516:	f007 fba7 	bl	8015c68 <iprintf>
        prev->next = pcb->next;
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	6a3b      	ldr	r3, [r7, #32]
 800e520:	60da      	str	r2, [r3, #12]
 800e522:	e00f      	b.n	800e544 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e524:	4b5c      	ldr	r3, [pc, #368]	; (800e698 <tcp_slowtmr+0x500>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d006      	beq.n	800e53c <tcp_slowtmr+0x3a4>
 800e52e:	4b5b      	ldr	r3, [pc, #364]	; (800e69c <tcp_slowtmr+0x504>)
 800e530:	f240 428d 	movw	r2, #1165	; 0x48d
 800e534:	495c      	ldr	r1, [pc, #368]	; (800e6a8 <tcp_slowtmr+0x510>)
 800e536:	485b      	ldr	r0, [pc, #364]	; (800e6a4 <tcp_slowtmr+0x50c>)
 800e538:	f007 fb96 	bl	8015c68 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	4a55      	ldr	r2, [pc, #340]	; (800e698 <tcp_slowtmr+0x500>)
 800e542:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e544:	7fbb      	ldrb	r3, [r7, #30]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d010      	beq.n	800e56c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e552:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	1d1d      	adds	r5, r3, #4
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	8adb      	ldrh	r3, [r3, #22]
 800e55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55e:	8b12      	ldrh	r2, [r2, #24]
 800e560:	9201      	str	r2, [sp, #4]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	462b      	mov	r3, r5
 800e566:	4622      	mov	r2, r4
 800e568:	f004 f8d8 	bl	801271c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e582:	6839      	ldr	r1, [r7, #0]
 800e584:	2001      	movs	r0, #1
 800e586:	f7fe f935 	bl	800c7f4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800e58a:	4b48      	ldr	r3, [pc, #288]	; (800e6ac <tcp_slowtmr+0x514>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d004      	beq.n	800e5a0 <tcp_slowtmr+0x408>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f06f 010c 	mvn.w	r1, #12
 800e59c:	68b8      	ldr	r0, [r7, #8]
 800e59e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e5a0:	4b42      	ldr	r3, [pc, #264]	; (800e6ac <tcp_slowtmr+0x514>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d035      	beq.n	800e614 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800e5a8:	e606      	b.n	800e1b8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	7edb      	ldrb	r3, [r3, #27]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
 800e5c2:	7eda      	ldrb	r2, [r3, #27]
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	7f1b      	ldrb	r3, [r3, #28]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d323      	bcc.n	800e614 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e5d2:	4b36      	ldr	r3, [pc, #216]	; (800e6ac <tcp_slowtmr+0x514>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00a      	beq.n	800e5f8 <tcp_slowtmr+0x460>
 800e5e2:	6a3b      	ldr	r3, [r7, #32]
 800e5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e8:	6a3a      	ldr	r2, [r7, #32]
 800e5ea:	6912      	ldr	r2, [r2, #16]
 800e5ec:	6a39      	ldr	r1, [r7, #32]
 800e5ee:	4610      	mov	r0, r2
 800e5f0:	4798      	blx	r3
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	777b      	strb	r3, [r7, #29]
 800e5f6:	e001      	b.n	800e5fc <tcp_slowtmr+0x464>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800e5fc:	4b2b      	ldr	r3, [pc, #172]	; (800e6ac <tcp_slowtmr+0x514>)
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d000      	beq.n	800e606 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800e604:	e5d8      	b.n	800e1b8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e606:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d102      	bne.n	800e614 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800e60e:	6a38      	ldr	r0, [r7, #32]
 800e610:	f003 fdfa 	bl	8012208 <tcp_output>
  while (pcb != NULL) {
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	2b00      	cmp	r3, #0
 800e618:	f47f add4 	bne.w	800e1c4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e61c:	2300      	movs	r3, #0
 800e61e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800e620:	4b23      	ldr	r3, [pc, #140]	; (800e6b0 <tcp_slowtmr+0x518>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e626:	e068      	b.n	800e6fa <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	7d1b      	ldrb	r3, [r3, #20]
 800e62c:	2b0a      	cmp	r3, #10
 800e62e:	d006      	beq.n	800e63e <tcp_slowtmr+0x4a6>
 800e630:	4b1a      	ldr	r3, [pc, #104]	; (800e69c <tcp_slowtmr+0x504>)
 800e632:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e636:	491f      	ldr	r1, [pc, #124]	; (800e6b4 <tcp_slowtmr+0x51c>)
 800e638:	481a      	ldr	r0, [pc, #104]	; (800e6a4 <tcp_slowtmr+0x50c>)
 800e63a:	f007 fb15 	bl	8015c68 <iprintf>
    pcb_remove = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e642:	4b12      	ldr	r3, [pc, #72]	; (800e68c <tcp_slowtmr+0x4f4>)
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	2bf0      	cmp	r3, #240	; 0xf0
 800e64e:	d902      	bls.n	800e656 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800e650:	7ffb      	ldrb	r3, [r7, #31]
 800e652:	3301      	adds	r3, #1
 800e654:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e656:	7ffb      	ldrb	r3, [r7, #31]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d049      	beq.n	800e6f0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e65c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e65e:	f000 fb91 	bl	800ed84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d029      	beq.n	800e6bc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e668:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <tcp_slowtmr+0x518>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e66e:	429a      	cmp	r2, r3
 800e670:	d106      	bne.n	800e680 <tcp_slowtmr+0x4e8>
 800e672:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <tcp_slowtmr+0x504>)
 800e674:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800e678:	490f      	ldr	r1, [pc, #60]	; (800e6b8 <tcp_slowtmr+0x520>)
 800e67a:	480a      	ldr	r0, [pc, #40]	; (800e6a4 <tcp_slowtmr+0x50c>)
 800e67c:	f007 faf4 	bl	8015c68 <iprintf>
        prev->next = pcb->next;
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	60da      	str	r2, [r3, #12]
 800e688:	e028      	b.n	800e6dc <tcp_slowtmr+0x544>
 800e68a:	bf00      	nop
 800e68c:	2000b104 	.word	0x2000b104
 800e690:	000124f8 	.word	0x000124f8
 800e694:	10624dd3 	.word	0x10624dd3
 800e698:	2000b100 	.word	0x2000b100
 800e69c:	08018578 	.word	0x08018578
 800e6a0:	080187b0 	.word	0x080187b0
 800e6a4:	080185b4 	.word	0x080185b4
 800e6a8:	080187dc 	.word	0x080187dc
 800e6ac:	2000b0fc 	.word	0x2000b0fc
 800e6b0:	2000b110 	.word	0x2000b110
 800e6b4:	08018808 	.word	0x08018808
 800e6b8:	08018838 	.word	0x08018838
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e6bc:	4b12      	ldr	r3, [pc, #72]	; (800e708 <tcp_slowtmr+0x570>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d006      	beq.n	800e6d4 <tcp_slowtmr+0x53c>
 800e6c6:	4b11      	ldr	r3, [pc, #68]	; (800e70c <tcp_slowtmr+0x574>)
 800e6c8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800e6cc:	4910      	ldr	r1, [pc, #64]	; (800e710 <tcp_slowtmr+0x578>)
 800e6ce:	4811      	ldr	r0, [pc, #68]	; (800e714 <tcp_slowtmr+0x57c>)
 800e6d0:	f007 faca 	bl	8015c68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	4a0b      	ldr	r2, [pc, #44]	; (800e708 <tcp_slowtmr+0x570>)
 800e6da:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e6e6:	69b9      	ldr	r1, [r7, #24]
 800e6e8:	2001      	movs	r0, #1
 800e6ea:	f7fe f883 	bl	800c7f4 <memp_free>
 800e6ee:	e004      	b.n	800e6fa <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d193      	bne.n	800e628 <tcp_slowtmr+0x490>
    }
  }
}
 800e700:	bf00      	nop
 800e702:	3728      	adds	r7, #40	; 0x28
 800e704:	46bd      	mov	sp, r7
 800e706:	bdb0      	pop	{r4, r5, r7, pc}
 800e708:	2000b110 	.word	0x2000b110
 800e70c:	08018578 	.word	0x08018578
 800e710:	08018860 	.word	0x08018860
 800e714:	080185b4 	.word	0x080185b4

0800e718 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e71e:	4b2d      	ldr	r3, [pc, #180]	; (800e7d4 <tcp_fasttmr+0xbc>)
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	3301      	adds	r3, #1
 800e724:	b2da      	uxtb	r2, r3
 800e726:	4b2b      	ldr	r3, [pc, #172]	; (800e7d4 <tcp_fasttmr+0xbc>)
 800e728:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e72a:	4b2b      	ldr	r3, [pc, #172]	; (800e7d8 <tcp_fasttmr+0xc0>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e730:	e048      	b.n	800e7c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7f5a      	ldrb	r2, [r3, #29]
 800e736:	4b27      	ldr	r3, [pc, #156]	; (800e7d4 <tcp_fasttmr+0xbc>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d03f      	beq.n	800e7be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e73e:	4b25      	ldr	r3, [pc, #148]	; (800e7d4 <tcp_fasttmr+0xbc>)
 800e740:	781a      	ldrb	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7e9b      	ldrb	r3, [r3, #26]
 800e74a:	f003 0301 	and.w	r3, r3, #1
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d010      	beq.n	800e774 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	7e9b      	ldrb	r3, [r3, #26]
 800e756:	f043 0302 	orr.w	r3, r3, #2
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f003 fd51 	bl	8012208 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7e9b      	ldrb	r3, [r3, #26]
 800e76a:	f023 0303 	bic.w	r3, r3, #3
 800e76e:	b2da      	uxtb	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	7e9b      	ldrb	r3, [r3, #26]
 800e778:	f003 0308 	and.w	r3, r3, #8
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d009      	beq.n	800e794 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	7e9b      	ldrb	r3, [r3, #26]
 800e784:	f023 0308 	bic.w	r3, r3, #8
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff f958 	bl	800da44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e7a2:	4b0e      	ldr	r3, [pc, #56]	; (800e7dc <tcp_fasttmr+0xc4>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f819 	bl	800e7e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e7ae:	4b0b      	ldr	r3, [pc, #44]	; (800e7dc <tcp_fasttmr+0xc4>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d000      	beq.n	800e7b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e7b6:	e7b8      	b.n	800e72a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	607b      	str	r3, [r7, #4]
 800e7bc:	e002      	b.n	800e7c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1b3      	bne.n	800e732 <tcp_fasttmr+0x1a>
    }
  }
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	2000421e 	.word	0x2000421e
 800e7d8:	2000b100 	.word	0x2000b100
 800e7dc:	2000b0fc 	.word	0x2000b0fc

0800e7e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e7e0:	b590      	push	{r4, r7, lr}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ec:	7b5b      	ldrb	r3, [r3, #13]
 800e7ee:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7f4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00b      	beq.n	800e81e <tcp_process_refused_data+0x3e>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6918      	ldr	r0, [r3, #16]
 800e810:	2300      	movs	r3, #0
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	6879      	ldr	r1, [r7, #4]
 800e816:	47a0      	blx	r4
 800e818:	4603      	mov	r3, r0
 800e81a:	73fb      	strb	r3, [r7, #15]
 800e81c:	e007      	b.n	800e82e <tcp_process_refused_data+0x4e>
 800e81e:	2300      	movs	r3, #0
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	6879      	ldr	r1, [r7, #4]
 800e824:	2000      	movs	r0, #0
 800e826:	f000 f88c 	bl	800e942 <tcp_recv_null>
 800e82a:	4603      	mov	r3, r0
 800e82c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d12a      	bne.n	800e88c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800e836:	7bbb      	ldrb	r3, [r7, #14]
 800e838:	f003 0320 	and.w	r3, r3, #32
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d033      	beq.n	800e8a8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e844:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e848:	d005      	beq.n	800e856 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e84e:	3301      	adds	r3, #1
 800e850:	b29a      	uxth	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00b      	beq.n	800e878 <tcp_process_refused_data+0x98>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6918      	ldr	r0, [r3, #16]
 800e86a:	2300      	movs	r3, #0
 800e86c:	2200      	movs	r2, #0
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	47a0      	blx	r4
 800e872:	4603      	mov	r3, r0
 800e874:	73fb      	strb	r3, [r7, #15]
 800e876:	e001      	b.n	800e87c <tcp_process_refused_data+0x9c>
 800e878:	2300      	movs	r3, #0
 800e87a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e880:	f113 0f0d 	cmn.w	r3, #13
 800e884:	d110      	bne.n	800e8a8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800e886:	f06f 030c 	mvn.w	r3, #12
 800e88a:	e00e      	b.n	800e8aa <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800e88c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e890:	f113 0f0d 	cmn.w	r3, #13
 800e894:	d102      	bne.n	800e89c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e896:	f06f 030c 	mvn.w	r3, #12
 800e89a:	e006      	b.n	800e8aa <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800e8a2:	f06f 0304 	mvn.w	r3, #4
 800e8a6:	e000      	b.n	800e8aa <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd90      	pop	{r4, r7, pc}

0800e8b2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b084      	sub	sp, #16
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e8ba:	e007      	b.n	800e8cc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f809 	bl	800e8da <tcp_seg_free>
    seg = next;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1f4      	bne.n	800e8bc <tcp_segs_free+0xa>
  }
}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b082      	sub	sp, #8
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00c      	beq.n	800e902 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d004      	beq.n	800e8fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe fcd7 	bl	800d2a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e8fa:	6879      	ldr	r1, [r7, #4]
 800e8fc:	2003      	movs	r0, #3
 800e8fe:	f7fd ff79 	bl	800c7f4 <memp_free>
  }
}
 800e902:	bf00      	nop
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e912:	2003      	movs	r0, #3
 800e914:	f7fd ff1c 	bl	800c750 <memp_malloc>
 800e918:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <tcp_seg_copy+0x1a>
    return NULL;
 800e920:	2300      	movs	r3, #0
 800e922:	e00a      	b.n	800e93a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e924:	2210      	movs	r2, #16
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f007 f98a 	bl	8015c42 <memcpy>
  pbuf_ref(cseg->p);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fd6a 	bl	800d40c <pbuf_ref>
  return cseg;
 800e938:	68fb      	ldr	r3, [r7, #12]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d009      	beq.n	800e96a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	891b      	ldrh	r3, [r3, #8]
 800e95a:	4619      	mov	r1, r3
 800e95c:	68b8      	ldr	r0, [r7, #8]
 800e95e:	f7ff fb7d 	bl	800e05c <tcp_recved>
    pbuf_free(p);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7fe fca0 	bl	800d2a8 <pbuf_free>
 800e968:	e008      	b.n	800e97c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800e96a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d104      	bne.n	800e97c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800e972:	68b8      	ldr	r0, [r7, #8]
 800e974:	f7ff f8cc 	bl	800db10 <tcp_close>
 800e978:	4603      	mov	r3, r0
 800e97a:	e000      	b.n	800e97e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
	...

0800e988 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	4603      	mov	r3, r0
 800e990:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e996:	2b00      	cmp	r3, #0
 800e998:	db01      	blt.n	800e99e <tcp_kill_prio+0x16>
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	e000      	b.n	800e9a0 <tcp_kill_prio+0x18>
 800e99e:	237f      	movs	r3, #127	; 0x7f
 800e9a0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9aa:	4b16      	ldr	r3, [pc, #88]	; (800ea04 <tcp_kill_prio+0x7c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	e01a      	b.n	800e9e8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	7d5b      	ldrb	r3, [r3, #21]
 800e9b6:	7afa      	ldrb	r2, [r7, #11]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d312      	bcc.n	800e9e2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e9bc:	4b12      	ldr	r3, [pc, #72]	; (800ea08 <tcp_kill_prio+0x80>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	6a1b      	ldr	r3, [r3, #32]
 800e9c4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d80a      	bhi.n	800e9e2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800e9cc:	4b0e      	ldr	r3, [pc, #56]	; (800ea08 <tcp_kill_prio+0x80>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	6a1b      	ldr	r3, [r3, #32]
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	7d5b      	ldrb	r3, [r3, #21]
 800e9e0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	617b      	str	r3, [r7, #20]
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1e1      	bne.n	800e9b2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d002      	beq.n	800e9fa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9f4:	6938      	ldr	r0, [r7, #16]
 800e9f6:	f7ff f99d 	bl	800dd34 <tcp_abort>
  }
}
 800e9fa:	bf00      	nop
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	2000b100 	.word	0x2000b100
 800ea08:	2000b104 	.word	0x2000b104

0800ea0c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea16:	79fb      	ldrb	r3, [r7, #7]
 800ea18:	2b08      	cmp	r3, #8
 800ea1a:	d009      	beq.n	800ea30 <tcp_kill_state+0x24>
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	2b09      	cmp	r3, #9
 800ea20:	d006      	beq.n	800ea30 <tcp_kill_state+0x24>
 800ea22:	4b1a      	ldr	r3, [pc, #104]	; (800ea8c <tcp_kill_state+0x80>)
 800ea24:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ea28:	4919      	ldr	r1, [pc, #100]	; (800ea90 <tcp_kill_state+0x84>)
 800ea2a:	481a      	ldr	r0, [pc, #104]	; (800ea94 <tcp_kill_state+0x88>)
 800ea2c:	f007 f91c 	bl	8015c68 <iprintf>

  inactivity = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea34:	2300      	movs	r3, #0
 800ea36:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea38:	4b17      	ldr	r3, [pc, #92]	; (800ea98 <tcp_kill_state+0x8c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	617b      	str	r3, [r7, #20]
 800ea3e:	e017      	b.n	800ea70 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	7d1b      	ldrb	r3, [r3, #20]
 800ea44:	79fa      	ldrb	r2, [r7, #7]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d10f      	bne.n	800ea6a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ea4a:	4b14      	ldr	r3, [pc, #80]	; (800ea9c <tcp_kill_state+0x90>)
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d807      	bhi.n	800ea6a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ea5a:	4b10      	ldr	r3, [pc, #64]	; (800ea9c <tcp_kill_state+0x90>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	1ad3      	subs	r3, r2, r3
 800ea64:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	617b      	str	r3, [r7, #20]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1e4      	bne.n	800ea40 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d003      	beq.n	800ea84 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	6938      	ldr	r0, [r7, #16]
 800ea80:	f7ff f8a6 	bl	800dbd0 <tcp_abandon>
  }
}
 800ea84:	bf00      	nop
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	08018578 	.word	0x08018578
 800ea90:	08018888 	.word	0x08018888
 800ea94:	080185b4 	.word	0x080185b4
 800ea98:	2000b100 	.word	0x2000b100
 800ea9c:	2000b104 	.word	0x2000b104

0800eaa0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaae:	4b12      	ldr	r3, [pc, #72]	; (800eaf8 <tcp_kill_timewait+0x58>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e012      	b.n	800eadc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eab6:	4b11      	ldr	r3, [pc, #68]	; (800eafc <tcp_kill_timewait+0x5c>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d807      	bhi.n	800ead6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eac6:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <tcp_kill_timewait+0x5c>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1e9      	bne.n	800eab6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7ff f923 	bl	800dd34 <tcp_abort>
  }
}
 800eaee:	bf00      	nop
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	2000b110 	.word	0x2000b110
 800eafc:	2000b104 	.word	0x2000b104

0800eb00 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	4603      	mov	r3, r0
 800eb08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb0a:	2001      	movs	r0, #1
 800eb0c:	f7fd fe20 	bl	800c750 <memp_malloc>
 800eb10:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d124      	bne.n	800eb62 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eb18:	f7ff ffc2 	bl	800eaa0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb1c:	2001      	movs	r0, #1
 800eb1e:	f7fd fe17 	bl	800c750 <memp_malloc>
 800eb22:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d11b      	bne.n	800eb62 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eb2a:	2009      	movs	r0, #9
 800eb2c:	f7ff ff6e 	bl	800ea0c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb30:	2001      	movs	r0, #1
 800eb32:	f7fd fe0d 	bl	800c750 <memp_malloc>
 800eb36:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d111      	bne.n	800eb62 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800eb3e:	2008      	movs	r0, #8
 800eb40:	f7ff ff64 	bl	800ea0c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb44:	2001      	movs	r0, #1
 800eb46:	f7fd fe03 	bl	800c750 <memp_malloc>
 800eb4a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d107      	bne.n	800eb62 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eb52:	79fb      	ldrb	r3, [r7, #7]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff ff17 	bl	800e988 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	f7fd fdf8 	bl	800c750 <memp_malloc>
 800eb60:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d03f      	beq.n	800ebe8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eb68:	2298      	movs	r2, #152	; 0x98
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f007 f873 	bl	8015c58 <memset>
    pcb->prio = prio;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	79fa      	ldrb	r2, [r7, #7]
 800eb76:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eb7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eb88:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	22ff      	movs	r2, #255	; 0xff
 800eb96:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eb9e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2206      	movs	r2, #6
 800eba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2206      	movs	r2, #6
 800ebac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebb4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	; (800ebf4 <tcp_alloc+0xf4>)
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ebc6:	4b0c      	ldr	r3, [pc, #48]	; (800ebf8 <tcp_alloc+0xf8>)
 800ebc8:	781a      	ldrb	r2, [r3, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ebd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4a08      	ldr	r2, [pc, #32]	; (800ebfc <tcp_alloc+0xfc>)
 800ebdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	4a07      	ldr	r2, [pc, #28]	; (800ec00 <tcp_alloc+0x100>)
 800ebe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2000b104 	.word	0x2000b104
 800ebf8:	2000421e 	.word	0x2000421e
 800ebfc:	0800e943 	.word	0x0800e943
 800ec00:	006ddd00 	.word	0x006ddd00

0800ec04 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ec0e:	2040      	movs	r0, #64	; 0x40
 800ec10:	f7ff ff76 	bl	800eb00 <tcp_alloc>
 800ec14:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ec16:	68fb      	ldr	r3, [r7, #12]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d002      	beq.n	800ec36 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	611a      	str	r2, [r3, #16]
  }
}
 800ec36:	bf00      	nop
 800ec38:	370c      	adds	r7, #12
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
	...

0800ec44 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00e      	beq.n	800ec72 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	7d1b      	ldrb	r3, [r3, #20]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d106      	bne.n	800ec6a <tcp_recv+0x26>
 800ec5c:	4b07      	ldr	r3, [pc, #28]	; (800ec7c <tcp_recv+0x38>)
 800ec5e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800ec62:	4907      	ldr	r1, [pc, #28]	; (800ec80 <tcp_recv+0x3c>)
 800ec64:	4807      	ldr	r0, [pc, #28]	; (800ec84 <tcp_recv+0x40>)
 800ec66:	f006 ffff 	bl	8015c68 <iprintf>
    pcb->recv = recv;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ec72:	bf00      	nop
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	08018578 	.word	0x08018578
 800ec80:	08018898 	.word	0x08018898
 800ec84:	080185b4 	.word	0x080185b4

0800ec88 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d00d      	beq.n	800ecb4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	7d1b      	ldrb	r3, [r3, #20]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d106      	bne.n	800ecae <tcp_sent+0x26>
 800eca0:	4b06      	ldr	r3, [pc, #24]	; (800ecbc <tcp_sent+0x34>)
 800eca2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800eca6:	4906      	ldr	r1, [pc, #24]	; (800ecc0 <tcp_sent+0x38>)
 800eca8:	4806      	ldr	r0, [pc, #24]	; (800ecc4 <tcp_sent+0x3c>)
 800ecaa:	f006 ffdd 	bl	8015c68 <iprintf>
    pcb->sent = sent;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	683a      	ldr	r2, [r7, #0]
 800ecb2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800ecb4:	bf00      	nop
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	08018578 	.word	0x08018578
 800ecc0:	080188c0 	.word	0x080188c0
 800ecc4:	080185b4 	.word	0x080185b4

0800ecc8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00e      	beq.n	800ecf6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	7d1b      	ldrb	r3, [r3, #20]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d106      	bne.n	800ecee <tcp_err+0x26>
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <tcp_err+0x38>)
 800ece2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800ece6:	4907      	ldr	r1, [pc, #28]	; (800ed04 <tcp_err+0x3c>)
 800ece8:	4807      	ldr	r0, [pc, #28]	; (800ed08 <tcp_err+0x40>)
 800ecea:	f006 ffbd 	bl	8015c68 <iprintf>
    pcb->errf = err;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800ecf6:	bf00      	nop
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	08018578 	.word	0x08018578
 800ed04:	080188e8 	.word	0x080188e8
 800ed08:	080185b4 	.word	0x080185b4

0800ed0c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d008      	beq.n	800ed2e <tcp_accept+0x22>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	7d1b      	ldrb	r3, [r3, #20]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d104      	bne.n	800ed2e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	619a      	str	r2, [r3, #24]
  }
}
 800ed2e:	bf00      	nop
 800ed30:	3714      	adds	r7, #20
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
	...

0800ed3c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	4613      	mov	r3, r2
 800ed48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	7d1b      	ldrb	r3, [r3, #20]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d106      	bne.n	800ed60 <tcp_poll+0x24>
 800ed52:	4b09      	ldr	r3, [pc, #36]	; (800ed78 <tcp_poll+0x3c>)
 800ed54:	f240 7203 	movw	r2, #1795	; 0x703
 800ed58:	4908      	ldr	r1, [pc, #32]	; (800ed7c <tcp_poll+0x40>)
 800ed5a:	4809      	ldr	r0, [pc, #36]	; (800ed80 <tcp_poll+0x44>)
 800ed5c:	f006 ff84 	bl	8015c68 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	79fa      	ldrb	r2, [r7, #7]
 800ed6c:	771a      	strb	r2, [r3, #28]
}
 800ed6e:	bf00      	nop
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	08018578 	.word	0x08018578
 800ed7c:	08018910 	.word	0x08018910
 800ed80:	080185b4 	.word	0x080185b4

0800ed84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7d1b      	ldrb	r3, [r3, #20]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d034      	beq.n	800edfe <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ed98:	2b0a      	cmp	r3, #10
 800ed9a:	d030      	beq.n	800edfe <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d02c      	beq.n	800edfe <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d007      	beq.n	800edbc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe fa79 	bl	800d2a8 <pbuf_free>
      pcb->refused_data = NULL;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff fd76 	bl	800e8b2 <tcp_segs_free>
    pcb->ooseq = NULL;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edd2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fd6a 	bl	800e8b2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7ff fd65 	bl	800e8b2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	669a      	str	r2, [r3, #104]	; 0x68
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800edfe:	bf00      	nop
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
	...

0800ee08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d105      	bne.n	800ee28 <tcp_pcb_remove+0x20>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68da      	ldr	r2, [r3, #12]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	601a      	str	r2, [r3, #0]
 800ee26:	e013      	b.n	800ee50 <tcp_pcb_remove+0x48>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	60fb      	str	r3, [r7, #12]
 800ee2e:	e00c      	b.n	800ee4a <tcp_pcb_remove+0x42>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d104      	bne.n	800ee44 <tcp_pcb_remove+0x3c>
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	68da      	ldr	r2, [r3, #12]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	60da      	str	r2, [r3, #12]
 800ee42:	e005      	b.n	800ee50 <tcp_pcb_remove+0x48>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	60fb      	str	r3, [r7, #12]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d1ef      	bne.n	800ee30 <tcp_pcb_remove+0x28>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2200      	movs	r2, #0
 800ee54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ee56:	6838      	ldr	r0, [r7, #0]
 800ee58:	f7ff ff94 	bl	800ed84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	7d1b      	ldrb	r3, [r3, #20]
 800ee60:	2b0a      	cmp	r3, #10
 800ee62:	d013      	beq.n	800ee8c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d00f      	beq.n	800ee8c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	7e9b      	ldrb	r3, [r3, #26]
 800ee70:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d009      	beq.n	800ee8c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	7e9b      	ldrb	r3, [r3, #26]
 800ee7c:	f043 0302 	orr.w	r3, r3, #2
 800ee80:	b2da      	uxtb	r2, r3
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ee86:	6838      	ldr	r0, [r7, #0]
 800ee88:	f003 f9be 	bl	8012208 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	7d1b      	ldrb	r3, [r3, #20]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d020      	beq.n	800eed6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d006      	beq.n	800eeaa <tcp_pcb_remove+0xa2>
 800ee9c:	4b13      	ldr	r3, [pc, #76]	; (800eeec <tcp_pcb_remove+0xe4>)
 800ee9e:	f240 7253 	movw	r2, #1875	; 0x753
 800eea2:	4913      	ldr	r1, [pc, #76]	; (800eef0 <tcp_pcb_remove+0xe8>)
 800eea4:	4813      	ldr	r0, [pc, #76]	; (800eef4 <tcp_pcb_remove+0xec>)
 800eea6:	f006 fedf 	bl	8015c68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d006      	beq.n	800eec0 <tcp_pcb_remove+0xb8>
 800eeb2:	4b0e      	ldr	r3, [pc, #56]	; (800eeec <tcp_pcb_remove+0xe4>)
 800eeb4:	f240 7254 	movw	r2, #1876	; 0x754
 800eeb8:	490f      	ldr	r1, [pc, #60]	; (800eef8 <tcp_pcb_remove+0xf0>)
 800eeba:	480e      	ldr	r0, [pc, #56]	; (800eef4 <tcp_pcb_remove+0xec>)
 800eebc:	f006 fed4 	bl	8015c68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d006      	beq.n	800eed6 <tcp_pcb_remove+0xce>
 800eec8:	4b08      	ldr	r3, [pc, #32]	; (800eeec <tcp_pcb_remove+0xe4>)
 800eeca:	f240 7256 	movw	r2, #1878	; 0x756
 800eece:	490b      	ldr	r1, [pc, #44]	; (800eefc <tcp_pcb_remove+0xf4>)
 800eed0:	4808      	ldr	r0, [pc, #32]	; (800eef4 <tcp_pcb_remove+0xec>)
 800eed2:	f006 fec9 	bl	8015c68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2200      	movs	r2, #0
 800eeda:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2200      	movs	r2, #0
 800eee0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eee2:	bf00      	nop
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	08018578 	.word	0x08018578
 800eef0:	08018930 	.word	0x08018930
 800eef4:	080185b4 	.word	0x080185b4
 800eef8:	08018948 	.word	0x08018948
 800eefc:	08018964 	.word	0x08018964

0800ef00 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ef08:	4b07      	ldr	r3, [pc, #28]	; (800ef28 <tcp_next_iss+0x28>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	4b07      	ldr	r3, [pc, #28]	; (800ef2c <tcp_next_iss+0x2c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4413      	add	r3, r2
 800ef12:	4a05      	ldr	r2, [pc, #20]	; (800ef28 <tcp_next_iss+0x28>)
 800ef14:	6013      	str	r3, [r2, #0]
  return iss;
 800ef16:	4b04      	ldr	r3, [pc, #16]	; (800ef28 <tcp_next_iss+0x28>)
 800ef18:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	2000002c 	.word	0x2000002c
 800ef2c:	2000b104 	.word	0x2000b104

0800ef30 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	4603      	mov	r3, r0
 800ef38:	6039      	str	r1, [r7, #0]
 800ef3a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800ef3c:	6838      	ldr	r0, [r7, #0]
 800ef3e:	f005 faed 	bl	801451c <ip4_route>
 800ef42:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d101      	bne.n	800ef4e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800ef4a:	88fb      	ldrh	r3, [r7, #6]
 800ef4c:	e010      	b.n	800ef70 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ef52:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ef54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d008      	beq.n	800ef6e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800ef5c:	897b      	ldrh	r3, [r7, #10]
 800ef5e:	3b28      	subs	r3, #40	; 0x28
 800ef60:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ef62:	893a      	ldrh	r2, [r7, #8]
 800ef64:	88fb      	ldrh	r3, [r7, #6]
 800ef66:	4293      	cmp	r3, r2
 800ef68:	bf28      	it	cs
 800ef6a:	4613      	movcs	r3, r2
 800ef6c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800ef6e:	88fb      	ldrh	r3, [r7, #6]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef86:	e011      	b.n	800efac <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d108      	bne.n	800efa6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f7fe feca 	bl	800dd34 <tcp_abort>
      pcb = next;
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	e002      	b.n	800efac <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1ea      	bne.n	800ef88 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800efb2:	bf00      	nop
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d02c      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x6a>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d028      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800efd4:	4b16      	ldr	r3, [pc, #88]	; (800f030 <tcp_netif_ip_addr_changed+0x74>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4619      	mov	r1, r3
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff ffcc 	bl	800ef78 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800efe0:	4b14      	ldr	r3, [pc, #80]	; (800f034 <tcp_netif_ip_addr_changed+0x78>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff ffc6 	bl	800ef78 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d019      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x6a>
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d015      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800effa:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <tcp_netif_ip_addr_changed+0x7c>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	60fb      	str	r3, [r7, #12]
 800f000:	e00e      	b.n	800f020 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d103      	bne.n	800f01c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	60fb      	str	r3, [r7, #12]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1ed      	bne.n	800f002 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f026:	bf00      	nop
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	2000b100 	.word	0x2000b100
 800f034:	2000b10c 	.word	0x2000b10c
 800f038:	2000b108 	.word	0x2000b108

0800f03c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f03c:	b590      	push	{r4, r7, lr}
 800f03e:	b08b      	sub	sp, #44	; 0x2c
 800f040:	af02      	add	r7, sp, #8
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	4a82      	ldr	r2, [pc, #520]	; (800f254 <tcp_input+0x218>)
 800f04c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	895b      	ldrh	r3, [r3, #10]
 800f052:	2b13      	cmp	r3, #19
 800f054:	f240 838a 	bls.w	800f76c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f058:	4b7f      	ldr	r3, [pc, #508]	; (800f258 <tcp_input+0x21c>)
 800f05a:	695a      	ldr	r2, [r3, #20]
 800f05c:	4b7e      	ldr	r3, [pc, #504]	; (800f258 <tcp_input+0x21c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4619      	mov	r1, r3
 800f062:	4610      	mov	r0, r2
 800f064:	f005 fcd4 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 8380 	bne.w	800f770 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f070:	4b79      	ldr	r3, [pc, #484]	; (800f258 <tcp_input+0x21c>)
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f078:	2be0      	cmp	r3, #224	; 0xe0
 800f07a:	f000 8379 	beq.w	800f770 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f07e:	4b75      	ldr	r3, [pc, #468]	; (800f254 <tcp_input+0x218>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	899b      	ldrh	r3, [r3, #12]
 800f084:	b29b      	uxth	r3, r3
 800f086:	4618      	mov	r0, r3
 800f088:	f7fc ff74 	bl	800bf74 <lwip_htons>
 800f08c:	4603      	mov	r3, r0
 800f08e:	0b1b      	lsrs	r3, r3, #12
 800f090:	b29b      	uxth	r3, r3
 800f092:	b2db      	uxtb	r3, r3
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f098:	7cbb      	ldrb	r3, [r7, #18]
 800f09a:	2b13      	cmp	r3, #19
 800f09c:	f240 8368 	bls.w	800f770 <tcp_input+0x734>
 800f0a0:	7cbb      	ldrb	r3, [r7, #18]
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	891b      	ldrh	r3, [r3, #8]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	f200 8361 	bhi.w	800f770 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f0ae:	7cbb      	ldrb	r3, [r7, #18]
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	3b14      	subs	r3, #20
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	4b69      	ldr	r3, [pc, #420]	; (800f25c <tcp_input+0x220>)
 800f0b8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f0ba:	4b69      	ldr	r3, [pc, #420]	; (800f260 <tcp_input+0x224>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	895a      	ldrh	r2, [r3, #10]
 800f0c4:	7cbb      	ldrb	r3, [r7, #18]
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d30d      	bcc.n	800f0e8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f0cc:	4b63      	ldr	r3, [pc, #396]	; (800f25c <tcp_input+0x220>)
 800f0ce:	881a      	ldrh	r2, [r3, #0]
 800f0d0:	4b64      	ldr	r3, [pc, #400]	; (800f264 <tcp_input+0x228>)
 800f0d2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f0d4:	7cbb      	ldrb	r3, [r7, #18]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	425b      	negs	r3, r3
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	b21b      	sxth	r3, r3
 800f0de:	4619      	mov	r1, r3
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f7fe f8bd 	bl	800d260 <pbuf_header>
 800f0e6:	e055      	b.n	800f194 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d105      	bne.n	800f0fc <tcp_input+0xc0>
 800f0f0:	4b5d      	ldr	r3, [pc, #372]	; (800f268 <tcp_input+0x22c>)
 800f0f2:	22b2      	movs	r2, #178	; 0xb2
 800f0f4:	495d      	ldr	r1, [pc, #372]	; (800f26c <tcp_input+0x230>)
 800f0f6:	485e      	ldr	r0, [pc, #376]	; (800f270 <tcp_input+0x234>)
 800f0f8:	f006 fdb6 	bl	8015c68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f0fc:	f06f 0113 	mvn.w	r1, #19
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7fe f8ad 	bl	800d260 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	895a      	ldrh	r2, [r3, #10]
 800f10a:	4b56      	ldr	r3, [pc, #344]	; (800f264 <tcp_input+0x228>)
 800f10c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f10e:	4b53      	ldr	r3, [pc, #332]	; (800f25c <tcp_input+0x220>)
 800f110:	881a      	ldrh	r2, [r3, #0]
 800f112:	4b54      	ldr	r3, [pc, #336]	; (800f264 <tcp_input+0x228>)
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f11a:	4b52      	ldr	r3, [pc, #328]	; (800f264 <tcp_input+0x228>)
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	425b      	negs	r3, r3
 800f120:	b29b      	uxth	r3, r3
 800f122:	b21b      	sxth	r3, r3
 800f124:	4619      	mov	r1, r3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7fe f89a 	bl	800d260 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	895b      	ldrh	r3, [r3, #10]
 800f132:	8a3a      	ldrh	r2, [r7, #16]
 800f134:	429a      	cmp	r2, r3
 800f136:	f200 831d 	bhi.w	800f774 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	4a47      	ldr	r2, [pc, #284]	; (800f260 <tcp_input+0x224>)
 800f142:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	8a3b      	ldrh	r3, [r7, #16]
 800f14a:	425b      	negs	r3, r3
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	b21b      	sxth	r3, r3
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f7fe f884 	bl	800d260 <pbuf_header>
    p->tot_len -= opt2len;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	891a      	ldrh	r2, [r3, #8]
 800f15c:	8a3b      	ldrh	r3, [r7, #16]
 800f15e:	1ad3      	subs	r3, r2, r3
 800f160:	b29a      	uxth	r2, r3
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	895b      	ldrh	r3, [r3, #10]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d005      	beq.n	800f17a <tcp_input+0x13e>
 800f16e:	4b3e      	ldr	r3, [pc, #248]	; (800f268 <tcp_input+0x22c>)
 800f170:	22cf      	movs	r2, #207	; 0xcf
 800f172:	4940      	ldr	r1, [pc, #256]	; (800f274 <tcp_input+0x238>)
 800f174:	483e      	ldr	r0, [pc, #248]	; (800f270 <tcp_input+0x234>)
 800f176:	f006 fd77 	bl	8015c68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	891a      	ldrh	r2, [r3, #8]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	891b      	ldrh	r3, [r3, #8]
 800f184:	429a      	cmp	r2, r3
 800f186:	d005      	beq.n	800f194 <tcp_input+0x158>
 800f188:	4b37      	ldr	r3, [pc, #220]	; (800f268 <tcp_input+0x22c>)
 800f18a:	22d0      	movs	r2, #208	; 0xd0
 800f18c:	493a      	ldr	r1, [pc, #232]	; (800f278 <tcp_input+0x23c>)
 800f18e:	4838      	ldr	r0, [pc, #224]	; (800f270 <tcp_input+0x234>)
 800f190:	f006 fd6a 	bl	8015c68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f194:	4b2f      	ldr	r3, [pc, #188]	; (800f254 <tcp_input+0x218>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	4b2d      	ldr	r3, [pc, #180]	; (800f254 <tcp_input+0x218>)
 800f19e:	681c      	ldr	r4, [r3, #0]
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	f7fc fee7 	bl	800bf74 <lwip_htons>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f1aa:	4b2a      	ldr	r3, [pc, #168]	; (800f254 <tcp_input+0x218>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	885b      	ldrh	r3, [r3, #2]
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	4b28      	ldr	r3, [pc, #160]	; (800f254 <tcp_input+0x218>)
 800f1b4:	681c      	ldr	r4, [r3, #0]
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	f7fc fedc 	bl	800bf74 <lwip_htons>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f1c0:	4b24      	ldr	r3, [pc, #144]	; (800f254 <tcp_input+0x218>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	4b23      	ldr	r3, [pc, #140]	; (800f254 <tcp_input+0x218>)
 800f1c8:	681c      	ldr	r4, [r3, #0]
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	f7fc fee0 	bl	800bf90 <lwip_htonl>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	6063      	str	r3, [r4, #4]
 800f1d4:	6863      	ldr	r3, [r4, #4]
 800f1d6:	4a29      	ldr	r2, [pc, #164]	; (800f27c <tcp_input+0x240>)
 800f1d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f1da:	4b1e      	ldr	r3, [pc, #120]	; (800f254 <tcp_input+0x218>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	689a      	ldr	r2, [r3, #8]
 800f1e0:	4b1c      	ldr	r3, [pc, #112]	; (800f254 <tcp_input+0x218>)
 800f1e2:	681c      	ldr	r4, [r3, #0]
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	f7fc fed3 	bl	800bf90 <lwip_htonl>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	60a3      	str	r3, [r4, #8]
 800f1ee:	68a3      	ldr	r3, [r4, #8]
 800f1f0:	4a23      	ldr	r2, [pc, #140]	; (800f280 <tcp_input+0x244>)
 800f1f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f1f4:	4b17      	ldr	r3, [pc, #92]	; (800f254 <tcp_input+0x218>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	89db      	ldrh	r3, [r3, #14]
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	4b15      	ldr	r3, [pc, #84]	; (800f254 <tcp_input+0x218>)
 800f1fe:	681c      	ldr	r4, [r3, #0]
 800f200:	4610      	mov	r0, r2
 800f202:	f7fc feb7 	bl	800bf74 <lwip_htons>
 800f206:	4603      	mov	r3, r0
 800f208:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f20a:	4b12      	ldr	r3, [pc, #72]	; (800f254 <tcp_input+0x218>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	899b      	ldrh	r3, [r3, #12]
 800f210:	b29b      	uxth	r3, r3
 800f212:	4618      	mov	r0, r3
 800f214:	f7fc feae 	bl	800bf74 <lwip_htons>
 800f218:	4603      	mov	r3, r0
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f220:	b2da      	uxtb	r2, r3
 800f222:	4b18      	ldr	r3, [pc, #96]	; (800f284 <tcp_input+0x248>)
 800f224:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	891a      	ldrh	r2, [r3, #8]
 800f22a:	4b16      	ldr	r3, [pc, #88]	; (800f284 <tcp_input+0x248>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	f003 0303 	and.w	r3, r3, #3
 800f232:	2b00      	cmp	r3, #0
 800f234:	bf14      	ite	ne
 800f236:	2301      	movne	r3, #1
 800f238:	2300      	moveq	r3, #0
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4413      	add	r3, r2
 800f240:	b29a      	uxth	r2, r3
 800f242:	4b11      	ldr	r3, [pc, #68]	; (800f288 <tcp_input+0x24c>)
 800f244:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f246:	2300      	movs	r3, #0
 800f248:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f24a:	4b10      	ldr	r3, [pc, #64]	; (800f28c <tcp_input+0x250>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	61fb      	str	r3, [r7, #28]
 800f250:	e082      	b.n	800f358 <tcp_input+0x31c>
 800f252:	bf00      	nop
 800f254:	20004230 	.word	0x20004230
 800f258:	200079f0 	.word	0x200079f0
 800f25c:	20004234 	.word	0x20004234
 800f260:	20004238 	.word	0x20004238
 800f264:	20004236 	.word	0x20004236
 800f268:	0801897c 	.word	0x0801897c
 800f26c:	080189b0 	.word	0x080189b0
 800f270:	080189c0 	.word	0x080189c0
 800f274:	080189e8 	.word	0x080189e8
 800f278:	080189f4 	.word	0x080189f4
 800f27c:	20004240 	.word	0x20004240
 800f280:	20004244 	.word	0x20004244
 800f284:	2000424c 	.word	0x2000424c
 800f288:	2000424a 	.word	0x2000424a
 800f28c:	2000b100 	.word	0x2000b100
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	7d1b      	ldrb	r3, [r3, #20]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d105      	bne.n	800f2a4 <tcp_input+0x268>
 800f298:	4b8f      	ldr	r3, [pc, #572]	; (800f4d8 <tcp_input+0x49c>)
 800f29a:	22e2      	movs	r2, #226	; 0xe2
 800f29c:	498f      	ldr	r1, [pc, #572]	; (800f4dc <tcp_input+0x4a0>)
 800f29e:	4890      	ldr	r0, [pc, #576]	; (800f4e0 <tcp_input+0x4a4>)
 800f2a0:	f006 fce2 	bl	8015c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	7d1b      	ldrb	r3, [r3, #20]
 800f2a8:	2b0a      	cmp	r3, #10
 800f2aa:	d105      	bne.n	800f2b8 <tcp_input+0x27c>
 800f2ac:	4b8a      	ldr	r3, [pc, #552]	; (800f4d8 <tcp_input+0x49c>)
 800f2ae:	22e3      	movs	r2, #227	; 0xe3
 800f2b0:	498c      	ldr	r1, [pc, #560]	; (800f4e4 <tcp_input+0x4a8>)
 800f2b2:	488b      	ldr	r0, [pc, #556]	; (800f4e0 <tcp_input+0x4a4>)
 800f2b4:	f006 fcd8 	bl	8015c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	7d1b      	ldrb	r3, [r3, #20]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d105      	bne.n	800f2cc <tcp_input+0x290>
 800f2c0:	4b85      	ldr	r3, [pc, #532]	; (800f4d8 <tcp_input+0x49c>)
 800f2c2:	22e4      	movs	r2, #228	; 0xe4
 800f2c4:	4988      	ldr	r1, [pc, #544]	; (800f4e8 <tcp_input+0x4ac>)
 800f2c6:	4886      	ldr	r0, [pc, #536]	; (800f4e0 <tcp_input+0x4a4>)
 800f2c8:	f006 fcce 	bl	8015c68 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	8b1a      	ldrh	r2, [r3, #24]
 800f2d0:	4b86      	ldr	r3, [pc, #536]	; (800f4ec <tcp_input+0x4b0>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d138      	bne.n	800f34e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	8ada      	ldrh	r2, [r3, #22]
 800f2e0:	4b82      	ldr	r3, [pc, #520]	; (800f4ec <tcp_input+0x4b0>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	885b      	ldrh	r3, [r3, #2]
 800f2e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d130      	bne.n	800f34e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	685a      	ldr	r2, [r3, #4]
 800f2f0:	4b7f      	ldr	r3, [pc, #508]	; (800f4f0 <tcp_input+0x4b4>)
 800f2f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d12a      	bne.n	800f34e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	4b7c      	ldr	r3, [pc, #496]	; (800f4f0 <tcp_input+0x4b4>)
 800f2fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f300:	429a      	cmp	r2, r3
 800f302:	d124      	bne.n	800f34e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	69fa      	ldr	r2, [r7, #28]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d105      	bne.n	800f31a <tcp_input+0x2de>
 800f30e:	4b72      	ldr	r3, [pc, #456]	; (800f4d8 <tcp_input+0x49c>)
 800f310:	22ec      	movs	r2, #236	; 0xec
 800f312:	4978      	ldr	r1, [pc, #480]	; (800f4f4 <tcp_input+0x4b8>)
 800f314:	4872      	ldr	r0, [pc, #456]	; (800f4e0 <tcp_input+0x4a4>)
 800f316:	f006 fca7 	bl	8015c68 <iprintf>
      if (prev != NULL) {
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00a      	beq.n	800f336 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	68da      	ldr	r2, [r3, #12]
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f328:	4b73      	ldr	r3, [pc, #460]	; (800f4f8 <tcp_input+0x4bc>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f330:	4a71      	ldr	r2, [pc, #452]	; (800f4f8 <tcp_input+0x4bc>)
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	69fa      	ldr	r2, [r7, #28]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d10f      	bne.n	800f360 <tcp_input+0x324>
 800f340:	4b65      	ldr	r3, [pc, #404]	; (800f4d8 <tcp_input+0x49c>)
 800f342:	22f4      	movs	r2, #244	; 0xf4
 800f344:	496d      	ldr	r1, [pc, #436]	; (800f4fc <tcp_input+0x4c0>)
 800f346:	4866      	ldr	r0, [pc, #408]	; (800f4e0 <tcp_input+0x4a4>)
 800f348:	f006 fc8e 	bl	8015c68 <iprintf>
      break;
 800f34c:	e008      	b.n	800f360 <tcp_input+0x324>
    }
    prev = pcb;
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	61fb      	str	r3, [r7, #28]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d198      	bne.n	800f290 <tcp_input+0x254>
 800f35e:	e000      	b.n	800f362 <tcp_input+0x326>
      break;
 800f360:	bf00      	nop
  }

  if (pcb == NULL) {
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d173      	bne.n	800f450 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f368:	4b65      	ldr	r3, [pc, #404]	; (800f500 <tcp_input+0x4c4>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	61fb      	str	r3, [r7, #28]
 800f36e:	e02f      	b.n	800f3d0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	7d1b      	ldrb	r3, [r3, #20]
 800f374:	2b0a      	cmp	r3, #10
 800f376:	d005      	beq.n	800f384 <tcp_input+0x348>
 800f378:	4b57      	ldr	r3, [pc, #348]	; (800f4d8 <tcp_input+0x49c>)
 800f37a:	22fe      	movs	r2, #254	; 0xfe
 800f37c:	4961      	ldr	r1, [pc, #388]	; (800f504 <tcp_input+0x4c8>)
 800f37e:	4858      	ldr	r0, [pc, #352]	; (800f4e0 <tcp_input+0x4a4>)
 800f380:	f006 fc72 	bl	8015c68 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	8b1a      	ldrh	r2, [r3, #24]
 800f388:	4b58      	ldr	r3, [pc, #352]	; (800f4ec <tcp_input+0x4b0>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	429a      	cmp	r2, r3
 800f392:	d11a      	bne.n	800f3ca <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	8ada      	ldrh	r2, [r3, #22]
 800f398:	4b54      	ldr	r3, [pc, #336]	; (800f4ec <tcp_input+0x4b0>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	885b      	ldrh	r3, [r3, #2]
 800f39e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d112      	bne.n	800f3ca <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	4b51      	ldr	r3, [pc, #324]	; (800f4f0 <tcp_input+0x4b4>)
 800f3aa:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d10c      	bne.n	800f3ca <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	4b4e      	ldr	r3, [pc, #312]	; (800f4f0 <tcp_input+0x4b4>)
 800f3b6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d106      	bne.n	800f3ca <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f3bc:	69f8      	ldr	r0, [r7, #28]
 800f3be:	f000 fb15 	bl	800f9ec <tcp_timewait_input>
        pbuf_free(p);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7fd ff70 	bl	800d2a8 <pbuf_free>
        return;
 800f3c8:	e1da      	b.n	800f780 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	61fb      	str	r3, [r7, #28]
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1cc      	bne.n	800f370 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3da:	4b4b      	ldr	r3, [pc, #300]	; (800f508 <tcp_input+0x4cc>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	e019      	b.n	800f416 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	8ada      	ldrh	r2, [r3, #22]
 800f3e6:	4b41      	ldr	r3, [pc, #260]	; (800f4ec <tcp_input+0x4b0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	885b      	ldrh	r3, [r3, #2]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d10c      	bne.n	800f40c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	4b3e      	ldr	r3, [pc, #248]	; (800f4f0 <tcp_input+0x4b4>)
 800f3f8:	695b      	ldr	r3, [r3, #20]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d00f      	beq.n	800f41e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d00d      	beq.n	800f420 <tcp_input+0x3e4>
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d009      	beq.n	800f420 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	617b      	str	r3, [r7, #20]
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1e2      	bne.n	800f3e2 <tcp_input+0x3a6>
 800f41c:	e000      	b.n	800f420 <tcp_input+0x3e4>
            break;
 800f41e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d014      	beq.n	800f450 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00a      	beq.n	800f442 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	68da      	ldr	r2, [r3, #12]
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f434:	4b34      	ldr	r3, [pc, #208]	; (800f508 <tcp_input+0x4cc>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f43c:	4a32      	ldr	r2, [pc, #200]	; (800f508 <tcp_input+0x4cc>)
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f442:	6978      	ldr	r0, [r7, #20]
 800f444:	f000 f9f0 	bl	800f828 <tcp_listen_input>
      pbuf_free(p);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7fd ff2d 	bl	800d2a8 <pbuf_free>
      return;
 800f44e:	e197      	b.n	800f780 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	2b00      	cmp	r3, #0
 800f454:	f000 8164 	beq.w	800f720 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f458:	4b2c      	ldr	r3, [pc, #176]	; (800f50c <tcp_input+0x4d0>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	891a      	ldrh	r2, [r3, #8]
 800f462:	4b2a      	ldr	r3, [pc, #168]	; (800f50c <tcp_input+0x4d0>)
 800f464:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f466:	4a29      	ldr	r2, [pc, #164]	; (800f50c <tcp_input+0x4d0>)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f46c:	4b1f      	ldr	r3, [pc, #124]	; (800f4ec <tcp_input+0x4b0>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a26      	ldr	r2, [pc, #152]	; (800f50c <tcp_input+0x4d0>)
 800f472:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f474:	4b26      	ldr	r3, [pc, #152]	; (800f510 <tcp_input+0x4d4>)
 800f476:	2200      	movs	r2, #0
 800f478:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f47a:	4b26      	ldr	r3, [pc, #152]	; (800f514 <tcp_input+0x4d8>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f480:	4b25      	ldr	r3, [pc, #148]	; (800f518 <tcp_input+0x4dc>)
 800f482:	2200      	movs	r2, #0
 800f484:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f486:	4b25      	ldr	r3, [pc, #148]	; (800f51c <tcp_input+0x4e0>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	f003 0308 	and.w	r3, r3, #8
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d006      	beq.n	800f4a0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	7b5b      	ldrb	r3, [r3, #13]
 800f496:	f043 0301 	orr.w	r3, r3, #1
 800f49a:	b2da      	uxtb	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d03d      	beq.n	800f524 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f4a8:	69f8      	ldr	r0, [r7, #28]
 800f4aa:	f7ff f999 	bl	800e7e0 <tcp_process_refused_data>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	f113 0f0d 	cmn.w	r3, #13
 800f4b4:	d007      	beq.n	800f4c6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d032      	beq.n	800f524 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f4be:	4b18      	ldr	r3, [pc, #96]	; (800f520 <tcp_input+0x4e4>)
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d02e      	beq.n	800f524 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f040 8108 	bne.w	800f6e0 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f4d0:	69f8      	ldr	r0, [r7, #28]
 800f4d2:	f002 fe3d 	bl	8012150 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f4d6:	e103      	b.n	800f6e0 <tcp_input+0x6a4>
 800f4d8:	0801897c 	.word	0x0801897c
 800f4dc:	08018a14 	.word	0x08018a14
 800f4e0:	080189c0 	.word	0x080189c0
 800f4e4:	08018a3c 	.word	0x08018a3c
 800f4e8:	08018a68 	.word	0x08018a68
 800f4ec:	20004230 	.word	0x20004230
 800f4f0:	200079f0 	.word	0x200079f0
 800f4f4:	08018a90 	.word	0x08018a90
 800f4f8:	2000b100 	.word	0x2000b100
 800f4fc:	08018abc 	.word	0x08018abc
 800f500:	2000b110 	.word	0x2000b110
 800f504:	08018ae8 	.word	0x08018ae8
 800f508:	2000b108 	.word	0x2000b108
 800f50c:	20004220 	.word	0x20004220
 800f510:	20004250 	.word	0x20004250
 800f514:	2000424d 	.word	0x2000424d
 800f518:	20004248 	.word	0x20004248
 800f51c:	2000424c 	.word	0x2000424c
 800f520:	2000424a 	.word	0x2000424a
      }
    }
    tcp_input_pcb = pcb;
 800f524:	4a98      	ldr	r2, [pc, #608]	; (800f788 <tcp_input+0x74c>)
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f52a:	69f8      	ldr	r0, [r7, #28]
 800f52c:	f000 fac6 	bl	800fabc <tcp_process>
 800f530:	4603      	mov	r3, r0
 800f532:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f534:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f538:	f113 0f0d 	cmn.w	r3, #13
 800f53c:	f000 80d2 	beq.w	800f6e4 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800f540:	4b92      	ldr	r3, [pc, #584]	; (800f78c <tcp_input+0x750>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	f003 0308 	and.w	r3, r3, #8
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d016      	beq.n	800f57a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f552:	2b00      	cmp	r3, #0
 800f554:	d008      	beq.n	800f568 <tcp_input+0x52c>
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f55c:	69fa      	ldr	r2, [r7, #28]
 800f55e:	6912      	ldr	r2, [r2, #16]
 800f560:	f06f 010d 	mvn.w	r1, #13
 800f564:	4610      	mov	r0, r2
 800f566:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f568:	69f9      	ldr	r1, [r7, #28]
 800f56a:	4889      	ldr	r0, [pc, #548]	; (800f790 <tcp_input+0x754>)
 800f56c:	f7ff fc4c 	bl	800ee08 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800f570:	69f9      	ldr	r1, [r7, #28]
 800f572:	2001      	movs	r0, #1
 800f574:	f7fd f93e 	bl	800c7f4 <memp_free>
 800f578:	e0bf      	b.n	800f6fa <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800f57a:	2300      	movs	r3, #0
 800f57c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f57e:	4b85      	ldr	r3, [pc, #532]	; (800f794 <tcp_input+0x758>)
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d01b      	beq.n	800f5be <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f586:	4b83      	ldr	r3, [pc, #524]	; (800f794 <tcp_input+0x758>)
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f590:	2b00      	cmp	r3, #0
 800f592:	d009      	beq.n	800f5a8 <tcp_input+0x56c>
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	6910      	ldr	r0, [r2, #16]
 800f59c:	89fa      	ldrh	r2, [r7, #14]
 800f59e:	69f9      	ldr	r1, [r7, #28]
 800f5a0:	4798      	blx	r3
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	74fb      	strb	r3, [r7, #19]
 800f5a6:	e001      	b.n	800f5ac <tcp_input+0x570>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5b0:	f113 0f0d 	cmn.w	r3, #13
 800f5b4:	f000 8098 	beq.w	800f6e8 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f5b8:	4b76      	ldr	r3, [pc, #472]	; (800f794 <tcp_input+0x758>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f5be:	69f8      	ldr	r0, [r7, #28]
 800f5c0:	f000 f900 	bl	800f7c4 <tcp_input_delayed_close>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f040 8090 	bne.w	800f6ec <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f5cc:	4b72      	ldr	r3, [pc, #456]	; (800f798 <tcp_input+0x75c>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d041      	beq.n	800f658 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d006      	beq.n	800f5ea <tcp_input+0x5ae>
 800f5dc:	4b6f      	ldr	r3, [pc, #444]	; (800f79c <tcp_input+0x760>)
 800f5de:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800f5e2:	496f      	ldr	r1, [pc, #444]	; (800f7a0 <tcp_input+0x764>)
 800f5e4:	486f      	ldr	r0, [pc, #444]	; (800f7a4 <tcp_input+0x768>)
 800f5e6:	f006 fb3f 	bl	8015c68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	7e9b      	ldrb	r3, [r3, #26]
 800f5ee:	f003 0310 	and.w	r3, r3, #16
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d008      	beq.n	800f608 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f5f6:	4b68      	ldr	r3, [pc, #416]	; (800f798 <tcp_input+0x75c>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fd fe54 	bl	800d2a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f600:	69f8      	ldr	r0, [r7, #28]
 800f602:	f7fe fb97 	bl	800dd34 <tcp_abort>
            goto aborted;
 800f606:	e078      	b.n	800f6fa <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00c      	beq.n	800f62c <tcp_input+0x5f0>
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	6918      	ldr	r0, [r3, #16]
 800f61c:	4b5e      	ldr	r3, [pc, #376]	; (800f798 <tcp_input+0x75c>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	2300      	movs	r3, #0
 800f622:	69f9      	ldr	r1, [r7, #28]
 800f624:	47a0      	blx	r4
 800f626:	4603      	mov	r3, r0
 800f628:	74fb      	strb	r3, [r7, #19]
 800f62a:	e008      	b.n	800f63e <tcp_input+0x602>
 800f62c:	4b5a      	ldr	r3, [pc, #360]	; (800f798 <tcp_input+0x75c>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	2300      	movs	r3, #0
 800f632:	69f9      	ldr	r1, [r7, #28]
 800f634:	2000      	movs	r0, #0
 800f636:	f7ff f984 	bl	800e942 <tcp_recv_null>
 800f63a:	4603      	mov	r3, r0
 800f63c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f63e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f642:	f113 0f0d 	cmn.w	r3, #13
 800f646:	d053      	beq.n	800f6f0 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d003      	beq.n	800f658 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f650:	4b51      	ldr	r3, [pc, #324]	; (800f798 <tcp_input+0x75c>)
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f658:	4b4c      	ldr	r3, [pc, #304]	; (800f78c <tcp_input+0x750>)
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	f003 0320 	and.w	r3, r3, #32
 800f660:	2b00      	cmp	r3, #0
 800f662:	d030      	beq.n	800f6c6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d009      	beq.n	800f680 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f670:	7b5a      	ldrb	r2, [r3, #13]
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f676:	f042 0220 	orr.w	r2, r2, #32
 800f67a:	b2d2      	uxtb	r2, r2
 800f67c:	735a      	strb	r2, [r3, #13]
 800f67e:	e022      	b.n	800f6c6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f684:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f688:	d005      	beq.n	800f696 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f68e:	3301      	adds	r3, #1
 800f690:	b29a      	uxth	r2, r3
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00b      	beq.n	800f6b8 <tcp_input+0x67c>
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	6918      	ldr	r0, [r3, #16]
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	69f9      	ldr	r1, [r7, #28]
 800f6b0:	47a0      	blx	r4
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	74fb      	strb	r3, [r7, #19]
 800f6b6:	e001      	b.n	800f6bc <tcp_input+0x680>
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f6bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6c0:	f113 0f0d 	cmn.w	r3, #13
 800f6c4:	d016      	beq.n	800f6f4 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f6c6:	4b30      	ldr	r3, [pc, #192]	; (800f788 <tcp_input+0x74c>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f6cc:	69f8      	ldr	r0, [r7, #28]
 800f6ce:	f000 f879 	bl	800f7c4 <tcp_input_delayed_close>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10f      	bne.n	800f6f8 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f6d8:	69f8      	ldr	r0, [r7, #28]
 800f6da:	f002 fd95 	bl	8012208 <tcp_output>
 800f6de:	e00c      	b.n	800f6fa <tcp_input+0x6be>
        goto aborted;
 800f6e0:	bf00      	nop
 800f6e2:	e00a      	b.n	800f6fa <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f6e4:	bf00      	nop
 800f6e6:	e008      	b.n	800f6fa <tcp_input+0x6be>
              goto aborted;
 800f6e8:	bf00      	nop
 800f6ea:	e006      	b.n	800f6fa <tcp_input+0x6be>
          goto aborted;
 800f6ec:	bf00      	nop
 800f6ee:	e004      	b.n	800f6fa <tcp_input+0x6be>
            goto aborted;
 800f6f0:	bf00      	nop
 800f6f2:	e002      	b.n	800f6fa <tcp_input+0x6be>
              goto aborted;
 800f6f4:	bf00      	nop
 800f6f6:	e000      	b.n	800f6fa <tcp_input+0x6be>
          goto aborted;
 800f6f8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f6fa:	4b23      	ldr	r3, [pc, #140]	; (800f788 <tcp_input+0x74c>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f700:	4b25      	ldr	r3, [pc, #148]	; (800f798 <tcp_input+0x75c>)
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800f706:	4b28      	ldr	r3, [pc, #160]	; (800f7a8 <tcp_input+0x76c>)
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d037      	beq.n	800f77e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800f70e:	4b26      	ldr	r3, [pc, #152]	; (800f7a8 <tcp_input+0x76c>)
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f7fd fdc8 	bl	800d2a8 <pbuf_free>
      inseg.p = NULL;
 800f718:	4b23      	ldr	r3, [pc, #140]	; (800f7a8 <tcp_input+0x76c>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f71e:	e02e      	b.n	800f77e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f720:	4b22      	ldr	r3, [pc, #136]	; (800f7ac <tcp_input+0x770>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	899b      	ldrh	r3, [r3, #12]
 800f726:	b29b      	uxth	r3, r3
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fc fc23 	bl	800bf74 <lwip_htons>
 800f72e:	4603      	mov	r3, r0
 800f730:	f003 0304 	and.w	r3, r3, #4
 800f734:	2b00      	cmp	r3, #0
 800f736:	d115      	bne.n	800f764 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f738:	4b1d      	ldr	r3, [pc, #116]	; (800f7b0 <tcp_input+0x774>)
 800f73a:	6818      	ldr	r0, [r3, #0]
 800f73c:	4b1d      	ldr	r3, [pc, #116]	; (800f7b4 <tcp_input+0x778>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	4b1d      	ldr	r3, [pc, #116]	; (800f7b8 <tcp_input+0x77c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f748:	4b18      	ldr	r3, [pc, #96]	; (800f7ac <tcp_input+0x770>)
 800f74a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f74c:	885b      	ldrh	r3, [r3, #2]
 800f74e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f750:	4a16      	ldr	r2, [pc, #88]	; (800f7ac <tcp_input+0x770>)
 800f752:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f754:	8812      	ldrh	r2, [r2, #0]
 800f756:	b292      	uxth	r2, r2
 800f758:	9201      	str	r2, [sp, #4]
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	4b17      	ldr	r3, [pc, #92]	; (800f7bc <tcp_input+0x780>)
 800f75e:	4a18      	ldr	r2, [pc, #96]	; (800f7c0 <tcp_input+0x784>)
 800f760:	f002 ffdc 	bl	801271c <tcp_rst>
    pbuf_free(p);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7fd fd9f 	bl	800d2a8 <pbuf_free>
  return;
 800f76a:	e008      	b.n	800f77e <tcp_input+0x742>
    goto dropped;
 800f76c:	bf00      	nop
 800f76e:	e002      	b.n	800f776 <tcp_input+0x73a>
dropped:
 800f770:	bf00      	nop
 800f772:	e000      	b.n	800f776 <tcp_input+0x73a>
      goto dropped;
 800f774:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7fd fd96 	bl	800d2a8 <pbuf_free>
 800f77c:	e000      	b.n	800f780 <tcp_input+0x744>
  return;
 800f77e:	bf00      	nop
}
 800f780:	3724      	adds	r7, #36	; 0x24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd90      	pop	{r4, r7, pc}
 800f786:	bf00      	nop
 800f788:	2000b114 	.word	0x2000b114
 800f78c:	2000424d 	.word	0x2000424d
 800f790:	2000b100 	.word	0x2000b100
 800f794:	20004248 	.word	0x20004248
 800f798:	20004250 	.word	0x20004250
 800f79c:	0801897c 	.word	0x0801897c
 800f7a0:	08018b18 	.word	0x08018b18
 800f7a4:	080189c0 	.word	0x080189c0
 800f7a8:	20004220 	.word	0x20004220
 800f7ac:	20004230 	.word	0x20004230
 800f7b0:	20004244 	.word	0x20004244
 800f7b4:	2000424a 	.word	0x2000424a
 800f7b8:	20004240 	.word	0x20004240
 800f7bc:	20007a00 	.word	0x20007a00
 800f7c0:	20007a04 	.word	0x20007a04

0800f7c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800f7cc:	4b14      	ldr	r3, [pc, #80]	; (800f820 <tcp_input_delayed_close+0x5c>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	f003 0310 	and.w	r3, r3, #16
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d01d      	beq.n	800f814 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	7e9b      	ldrb	r3, [r3, #26]
 800f7dc:	f003 0310 	and.w	r3, r3, #16
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d10d      	bne.n	800f800 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d008      	beq.n	800f800 <tcp_input_delayed_close+0x3c>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	6912      	ldr	r2, [r2, #16]
 800f7f8:	f06f 010e 	mvn.w	r1, #14
 800f7fc:	4610      	mov	r0, r2
 800f7fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	4808      	ldr	r0, [pc, #32]	; (800f824 <tcp_input_delayed_close+0x60>)
 800f804:	f7ff fb00 	bl	800ee08 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800f808:	6879      	ldr	r1, [r7, #4]
 800f80a:	2001      	movs	r0, #1
 800f80c:	f7fc fff2 	bl	800c7f4 <memp_free>
    return 1;
 800f810:	2301      	movs	r3, #1
 800f812:	e000      	b.n	800f816 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	2000424d 	.word	0x2000424d
 800f824:	2000b100 	.word	0x2000b100

0800f828 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b088      	sub	sp, #32
 800f82c:	af02      	add	r7, sp, #8
 800f82e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f830:	4b64      	ldr	r3, [pc, #400]	; (800f9c4 <tcp_listen_input+0x19c>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	f003 0304 	and.w	r3, r3, #4
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f040 80bc 	bne.w	800f9b6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f83e:	4b61      	ldr	r3, [pc, #388]	; (800f9c4 <tcp_listen_input+0x19c>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	f003 0310 	and.w	r3, r3, #16
 800f846:	2b00      	cmp	r3, #0
 800f848:	d016      	beq.n	800f878 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f84a:	4b5f      	ldr	r3, [pc, #380]	; (800f9c8 <tcp_listen_input+0x1a0>)
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	4b5f      	ldr	r3, [pc, #380]	; (800f9cc <tcp_listen_input+0x1a4>)
 800f850:	881b      	ldrh	r3, [r3, #0]
 800f852:	461a      	mov	r2, r3
 800f854:	4b5e      	ldr	r3, [pc, #376]	; (800f9d0 <tcp_listen_input+0x1a8>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f85a:	4b5e      	ldr	r3, [pc, #376]	; (800f9d4 <tcp_listen_input+0x1ac>)
 800f85c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f85e:	885b      	ldrh	r3, [r3, #2]
 800f860:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f862:	4a5c      	ldr	r2, [pc, #368]	; (800f9d4 <tcp_listen_input+0x1ac>)
 800f864:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f866:	8812      	ldrh	r2, [r2, #0]
 800f868:	b292      	uxth	r2, r2
 800f86a:	9201      	str	r2, [sp, #4]
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	4b5a      	ldr	r3, [pc, #360]	; (800f9d8 <tcp_listen_input+0x1b0>)
 800f870:	4a5a      	ldr	r2, [pc, #360]	; (800f9dc <tcp_listen_input+0x1b4>)
 800f872:	f002 ff53 	bl	801271c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f876:	e0a0      	b.n	800f9ba <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800f878:	4b52      	ldr	r3, [pc, #328]	; (800f9c4 <tcp_listen_input+0x19c>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	f003 0302 	and.w	r3, r3, #2
 800f880:	2b00      	cmp	r3, #0
 800f882:	f000 809a 	beq.w	800f9ba <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	7d5b      	ldrb	r3, [r3, #21]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff f938 	bl	800eb00 <tcp_alloc>
 800f890:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d111      	bne.n	800f8bc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	699b      	ldr	r3, [r3, #24]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00a      	beq.n	800f8b6 <tcp_listen_input+0x8e>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	6910      	ldr	r0, [r2, #16]
 800f8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	4798      	blx	r3
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	73bb      	strb	r3, [r7, #14]
      return;
 800f8b4:	e082      	b.n	800f9bc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f8b6:	23f0      	movs	r3, #240	; 0xf0
 800f8b8:	73bb      	strb	r3, [r7, #14]
      return;
 800f8ba:	e07f      	b.n	800f9bc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f8bc:	4b48      	ldr	r3, [pc, #288]	; (800f9e0 <tcp_listen_input+0x1b8>)
 800f8be:	695a      	ldr	r2, [r3, #20]
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f8c4:	4b46      	ldr	r3, [pc, #280]	; (800f9e0 <tcp_listen_input+0x1b8>)
 800f8c6:	691a      	ldr	r2, [r3, #16]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	8ada      	ldrh	r2, [r3, #22]
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f8d4:	4b3f      	ldr	r3, [pc, #252]	; (800f9d4 <tcp_listen_input+0x1ac>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	881b      	ldrh	r3, [r3, #0]
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	2203      	movs	r2, #3
 800f8e4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f8e6:	4b3a      	ldr	r3, [pc, #232]	; (800f9d0 <tcp_listen_input+0x1a8>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	1c5a      	adds	r2, r3, #1
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f8f8:	6978      	ldr	r0, [r7, #20]
 800f8fa:	f7ff fb01 	bl	800ef00 <tcp_next_iss>
 800f8fe:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	693a      	ldr	r2, [r7, #16]
 800f910:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	693a      	ldr	r2, [r7, #16]
 800f916:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f918:	4b2d      	ldr	r3, [pc, #180]	; (800f9d0 <tcp_listen_input+0x1a8>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	1e5a      	subs	r2, r3, #1
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	691a      	ldr	r2, [r3, #16]
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	7a1b      	ldrb	r3, [r3, #8]
 800f934:	f003 030c 	and.w	r3, r3, #12
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f93e:	4b29      	ldr	r3, [pc, #164]	; (800f9e4 <tcp_listen_input+0x1bc>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	60da      	str	r2, [r3, #12]
 800f946:	4a27      	ldr	r2, [pc, #156]	; (800f9e4 <tcp_listen_input+0x1bc>)
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	6013      	str	r3, [r2, #0]
 800f94c:	f003 f938 	bl	8012bc0 <tcp_timer_needed>
 800f950:	4b25      	ldr	r3, [pc, #148]	; (800f9e8 <tcp_listen_input+0x1c0>)
 800f952:	2201      	movs	r2, #1
 800f954:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f956:	6978      	ldr	r0, [r7, #20]
 800f958:	f001 fd14 	bl	8011384 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f95c:	4b1d      	ldr	r3, [pc, #116]	; (800f9d4 <tcp_listen_input+0x1ac>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	89db      	ldrh	r3, [r3, #14]
 800f962:	b29a      	uxth	r2, r3
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	3304      	adds	r3, #4
 800f97e:	4619      	mov	r1, r3
 800f980:	4610      	mov	r0, r2
 800f982:	f7ff fad5 	bl	800ef30 <tcp_eff_send_mss_impl>
 800f986:	4603      	mov	r3, r0
 800f988:	461a      	mov	r2, r3
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f98e:	2112      	movs	r1, #18
 800f990:	6978      	ldr	r0, [r7, #20]
 800f992:	f002 fae1 	bl	8011f58 <tcp_enqueue_flags>
 800f996:	4603      	mov	r3, r0
 800f998:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d004      	beq.n	800f9ac <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	6978      	ldr	r0, [r7, #20]
 800f9a6:	f7fe f913 	bl	800dbd0 <tcp_abandon>
      return;
 800f9aa:	e007      	b.n	800f9bc <tcp_listen_input+0x194>
    tcp_output(npcb);
 800f9ac:	6978      	ldr	r0, [r7, #20]
 800f9ae:	f002 fc2b 	bl	8012208 <tcp_output>
  return;
 800f9b2:	bf00      	nop
 800f9b4:	e001      	b.n	800f9ba <tcp_listen_input+0x192>
    return;
 800f9b6:	bf00      	nop
 800f9b8:	e000      	b.n	800f9bc <tcp_listen_input+0x194>
  return;
 800f9ba:	bf00      	nop
}
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000424c 	.word	0x2000424c
 800f9c8:	20004244 	.word	0x20004244
 800f9cc:	2000424a 	.word	0x2000424a
 800f9d0:	20004240 	.word	0x20004240
 800f9d4:	20004230 	.word	0x20004230
 800f9d8:	20007a00 	.word	0x20007a00
 800f9dc:	20007a04 	.word	0x20007a04
 800f9e0:	200079f0 	.word	0x200079f0
 800f9e4:	2000b100 	.word	0x2000b100
 800f9e8:	2000b0fc 	.word	0x2000b0fc

0800f9ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af02      	add	r7, sp, #8
 800f9f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f9f4:	4b29      	ldr	r3, [pc, #164]	; (800fa9c <tcp_timewait_input+0xb0>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 0304 	and.w	r3, r3, #4
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d147      	bne.n	800fa90 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fa00:	4b26      	ldr	r3, [pc, #152]	; (800fa9c <tcp_timewait_input+0xb0>)
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	f003 0302 	and.w	r3, r3, #2
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d027      	beq.n	800fa5c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fa0c:	4b24      	ldr	r3, [pc, #144]	; (800faa0 <tcp_timewait_input+0xb4>)
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	db2a      	blt.n	800fa70 <tcp_timewait_input+0x84>
 800fa1a:	4b21      	ldr	r3, [pc, #132]	; (800faa0 <tcp_timewait_input+0xb4>)
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa26:	440b      	add	r3, r1
 800fa28:	1ad3      	subs	r3, r2, r3
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	dc20      	bgt.n	800fa70 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa2e:	4b1d      	ldr	r3, [pc, #116]	; (800faa4 <tcp_timewait_input+0xb8>)
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	4b1d      	ldr	r3, [pc, #116]	; (800faa8 <tcp_timewait_input+0xbc>)
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	4b19      	ldr	r3, [pc, #100]	; (800faa0 <tcp_timewait_input+0xb4>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa3e:	4b1b      	ldr	r3, [pc, #108]	; (800faac <tcp_timewait_input+0xc0>)
 800fa40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa42:	885b      	ldrh	r3, [r3, #2]
 800fa44:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa46:	4a19      	ldr	r2, [pc, #100]	; (800faac <tcp_timewait_input+0xc0>)
 800fa48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa4a:	8812      	ldrh	r2, [r2, #0]
 800fa4c:	b292      	uxth	r2, r2
 800fa4e:	9201      	str	r2, [sp, #4]
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	4b17      	ldr	r3, [pc, #92]	; (800fab0 <tcp_timewait_input+0xc4>)
 800fa54:	4a17      	ldr	r2, [pc, #92]	; (800fab4 <tcp_timewait_input+0xc8>)
 800fa56:	f002 fe61 	bl	801271c <tcp_rst>
      return;
 800fa5a:	e01c      	b.n	800fa96 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800fa5c:	4b0f      	ldr	r3, [pc, #60]	; (800fa9c <tcp_timewait_input+0xb0>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f003 0301 	and.w	r3, r3, #1
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d003      	beq.n	800fa70 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fa68:	4b13      	ldr	r3, [pc, #76]	; (800fab8 <tcp_timewait_input+0xcc>)
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fa70:	4b0d      	ldr	r3, [pc, #52]	; (800faa8 <tcp_timewait_input+0xbc>)
 800fa72:	881b      	ldrh	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00d      	beq.n	800fa94 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	7e9b      	ldrb	r3, [r3, #26]
 800fa7c:	f043 0302 	orr.w	r3, r3, #2
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f002 fbbe 	bl	8012208 <tcp_output>
  }
  return;
 800fa8c:	bf00      	nop
 800fa8e:	e001      	b.n	800fa94 <tcp_timewait_input+0xa8>
    return;
 800fa90:	bf00      	nop
 800fa92:	e000      	b.n	800fa96 <tcp_timewait_input+0xaa>
  return;
 800fa94:	bf00      	nop
}
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	2000424c 	.word	0x2000424c
 800faa0:	20004240 	.word	0x20004240
 800faa4:	20004244 	.word	0x20004244
 800faa8:	2000424a 	.word	0x2000424a
 800faac:	20004230 	.word	0x20004230
 800fab0:	20007a00 	.word	0x20007a00
 800fab4:	20007a04 	.word	0x20007a04
 800fab8:	2000b104 	.word	0x2000b104

0800fabc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b08a      	sub	sp, #40	; 0x28
 800fac0:	af02      	add	r7, sp, #8
 800fac2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fac4:	2300      	movs	r3, #0
 800fac6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800facc:	4ba4      	ldr	r3, [pc, #656]	; (800fd60 <tcp_process+0x2a4>)
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	f003 0304 	and.w	r3, r3, #4
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d04e      	beq.n	800fb76 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	7d1b      	ldrb	r3, [r3, #20]
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d108      	bne.n	800faf2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fae4:	4b9f      	ldr	r3, [pc, #636]	; (800fd64 <tcp_process+0x2a8>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d123      	bne.n	800fb34 <tcp_process+0x78>
        acceptable = 1;
 800faec:	2301      	movs	r3, #1
 800faee:	76fb      	strb	r3, [r7, #27]
 800faf0:	e020      	b.n	800fb34 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faf6:	4b9c      	ldr	r3, [pc, #624]	; (800fd68 <tcp_process+0x2ac>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d102      	bne.n	800fb04 <tcp_process+0x48>
        acceptable = 1;
 800fafe:	2301      	movs	r3, #1
 800fb00:	76fb      	strb	r3, [r7, #27]
 800fb02:	e017      	b.n	800fb34 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb04:	4b98      	ldr	r3, [pc, #608]	; (800fd68 <tcp_process+0x2ac>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	db10      	blt.n	800fb34 <tcp_process+0x78>
 800fb12:	4b95      	ldr	r3, [pc, #596]	; (800fd68 <tcp_process+0x2ac>)
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1a:	6879      	ldr	r1, [r7, #4]
 800fb1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb1e:	440b      	add	r3, r1
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dc06      	bgt.n	800fb34 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7e9b      	ldrb	r3, [r3, #26]
 800fb2a:	f043 0302 	orr.w	r3, r3, #2
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fb34:	7efb      	ldrb	r3, [r7, #27]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d01b      	beq.n	800fb72 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	7d1b      	ldrb	r3, [r3, #20]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <tcp_process+0x94>
 800fb42:	4b8a      	ldr	r3, [pc, #552]	; (800fd6c <tcp_process+0x2b0>)
 800fb44:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fb48:	4989      	ldr	r1, [pc, #548]	; (800fd70 <tcp_process+0x2b4>)
 800fb4a:	488a      	ldr	r0, [pc, #552]	; (800fd74 <tcp_process+0x2b8>)
 800fb4c:	f006 f88c 	bl	8015c68 <iprintf>
      recv_flags |= TF_RESET;
 800fb50:	4b89      	ldr	r3, [pc, #548]	; (800fd78 <tcp_process+0x2bc>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f043 0308 	orr.w	r3, r3, #8
 800fb58:	b2da      	uxtb	r2, r3
 800fb5a:	4b87      	ldr	r3, [pc, #540]	; (800fd78 <tcp_process+0x2bc>)
 800fb5c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	7e9b      	ldrb	r3, [r3, #26]
 800fb62:	f023 0301 	bic.w	r3, r3, #1
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800fb6c:	f06f 030d 	mvn.w	r3, #13
 800fb70:	e34d      	b.n	801020e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fb72:	2300      	movs	r3, #0
 800fb74:	e34b      	b.n	801020e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fb76:	4b7a      	ldr	r3, [pc, #488]	; (800fd60 <tcp_process+0x2a4>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	f003 0302 	and.w	r3, r3, #2
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d010      	beq.n	800fba4 <tcp_process+0xe8>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	7d1b      	ldrb	r3, [r3, #20]
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	d00c      	beq.n	800fba4 <tcp_process+0xe8>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	7d1b      	ldrb	r3, [r3, #20]
 800fb8e:	2b03      	cmp	r3, #3
 800fb90:	d008      	beq.n	800fba4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7e9b      	ldrb	r3, [r3, #26]
 800fb96:	f043 0302 	orr.w	r3, r3, #2
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	e334      	b.n	801020e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	7e9b      	ldrb	r3, [r3, #26]
 800fba8:	f003 0310 	and.w	r3, r3, #16
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d103      	bne.n	800fbb8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fbb0:	4b72      	ldr	r3, [pc, #456]	; (800fd7c <tcp_process+0x2c0>)
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f001 fbdf 	bl	8011384 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	7d1b      	ldrb	r3, [r3, #20]
 800fbca:	3b02      	subs	r3, #2
 800fbcc:	2b07      	cmp	r3, #7
 800fbce:	f200 830e 	bhi.w	80101ee <tcp_process+0x732>
 800fbd2:	a201      	add	r2, pc, #4	; (adr r2, 800fbd8 <tcp_process+0x11c>)
 800fbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd8:	0800fbf9 	.word	0x0800fbf9
 800fbdc:	0800fdf1 	.word	0x0800fdf1
 800fbe0:	0800ff49 	.word	0x0800ff49
 800fbe4:	0800ff73 	.word	0x0800ff73
 800fbe8:	0801009d 	.word	0x0801009d
 800fbec:	0800ff49 	.word	0x0800ff49
 800fbf0:	08010129 	.word	0x08010129
 800fbf4:	080101b9 	.word	0x080101b9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fbf8:	4b59      	ldr	r3, [pc, #356]	; (800fd60 <tcp_process+0x2a4>)
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f003 0310 	and.w	r3, r3, #16
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f000 80cb 	beq.w	800fd9c <tcp_process+0x2e0>
 800fc06:	4b56      	ldr	r3, [pc, #344]	; (800fd60 <tcp_process+0x2a4>)
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	f003 0302 	and.w	r3, r3, #2
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	f000 80c4 	beq.w	800fd9c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc18:	1c5a      	adds	r2, r3, #1
 800fc1a:	4b52      	ldr	r3, [pc, #328]	; (800fd64 <tcp_process+0x2a8>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	f040 80bc 	bne.w	800fd9c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800fc24:	4b50      	ldr	r3, [pc, #320]	; (800fd68 <tcp_process+0x2ac>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	1c5a      	adds	r2, r3, #1
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800fc36:	4b4b      	ldr	r3, [pc, #300]	; (800fd64 <tcp_process+0x2a8>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800fc3e:	4b50      	ldr	r3, [pc, #320]	; (800fd80 <tcp_process+0x2c4>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	89db      	ldrh	r3, [r3, #14]
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fc58:	4b43      	ldr	r3, [pc, #268]	; (800fd68 <tcp_process+0x2ac>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	1e5a      	subs	r2, r3, #1
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2204      	movs	r2, #4
 800fc66:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3304      	adds	r3, #4
 800fc70:	4619      	mov	r1, r3
 800fc72:	4610      	mov	r0, r2
 800fc74:	f7ff f95c 	bl	800ef30 <tcp_eff_send_mss_impl>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc84:	005b      	lsls	r3, r3, #1
 800fc86:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	bf38      	it	cc
 800fc8e:	461a      	movcc	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	4293      	cmp	r3, r2
 800fc98:	bf28      	it	cs
 800fc9a:	4613      	movcs	r3, r2
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <tcp_process+0x200>
 800fcae:	4b2f      	ldr	r3, [pc, #188]	; (800fd6c <tcp_process+0x2b0>)
 800fcb0:	f240 321a 	movw	r2, #794	; 0x31a
 800fcb4:	4933      	ldr	r1, [pc, #204]	; (800fd84 <tcp_process+0x2c8>)
 800fcb6:	482f      	ldr	r0, [pc, #188]	; (800fd74 <tcp_process+0x2b8>)
 800fcb8:	f005 ffd6 	bl	8015c68 <iprintf>
      --pcb->snd_queuelen;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d111      	bne.n	800fcfc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcdc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d106      	bne.n	800fcf2 <tcp_process+0x236>
 800fce4:	4b21      	ldr	r3, [pc, #132]	; (800fd6c <tcp_process+0x2b0>)
 800fce6:	f240 3222 	movw	r2, #802	; 0x322
 800fcea:	4927      	ldr	r1, [pc, #156]	; (800fd88 <tcp_process+0x2cc>)
 800fcec:	4821      	ldr	r0, [pc, #132]	; (800fd74 <tcp_process+0x2b8>)
 800fcee:	f005 ffbb 	bl	8015c68 <iprintf>
        pcb->unsent = rseg->next;
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	669a      	str	r2, [r3, #104]	; 0x68
 800fcfa:	e003      	b.n	800fd04 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800fd04:	69f8      	ldr	r0, [r7, #28]
 800fd06:	f7fe fde8 	bl	800e8da <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d104      	bne.n	800fd1c <tcp_process+0x260>
        pcb->rtime = -1;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd18:	861a      	strh	r2, [r3, #48]	; 0x30
 800fd1a:	e006      	b.n	800fd2a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00a      	beq.n	800fd4a <tcp_process+0x28e>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	6910      	ldr	r0, [r2, #16]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	6879      	ldr	r1, [r7, #4]
 800fd42:	4798      	blx	r3
 800fd44:	4603      	mov	r3, r0
 800fd46:	76bb      	strb	r3, [r7, #26]
 800fd48:	e001      	b.n	800fd4e <tcp_process+0x292>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800fd4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd52:	f113 0f0d 	cmn.w	r3, #13
 800fd56:	d119      	bne.n	800fd8c <tcp_process+0x2d0>
        return ERR_ABRT;
 800fd58:	f06f 030c 	mvn.w	r3, #12
 800fd5c:	e257      	b.n	801020e <tcp_process+0x752>
 800fd5e:	bf00      	nop
 800fd60:	2000424c 	.word	0x2000424c
 800fd64:	20004244 	.word	0x20004244
 800fd68:	20004240 	.word	0x20004240
 800fd6c:	0801897c 	.word	0x0801897c
 800fd70:	08018b34 	.word	0x08018b34
 800fd74:	080189c0 	.word	0x080189c0
 800fd78:	2000424d 	.word	0x2000424d
 800fd7c:	2000b104 	.word	0x2000b104
 800fd80:	20004230 	.word	0x20004230
 800fd84:	08018b54 	.word	0x08018b54
 800fd88:	08018b6c 	.word	0x08018b6c
      }
      tcp_ack_now(pcb);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	7e9b      	ldrb	r3, [r3, #26]
 800fd90:	f043 0302 	orr.w	r3, r3, #2
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800fd9a:	e22a      	b.n	80101f2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800fd9c:	4b9f      	ldr	r3, [pc, #636]	; (801001c <tcp_process+0x560>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 0310 	and.w	r3, r3, #16
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 8224 	beq.w	80101f2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdaa:	4b9d      	ldr	r3, [pc, #628]	; (8010020 <tcp_process+0x564>)
 800fdac:	6818      	ldr	r0, [r3, #0]
 800fdae:	4b9d      	ldr	r3, [pc, #628]	; (8010024 <tcp_process+0x568>)
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4b9c      	ldr	r3, [pc, #624]	; (8010028 <tcp_process+0x56c>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdba:	4b9c      	ldr	r3, [pc, #624]	; (801002c <tcp_process+0x570>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdbe:	885b      	ldrh	r3, [r3, #2]
 800fdc0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdc2:	4a9a      	ldr	r2, [pc, #616]	; (801002c <tcp_process+0x570>)
 800fdc4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdc6:	8812      	ldrh	r2, [r2, #0]
 800fdc8:	b292      	uxth	r2, r2
 800fdca:	9201      	str	r2, [sp, #4]
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	4b98      	ldr	r3, [pc, #608]	; (8010030 <tcp_process+0x574>)
 800fdd0:	4a98      	ldr	r2, [pc, #608]	; (8010034 <tcp_process+0x578>)
 800fdd2:	f002 fca3 	bl	801271c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fddc:	2b05      	cmp	r3, #5
 800fdde:	f200 8208 	bhi.w	80101f2 <tcp_process+0x736>
        pcb->rtime = 0;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f002 fd0d 	bl	8012808 <tcp_rexmit_rto>
    break;
 800fdee:	e200      	b.n	80101f2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800fdf0:	4b8a      	ldr	r3, [pc, #552]	; (801001c <tcp_process+0x560>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	f003 0310 	and.w	r3, r3, #16
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f000 8091 	beq.w	800ff20 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fdfe:	4b88      	ldr	r3, [pc, #544]	; (8010020 <tcp_process+0x564>)
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	db71      	blt.n	800fef2 <tcp_process+0x436>
 800fe0e:	4b84      	ldr	r3, [pc, #528]	; (8010020 <tcp_process+0x564>)
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe16:	1ad3      	subs	r3, r2, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	dc6a      	bgt.n	800fef2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2204      	movs	r2, #4
 800fe20:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00b      	beq.n	800fe42 <tcp_process+0x386>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe2e:	699b      	ldr	r3, [r3, #24]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d106      	bne.n	800fe42 <tcp_process+0x386>
 800fe34:	4b80      	ldr	r3, [pc, #512]	; (8010038 <tcp_process+0x57c>)
 800fe36:	f240 3251 	movw	r2, #849	; 0x351
 800fe3a:	4980      	ldr	r1, [pc, #512]	; (801003c <tcp_process+0x580>)
 800fe3c:	4880      	ldr	r0, [pc, #512]	; (8010040 <tcp_process+0x584>)
 800fe3e:	f005 ff13 	bl	8015c68 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d102      	bne.n	800fe50 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800fe4a:	23fa      	movs	r3, #250	; 0xfa
 800fe4c:	76bb      	strb	r3, [r7, #26]
 800fe4e:	e011      	b.n	800fe74 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe54:	699b      	ldr	r3, [r3, #24]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00a      	beq.n	800fe70 <tcp_process+0x3b4>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	6910      	ldr	r0, [r2, #16]
 800fe64:	2200      	movs	r2, #0
 800fe66:	6879      	ldr	r1, [r7, #4]
 800fe68:	4798      	blx	r3
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	76bb      	strb	r3, [r7, #26]
 800fe6e:	e001      	b.n	800fe74 <tcp_process+0x3b8>
 800fe70:	23f0      	movs	r3, #240	; 0xf0
 800fe72:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800fe74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d00a      	beq.n	800fe92 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800fe7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe80:	f113 0f0d 	cmn.w	r3, #13
 800fe84:	d002      	beq.n	800fe8c <tcp_process+0x3d0>
            tcp_abort(pcb);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fd ff54 	bl	800dd34 <tcp_abort>
          }
          return ERR_ABRT;
 800fe8c:	f06f 030c 	mvn.w	r3, #12
 800fe90:	e1bd      	b.n	801020e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 fa42 	bl	801031c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800fe98:	4b6a      	ldr	r3, [pc, #424]	; (8010044 <tcp_process+0x588>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d005      	beq.n	800feac <tcp_process+0x3f0>
          recv_acked--;
 800fea0:	4b68      	ldr	r3, [pc, #416]	; (8010044 <tcp_process+0x588>)
 800fea2:	881b      	ldrh	r3, [r3, #0]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	4b66      	ldr	r3, [pc, #408]	; (8010044 <tcp_process+0x588>)
 800feaa:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feb0:	005b      	lsls	r3, r3, #1
 800feb2:	f241 121c 	movw	r2, #4380	; 0x111c
 800feb6:	429a      	cmp	r2, r3
 800feb8:	bf38      	it	cc
 800feba:	461a      	movcc	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4293      	cmp	r3, r2
 800fec4:	bf28      	it	cs
 800fec6:	4613      	movcs	r3, r2
 800fec8:	b29a      	uxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800fed0:	4b5d      	ldr	r3, [pc, #372]	; (8010048 <tcp_process+0x58c>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0320 	and.w	r3, r3, #32
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d034      	beq.n	800ff46 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	7e9b      	ldrb	r3, [r3, #26]
 800fee0:	f043 0302 	orr.w	r3, r3, #2
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2207      	movs	r2, #7
 800feee:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800fef0:	e029      	b.n	800ff46 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fef2:	4b4b      	ldr	r3, [pc, #300]	; (8010020 <tcp_process+0x564>)
 800fef4:	6818      	ldr	r0, [r3, #0]
 800fef6:	4b4b      	ldr	r3, [pc, #300]	; (8010024 <tcp_process+0x568>)
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	461a      	mov	r2, r3
 800fefc:	4b4a      	ldr	r3, [pc, #296]	; (8010028 <tcp_process+0x56c>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff02:	4b4a      	ldr	r3, [pc, #296]	; (801002c <tcp_process+0x570>)
 800ff04:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff06:	885b      	ldrh	r3, [r3, #2]
 800ff08:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff0a:	4a48      	ldr	r2, [pc, #288]	; (801002c <tcp_process+0x570>)
 800ff0c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff0e:	8812      	ldrh	r2, [r2, #0]
 800ff10:	b292      	uxth	r2, r2
 800ff12:	9201      	str	r2, [sp, #4]
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	4b46      	ldr	r3, [pc, #280]	; (8010030 <tcp_process+0x574>)
 800ff18:	4a46      	ldr	r2, [pc, #280]	; (8010034 <tcp_process+0x578>)
 800ff1a:	f002 fbff 	bl	801271c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ff1e:	e16a      	b.n	80101f6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff20:	4b3e      	ldr	r3, [pc, #248]	; (801001c <tcp_process+0x560>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 0302 	and.w	r3, r3, #2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 8164 	beq.w	80101f6 <tcp_process+0x73a>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	1e5a      	subs	r2, r3, #1
 800ff34:	4b3c      	ldr	r3, [pc, #240]	; (8010028 <tcp_process+0x56c>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	f040 815c 	bne.w	80101f6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f002 fc98 	bl	8012874 <tcp_rexmit>
    break;
 800ff44:	e157      	b.n	80101f6 <tcp_process+0x73a>
 800ff46:	e156      	b.n	80101f6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f9e7 	bl	801031c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff4e:	4b3e      	ldr	r3, [pc, #248]	; (8010048 <tcp_process+0x58c>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	f003 0320 	and.w	r3, r3, #32
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 814f 	beq.w	80101fa <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	7e9b      	ldrb	r3, [r3, #26]
 800ff60:	f043 0302 	orr.w	r3, r3, #2
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2207      	movs	r2, #7
 800ff6e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ff70:	e143      	b.n	80101fa <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 f9d2 	bl	801031c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ff78:	4b33      	ldr	r3, [pc, #204]	; (8010048 <tcp_process+0x58c>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f003 0320 	and.w	r3, r3, #32
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d074      	beq.n	801006e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff84:	4b25      	ldr	r3, [pc, #148]	; (801001c <tcp_process+0x560>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 0310 	and.w	r3, r3, #16
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d063      	beq.n	8010058 <tcp_process+0x59c>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff94:	4b22      	ldr	r3, [pc, #136]	; (8010020 <tcp_process+0x564>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d15d      	bne.n	8010058 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d159      	bne.n	8010058 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	7e9b      	ldrb	r3, [r3, #26]
 800ffa8:	f043 0302 	orr.w	r3, r3, #2
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7fe fee6 	bl	800ed84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ffb8:	4b24      	ldr	r3, [pc, #144]	; (801004c <tcp_process+0x590>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d105      	bne.n	800ffce <tcp_process+0x512>
 800ffc2:	4b22      	ldr	r3, [pc, #136]	; (801004c <tcp_process+0x590>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	4a20      	ldr	r2, [pc, #128]	; (801004c <tcp_process+0x590>)
 800ffca:	6013      	str	r3, [r2, #0]
 800ffcc:	e013      	b.n	800fff6 <tcp_process+0x53a>
 800ffce:	4b1f      	ldr	r3, [pc, #124]	; (801004c <tcp_process+0x590>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	617b      	str	r3, [r7, #20]
 800ffd4:	e00c      	b.n	800fff0 <tcp_process+0x534>
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d104      	bne.n	800ffea <tcp_process+0x52e>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	68da      	ldr	r2, [r3, #12]
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	60da      	str	r2, [r3, #12]
 800ffe8:	e005      	b.n	800fff6 <tcp_process+0x53a>
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1ef      	bne.n	800ffd6 <tcp_process+0x51a>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	60da      	str	r2, [r3, #12]
 800fffc:	4b14      	ldr	r3, [pc, #80]	; (8010050 <tcp_process+0x594>)
 800fffe:	2201      	movs	r2, #1
 8010000:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	220a      	movs	r2, #10
 8010006:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010008:	4b12      	ldr	r3, [pc, #72]	; (8010054 <tcp_process+0x598>)
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	60da      	str	r2, [r3, #12]
 8010010:	4a10      	ldr	r2, [pc, #64]	; (8010054 <tcp_process+0x598>)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6013      	str	r3, [r2, #0]
 8010016:	f002 fdd3 	bl	8012bc0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801001a:	e0f0      	b.n	80101fe <tcp_process+0x742>
 801001c:	2000424c 	.word	0x2000424c
 8010020:	20004244 	.word	0x20004244
 8010024:	2000424a 	.word	0x2000424a
 8010028:	20004240 	.word	0x20004240
 801002c:	20004230 	.word	0x20004230
 8010030:	20007a00 	.word	0x20007a00
 8010034:	20007a04 	.word	0x20007a04
 8010038:	0801897c 	.word	0x0801897c
 801003c:	08018b80 	.word	0x08018b80
 8010040:	080189c0 	.word	0x080189c0
 8010044:	20004248 	.word	0x20004248
 8010048:	2000424d 	.word	0x2000424d
 801004c:	2000b100 	.word	0x2000b100
 8010050:	2000b0fc 	.word	0x2000b0fc
 8010054:	2000b110 	.word	0x2000b110
        tcp_ack_now(pcb);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7e9b      	ldrb	r3, [r3, #26]
 801005c:	f043 0302 	orr.w	r3, r3, #2
 8010060:	b2da      	uxtb	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2208      	movs	r2, #8
 801006a:	751a      	strb	r2, [r3, #20]
    break;
 801006c:	e0c7      	b.n	80101fe <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801006e:	4b6a      	ldr	r3, [pc, #424]	; (8010218 <tcp_process+0x75c>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	f003 0310 	and.w	r3, r3, #16
 8010076:	2b00      	cmp	r3, #0
 8010078:	f000 80c1 	beq.w	80101fe <tcp_process+0x742>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010080:	4b66      	ldr	r3, [pc, #408]	; (801021c <tcp_process+0x760>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	429a      	cmp	r2, r3
 8010086:	f040 80ba 	bne.w	80101fe <tcp_process+0x742>
               pcb->unsent == NULL) {
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801008e:	2b00      	cmp	r3, #0
 8010090:	f040 80b5 	bne.w	80101fe <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2206      	movs	r2, #6
 8010098:	751a      	strb	r2, [r3, #20]
    break;
 801009a:	e0b0      	b.n	80101fe <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 f93d 	bl	801031c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80100a2:	4b5f      	ldr	r3, [pc, #380]	; (8010220 <tcp_process+0x764>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	f003 0320 	and.w	r3, r3, #32
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 80a9 	beq.w	8010202 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	7e9b      	ldrb	r3, [r3, #26]
 80100b4:	f043 0302 	orr.w	r3, r3, #2
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7fe fe60 	bl	800ed84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80100c4:	4b57      	ldr	r3, [pc, #348]	; (8010224 <tcp_process+0x768>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d105      	bne.n	80100da <tcp_process+0x61e>
 80100ce:	4b55      	ldr	r3, [pc, #340]	; (8010224 <tcp_process+0x768>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	4a53      	ldr	r2, [pc, #332]	; (8010224 <tcp_process+0x768>)
 80100d6:	6013      	str	r3, [r2, #0]
 80100d8:	e013      	b.n	8010102 <tcp_process+0x646>
 80100da:	4b52      	ldr	r3, [pc, #328]	; (8010224 <tcp_process+0x768>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	613b      	str	r3, [r7, #16]
 80100e0:	e00c      	b.n	80100fc <tcp_process+0x640>
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d104      	bne.n	80100f6 <tcp_process+0x63a>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	68da      	ldr	r2, [r3, #12]
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	60da      	str	r2, [r3, #12]
 80100f4:	e005      	b.n	8010102 <tcp_process+0x646>
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1ef      	bne.n	80100e2 <tcp_process+0x626>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	60da      	str	r2, [r3, #12]
 8010108:	4b47      	ldr	r3, [pc, #284]	; (8010228 <tcp_process+0x76c>)
 801010a:	2201      	movs	r2, #1
 801010c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	220a      	movs	r2, #10
 8010112:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010114:	4b45      	ldr	r3, [pc, #276]	; (801022c <tcp_process+0x770>)
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	60da      	str	r2, [r3, #12]
 801011c:	4a43      	ldr	r2, [pc, #268]	; (801022c <tcp_process+0x770>)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6013      	str	r3, [r2, #0]
 8010122:	f002 fd4d 	bl	8012bc0 <tcp_timer_needed>
    }
    break;
 8010126:	e06c      	b.n	8010202 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f8f7 	bl	801031c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801012e:	4b3a      	ldr	r3, [pc, #232]	; (8010218 <tcp_process+0x75c>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	f003 0310 	and.w	r3, r3, #16
 8010136:	2b00      	cmp	r3, #0
 8010138:	d065      	beq.n	8010206 <tcp_process+0x74a>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801013e:	4b37      	ldr	r3, [pc, #220]	; (801021c <tcp_process+0x760>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	429a      	cmp	r2, r3
 8010144:	d15f      	bne.n	8010206 <tcp_process+0x74a>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801014a:	2b00      	cmp	r3, #0
 801014c:	d15b      	bne.n	8010206 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7fe fe18 	bl	800ed84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010154:	4b33      	ldr	r3, [pc, #204]	; (8010224 <tcp_process+0x768>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	429a      	cmp	r2, r3
 801015c:	d105      	bne.n	801016a <tcp_process+0x6ae>
 801015e:	4b31      	ldr	r3, [pc, #196]	; (8010224 <tcp_process+0x768>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	4a2f      	ldr	r2, [pc, #188]	; (8010224 <tcp_process+0x768>)
 8010166:	6013      	str	r3, [r2, #0]
 8010168:	e013      	b.n	8010192 <tcp_process+0x6d6>
 801016a:	4b2e      	ldr	r3, [pc, #184]	; (8010224 <tcp_process+0x768>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	60fb      	str	r3, [r7, #12]
 8010170:	e00c      	b.n	801018c <tcp_process+0x6d0>
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	429a      	cmp	r2, r3
 801017a:	d104      	bne.n	8010186 <tcp_process+0x6ca>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	68da      	ldr	r2, [r3, #12]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	60da      	str	r2, [r3, #12]
 8010184:	e005      	b.n	8010192 <tcp_process+0x6d6>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	60fb      	str	r3, [r7, #12]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d1ef      	bne.n	8010172 <tcp_process+0x6b6>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	60da      	str	r2, [r3, #12]
 8010198:	4b23      	ldr	r3, [pc, #140]	; (8010228 <tcp_process+0x76c>)
 801019a:	2201      	movs	r2, #1
 801019c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	220a      	movs	r2, #10
 80101a2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80101a4:	4b21      	ldr	r3, [pc, #132]	; (801022c <tcp_process+0x770>)
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	60da      	str	r2, [r3, #12]
 80101ac:	4a1f      	ldr	r2, [pc, #124]	; (801022c <tcp_process+0x770>)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	f002 fd05 	bl	8012bc0 <tcp_timer_needed>
    }
    break;
 80101b6:	e026      	b.n	8010206 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f8af 	bl	801031c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80101be:	4b16      	ldr	r3, [pc, #88]	; (8010218 <tcp_process+0x75c>)
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	f003 0310 	and.w	r3, r3, #16
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d01f      	beq.n	801020a <tcp_process+0x74e>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101ce:	4b13      	ldr	r3, [pc, #76]	; (801021c <tcp_process+0x760>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d119      	bne.n	801020a <tcp_process+0x74e>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d115      	bne.n	801020a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80101de:	4b10      	ldr	r3, [pc, #64]	; (8010220 <tcp_process+0x764>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	f043 0310 	orr.w	r3, r3, #16
 80101e6:	b2da      	uxtb	r2, r3
 80101e8:	4b0d      	ldr	r3, [pc, #52]	; (8010220 <tcp_process+0x764>)
 80101ea:	701a      	strb	r2, [r3, #0]
    }
    break;
 80101ec:	e00d      	b.n	801020a <tcp_process+0x74e>
  default:
    break;
 80101ee:	bf00      	nop
 80101f0:	e00c      	b.n	801020c <tcp_process+0x750>
    break;
 80101f2:	bf00      	nop
 80101f4:	e00a      	b.n	801020c <tcp_process+0x750>
    break;
 80101f6:	bf00      	nop
 80101f8:	e008      	b.n	801020c <tcp_process+0x750>
    break;
 80101fa:	bf00      	nop
 80101fc:	e006      	b.n	801020c <tcp_process+0x750>
    break;
 80101fe:	bf00      	nop
 8010200:	e004      	b.n	801020c <tcp_process+0x750>
    break;
 8010202:	bf00      	nop
 8010204:	e002      	b.n	801020c <tcp_process+0x750>
    break;
 8010206:	bf00      	nop
 8010208:	e000      	b.n	801020c <tcp_process+0x750>
    break;
 801020a:	bf00      	nop
  }
  return ERR_OK;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	3720      	adds	r7, #32
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	2000424c 	.word	0x2000424c
 801021c:	20004244 	.word	0x20004244
 8010220:	2000424d 	.word	0x2000424d
 8010224:	2000b100 	.word	0x2000b100
 8010228:	2000b0fc 	.word	0x2000b0fc
 801022c:	2000b110 	.word	0x2000b110

08010230 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010230:	b590      	push	{r4, r7, lr}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	899b      	ldrh	r3, [r3, #12]
 8010240:	b29b      	uxth	r3, r3
 8010242:	4618      	mov	r0, r3
 8010244:	f7fb fe96 	bl	800bf74 <lwip_htons>
 8010248:	4603      	mov	r3, r0
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d027      	beq.n	80102a2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010252:	6838      	ldr	r0, [r7, #0]
 8010254:	f7fe fb2d 	bl	800e8b2 <tcp_segs_free>
    next = NULL;
 8010258:	2300      	movs	r3, #0
 801025a:	603b      	str	r3, [r7, #0]
 801025c:	e055      	b.n	801030a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fb fe84 	bl	800bf74 <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00d      	beq.n	8010292 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	899b      	ldrh	r3, [r3, #12]
 801027c:	b29c      	uxth	r4, r3
 801027e:	2001      	movs	r0, #1
 8010280:	f7fb fe78 	bl	800bf74 <lwip_htons>
 8010284:	4603      	mov	r3, r0
 8010286:	461a      	mov	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	4322      	orrs	r2, r4
 801028e:	b292      	uxth	r2, r2
 8010290:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f7fe fb1c 	bl	800e8da <tcp_seg_free>
    while (next &&
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00e      	beq.n	80102c6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	891b      	ldrh	r3, [r3, #8]
 80102ac:	461a      	mov	r2, r3
 80102ae:	4b1a      	ldr	r3, [pc, #104]	; (8010318 <tcp_oos_insert_segment+0xe8>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	441a      	add	r2, r3
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	8909      	ldrh	r1, [r1, #8]
 80102be:	440b      	add	r3, r1
 80102c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	dacb      	bge.n	801025e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d01e      	beq.n	801030a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	891b      	ldrh	r3, [r3, #8]
 80102d0:	461a      	mov	r2, r3
 80102d2:	4b11      	ldr	r3, [pc, #68]	; (8010318 <tcp_oos_insert_segment+0xe8>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	441a      	add	r2, r3
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	dd12      	ble.n	801030a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	4b0a      	ldr	r3, [pc, #40]	; (8010318 <tcp_oos_insert_segment+0xe8>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	891b      	ldrh	r3, [r3, #8]
 8010302:	4619      	mov	r1, r3
 8010304:	4610      	mov	r0, r2
 8010306:	f7fc fe5b 	bl	800cfc0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	601a      	str	r2, [r3, #0]
}
 8010310:	bf00      	nop
 8010312:	3714      	adds	r7, #20
 8010314:	46bd      	mov	sp, r7
 8010316:	bd90      	pop	{r4, r7, pc}
 8010318:	20004240 	.word	0x20004240

0801031c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801031e:	b08d      	sub	sp, #52	; 0x34
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010324:	2300      	movs	r3, #0
 8010326:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	7d1b      	ldrb	r3, [r3, #20]
 801032c:	2b03      	cmp	r3, #3
 801032e:	d806      	bhi.n	801033e <tcp_receive+0x22>
 8010330:	4ba6      	ldr	r3, [pc, #664]	; (80105cc <tcp_receive+0x2b0>)
 8010332:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010336:	49a6      	ldr	r1, [pc, #664]	; (80105d0 <tcp_receive+0x2b4>)
 8010338:	48a6      	ldr	r0, [pc, #664]	; (80105d4 <tcp_receive+0x2b8>)
 801033a:	f005 fc95 	bl	8015c68 <iprintf>

  if (flags & TCP_ACK) {
 801033e:	4ba6      	ldr	r3, [pc, #664]	; (80105d8 <tcp_receive+0x2bc>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	f003 0310 	and.w	r3, r3, #16
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 82bf 	beq.w	80108ca <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010352:	461a      	mov	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010358:	4413      	add	r3, r2
 801035a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010360:	4b9e      	ldr	r3, [pc, #632]	; (80105dc <tcp_receive+0x2c0>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	db1b      	blt.n	80103a2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801036e:	4b9b      	ldr	r3, [pc, #620]	; (80105dc <tcp_receive+0x2c0>)
 8010370:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010372:	429a      	cmp	r2, r3
 8010374:	d106      	bne.n	8010384 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801037a:	4b99      	ldr	r3, [pc, #612]	; (80105e0 <tcp_receive+0x2c4>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	2b00      	cmp	r3, #0
 8010382:	db0e      	blt.n	80103a2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010388:	4b95      	ldr	r3, [pc, #596]	; (80105e0 <tcp_receive+0x2c4>)
 801038a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801038c:	429a      	cmp	r2, r3
 801038e:	d141      	bne.n	8010414 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010390:	4b94      	ldr	r3, [pc, #592]	; (80105e4 <tcp_receive+0x2c8>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	89db      	ldrh	r3, [r3, #14]
 8010396:	b29a      	uxth	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801039e:	429a      	cmp	r2, r3
 80103a0:	d938      	bls.n	8010414 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80103a2:	4b90      	ldr	r3, [pc, #576]	; (80105e4 <tcp_receive+0x2c8>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	89db      	ldrh	r3, [r3, #14]
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103bc:	429a      	cmp	r2, r3
 80103be:	d205      	bcs.n	80103cc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80103cc:	4b83      	ldr	r3, [pc, #524]	; (80105dc <tcp_receive+0x2c0>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80103d4:	4b82      	ldr	r3, [pc, #520]	; (80105e0 <tcp_receive+0x2c4>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d10d      	bne.n	8010402 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d111      	bne.n	8010414 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2201      	movs	r2, #1
 80103fc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010400:	e008      	b.n	8010414 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010414:	4b72      	ldr	r3, [pc, #456]	; (80105e0 <tcp_receive+0x2c4>)
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801041c:	1ad3      	subs	r3, r2, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	dc53      	bgt.n	80104ca <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8010422:	4b71      	ldr	r3, [pc, #452]	; (80105e8 <tcp_receive+0x2cc>)
 8010424:	881b      	ldrh	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d146      	bne.n	80104b8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8010434:	4413      	add	r3, r2
 8010436:	697a      	ldr	r2, [r7, #20]
 8010438:	429a      	cmp	r2, r3
 801043a:	d13d      	bne.n	80104b8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010442:	2b00      	cmp	r3, #0
 8010444:	db38      	blt.n	80104b8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801044a:	4b65      	ldr	r3, [pc, #404]	; (80105e0 <tcp_receive+0x2c4>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	d132      	bne.n	80104b8 <tcp_receive+0x19c>
              found_dupack = 1;
 8010452:	2301      	movs	r3, #1
 8010454:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801045c:	2bff      	cmp	r3, #255	; 0xff
 801045e:	d007      	beq.n	8010470 <tcp_receive+0x154>
                ++pcb->dupacks;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010466:	3301      	adds	r3, #1
 8010468:	b2da      	uxtb	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010476:	2b03      	cmp	r3, #3
 8010478:	d916      	bls.n	80104a8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010484:	4413      	add	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801048e:	429a      	cmp	r2, r3
 8010490:	d912      	bls.n	80104b8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801049c:	4413      	add	r3, r2
 801049e:	b29a      	uxth	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104a6:	e007      	b.n	80104b8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104ae:	2b03      	cmp	r3, #3
 80104b0:	d102      	bne.n	80104b8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f002 fa2e 	bl	8012914 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f040 8169 	bne.w	8010792 <tcp_receive+0x476>
        pcb->dupacks = 0;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80104c8:	e163      	b.n	8010792 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80104ca:	4b45      	ldr	r3, [pc, #276]	; (80105e0 <tcp_receive+0x2c4>)
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104d2:	1ad3      	subs	r3, r2, r3
 80104d4:	3b01      	subs	r3, #1
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f2c0 8107 	blt.w	80106ea <tcp_receive+0x3ce>
 80104dc:	4b40      	ldr	r3, [pc, #256]	; (80105e0 <tcp_receive+0x2c4>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f300 80ff 	bgt.w	80106ea <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	7e9b      	ldrb	r3, [r3, #26]
 80104f0:	f003 0304 	and.w	r3, r3, #4
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00c      	beq.n	8010512 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	7e9b      	ldrb	r3, [r3, #26]
 80104fc:	f023 0304 	bic.w	r3, r3, #4
 8010500:	b2da      	uxtb	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010520:	10db      	asrs	r3, r3, #3
 8010522:	b21b      	sxth	r3, r3
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801052c:	b29b      	uxth	r3, r3
 801052e:	4413      	add	r3, r2
 8010530:	b29b      	uxth	r3, r3
 8010532:	b21a      	sxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010542:	4b27      	ldr	r3, [pc, #156]	; (80105e0 <tcp_receive+0x2c4>)
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	7d1b      	ldrb	r3, [r3, #20]
 801054e:	2b03      	cmp	r3, #3
 8010550:	f240 8094 	bls.w	801067c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010560:	429a      	cmp	r2, r3
 8010562:	d216      	bcs.n	8010592 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801056e:	4413      	add	r3, r2
 8010570:	b29a      	uxth	r2, r3
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010578:	429a      	cmp	r2, r3
 801057a:	d97f      	bls.n	801067c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010586:	4413      	add	r3, r2
 8010588:	b29a      	uxth	r2, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010590:	e074      	b.n	801067c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801059c:	4619      	mov	r1, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105a2:	fb03 f301 	mul.w	r3, r3, r1
 80105a6:	6879      	ldr	r1, [r7, #4]
 80105a8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80105ac:	fb93 f3f1 	sdiv	r3, r3, r1
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	4413      	add	r3, r2
 80105b4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80105bc:	8a7a      	ldrh	r2, [r7, #18]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d95c      	bls.n	801067c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8a7a      	ldrh	r2, [r7, #18]
 80105c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80105ca:	e057      	b.n	801067c <tcp_receive+0x360>
 80105cc:	0801897c 	.word	0x0801897c
 80105d0:	08018ba0 	.word	0x08018ba0
 80105d4:	080189c0 	.word	0x080189c0
 80105d8:	2000424c 	.word	0x2000424c
 80105dc:	20004240 	.word	0x20004240
 80105e0:	20004244 	.word	0x20004244
 80105e4:	20004230 	.word	0x20004230
 80105e8:	2000424a 	.word	0x2000424a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	4618      	mov	r0, r3
 8010608:	f7fc fee8 	bl	800d3dc <pbuf_clen>
 801060c:	4603      	mov	r3, r0
 801060e:	429c      	cmp	r4, r3
 8010610:	d206      	bcs.n	8010620 <tcp_receive+0x304>
 8010612:	4b70      	ldr	r3, [pc, #448]	; (80107d4 <tcp_receive+0x4b8>)
 8010614:	f240 429e 	movw	r2, #1182	; 0x49e
 8010618:	496f      	ldr	r1, [pc, #444]	; (80107d8 <tcp_receive+0x4bc>)
 801061a:	4870      	ldr	r0, [pc, #448]	; (80107dc <tcp_receive+0x4c0>)
 801061c:	f005 fb24 	bl	8015c68 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	4618      	mov	r0, r3
 8010626:	f7fc fed9 	bl	800d3dc <pbuf_clen>
 801062a:	4603      	mov	r3, r0
 801062c:	461a      	mov	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010634:	1a9b      	subs	r3, r3, r2
 8010636:	b29a      	uxth	r2, r3
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	891a      	ldrh	r2, [r3, #8]
 8010642:	4b67      	ldr	r3, [pc, #412]	; (80107e0 <tcp_receive+0x4c4>)
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	4413      	add	r3, r2
 8010648:	b29a      	uxth	r2, r3
 801064a:	4b65      	ldr	r3, [pc, #404]	; (80107e0 <tcp_receive+0x4c4>)
 801064c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 801064e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010650:	f7fe f943 	bl	800e8da <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00e      	beq.n	801067c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010662:	2b00      	cmp	r3, #0
 8010664:	d10a      	bne.n	801067c <tcp_receive+0x360>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801066a:	2b00      	cmp	r3, #0
 801066c:	d106      	bne.n	801067c <tcp_receive+0x360>
 801066e:	4b59      	ldr	r3, [pc, #356]	; (80107d4 <tcp_receive+0x4b8>)
 8010670:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8010674:	495b      	ldr	r1, [pc, #364]	; (80107e4 <tcp_receive+0x4c8>)
 8010676:	4859      	ldr	r0, [pc, #356]	; (80107dc <tcp_receive+0x4c0>)
 8010678:	f005 faf6 	bl	8015c68 <iprintf>
      while (pcb->unacked != NULL &&
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010680:	2b00      	cmp	r3, #0
 8010682:	d022      	beq.n	80106ca <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	4618      	mov	r0, r3
 801068e:	f7fb fc7f 	bl	800bf90 <lwip_htonl>
 8010692:	4604      	mov	r4, r0
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010698:	891b      	ldrh	r3, [r3, #8]
 801069a:	461d      	mov	r5, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	899b      	ldrh	r3, [r3, #12]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fb fc64 	bl	800bf74 <lwip_htons>
 80106ac:	4603      	mov	r3, r0
 80106ae:	f003 0303 	and.w	r3, r3, #3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <tcp_receive+0x39e>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e000      	b.n	80106bc <tcp_receive+0x3a0>
 80106ba:	2300      	movs	r3, #0
 80106bc:	442b      	add	r3, r5
 80106be:	18e2      	adds	r2, r4, r3
 80106c0:	4b49      	ldr	r3, [pc, #292]	; (80107e8 <tcp_receive+0x4cc>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	dd90      	ble.n	80105ec <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d104      	bne.n	80106dc <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80106da:	e002      	b.n	80106e2 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	76da      	strb	r2, [r3, #27]
 80106e8:	e002      	b.n	80106f0 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f001 fd30 	bl	8012150 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80106f0:	e04f      	b.n	8010792 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010706:	2b00      	cmp	r3, #0
 8010708:	d103      	bne.n	8010712 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	4618      	mov	r0, r3
 801071e:	f7fc fe5d 	bl	800d3dc <pbuf_clen>
 8010722:	4603      	mov	r3, r0
 8010724:	429c      	cmp	r4, r3
 8010726:	d206      	bcs.n	8010736 <tcp_receive+0x41a>
 8010728:	4b2a      	ldr	r3, [pc, #168]	; (80107d4 <tcp_receive+0x4b8>)
 801072a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801072e:	492a      	ldr	r1, [pc, #168]	; (80107d8 <tcp_receive+0x4bc>)
 8010730:	482a      	ldr	r0, [pc, #168]	; (80107dc <tcp_receive+0x4c0>)
 8010732:	f005 fa99 	bl	8015c68 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	4618      	mov	r0, r3
 801073c:	f7fc fe4e 	bl	800d3dc <pbuf_clen>
 8010740:	4603      	mov	r3, r0
 8010742:	461a      	mov	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801074a:	1a9b      	subs	r3, r3, r2
 801074c:	b29a      	uxth	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8010754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010756:	891a      	ldrh	r2, [r3, #8]
 8010758:	4b21      	ldr	r3, [pc, #132]	; (80107e0 <tcp_receive+0x4c4>)
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	4413      	add	r3, r2
 801075e:	b29a      	uxth	r2, r3
 8010760:	4b1f      	ldr	r3, [pc, #124]	; (80107e0 <tcp_receive+0x4c4>)
 8010762:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010766:	f7fe f8b8 	bl	800e8da <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00e      	beq.n	8010792 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10a      	bne.n	8010792 <tcp_receive+0x476>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010780:	2b00      	cmp	r3, #0
 8010782:	d106      	bne.n	8010792 <tcp_receive+0x476>
 8010784:	4b13      	ldr	r3, [pc, #76]	; (80107d4 <tcp_receive+0x4b8>)
 8010786:	f240 42dd 	movw	r2, #1245	; 0x4dd
 801078a:	4916      	ldr	r1, [pc, #88]	; (80107e4 <tcp_receive+0x4c8>)
 801078c:	4813      	ldr	r0, [pc, #76]	; (80107dc <tcp_receive+0x4c0>)
 801078e:	f005 fa6b 	bl	8015c68 <iprintf>
    while (pcb->unsent != NULL &&
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010796:	2b00      	cmp	r3, #0
 8010798:	d036      	beq.n	8010808 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801079a:	4b13      	ldr	r3, [pc, #76]	; (80107e8 <tcp_receive+0x4cc>)
 801079c:	681c      	ldr	r4, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fb fbf2 	bl	800bf90 <lwip_htonl>
 80107ac:	4605      	mov	r5, r0
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107b2:	891b      	ldrh	r3, [r3, #8]
 80107b4:	461e      	mov	r6, r3
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107ba:	68db      	ldr	r3, [r3, #12]
 80107bc:	899b      	ldrh	r3, [r3, #12]
 80107be:	b29b      	uxth	r3, r3
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fb fbd7 	bl	800bf74 <lwip_htons>
 80107c6:	4603      	mov	r3, r0
 80107c8:	f003 0303 	and.w	r3, r3, #3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00d      	beq.n	80107ec <tcp_receive+0x4d0>
 80107d0:	2301      	movs	r3, #1
 80107d2:	e00c      	b.n	80107ee <tcp_receive+0x4d2>
 80107d4:	0801897c 	.word	0x0801897c
 80107d8:	08018bbc 	.word	0x08018bbc
 80107dc:	080189c0 	.word	0x080189c0
 80107e0:	20004248 	.word	0x20004248
 80107e4:	08018be4 	.word	0x08018be4
 80107e8:	20004244 	.word	0x20004244
 80107ec:	2300      	movs	r3, #0
 80107ee:	4433      	add	r3, r6
 80107f0:	442b      	add	r3, r5
 80107f2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	db07      	blt.n	8010808 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80107f8:	4b8d      	ldr	r3, [pc, #564]	; (8010a30 <tcp_receive+0x714>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	f77f af75 	ble.w	80106f2 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801080e:	4b89      	ldr	r3, [pc, #548]	; (8010a34 <tcp_receive+0x718>)
 8010810:	881b      	ldrh	r3, [r3, #0]
 8010812:	4413      	add	r3, r2
 8010814:	b29a      	uxth	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010820:	2b00      	cmp	r3, #0
 8010822:	d052      	beq.n	80108ca <tcp_receive+0x5ae>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010828:	4b81      	ldr	r3, [pc, #516]	; (8010a30 <tcp_receive+0x714>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	1ad3      	subs	r3, r2, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	da4b      	bge.n	80108ca <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010832:	4b81      	ldr	r3, [pc, #516]	; (8010a38 <tcp_receive+0x71c>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083c:	b29b      	uxth	r3, r3
 801083e:	1ad3      	subs	r3, r2, r3
 8010840:	b29b      	uxth	r3, r3
 8010842:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010844:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801084c:	10db      	asrs	r3, r3, #3
 801084e:	b21b      	sxth	r3, r3
 8010850:	b29b      	uxth	r3, r3
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29b      	uxth	r3, r3
 8010856:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801085e:	b29a      	uxth	r2, r3
 8010860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010862:	4413      	add	r3, r2
 8010864:	b29b      	uxth	r3, r3
 8010866:	b21a      	sxth	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801086c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010870:	2b00      	cmp	r3, #0
 8010872:	da03      	bge.n	801087c <tcp_receive+0x560>
        m = -m;
 8010874:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010876:	425b      	negs	r3, r3
 8010878:	b29b      	uxth	r3, r3
 801087a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 801087c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010884:	109b      	asrs	r3, r3, #2
 8010886:	b21b      	sxth	r3, r3
 8010888:	b29b      	uxth	r3, r3
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	b29b      	uxth	r3, r3
 801088e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010896:	b29a      	uxth	r2, r3
 8010898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801089a:	4413      	add	r3, r2
 801089c:	b29b      	uxth	r3, r3
 801089e:	b21a      	sxth	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108aa:	10db      	asrs	r3, r3, #3
 80108ac:	b21b      	sxth	r3, r3
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4413      	add	r3, r2
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	b21a      	sxth	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80108ca:	4b5c      	ldr	r3, [pc, #368]	; (8010a3c <tcp_receive+0x720>)
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f000 84f1 	beq.w	80112b6 <tcp_receive+0xf9a>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	7d1b      	ldrb	r3, [r3, #20]
 80108d8:	2b06      	cmp	r3, #6
 80108da:	f200 84ec 	bhi.w	80112b6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108e2:	4b57      	ldr	r3, [pc, #348]	; (8010a40 <tcp_receive+0x724>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	3b01      	subs	r3, #1
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f2c0 80b8 	blt.w	8010a60 <tcp_receive+0x744>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108f4:	4b51      	ldr	r3, [pc, #324]	; (8010a3c <tcp_receive+0x720>)
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	4619      	mov	r1, r3
 80108fa:	4b51      	ldr	r3, [pc, #324]	; (8010a40 <tcp_receive+0x724>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	440b      	add	r3, r1
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	3301      	adds	r3, #1
 8010904:	2b00      	cmp	r3, #0
 8010906:	f300 80ab 	bgt.w	8010a60 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801090a:	4b4e      	ldr	r3, [pc, #312]	; (8010a44 <tcp_receive+0x728>)
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010914:	4b4a      	ldr	r3, [pc, #296]	; (8010a40 <tcp_receive+0x724>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801091c:	4b49      	ldr	r3, [pc, #292]	; (8010a44 <tcp_receive+0x728>)
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d106      	bne.n	8010932 <tcp_receive+0x616>
 8010924:	4b48      	ldr	r3, [pc, #288]	; (8010a48 <tcp_receive+0x72c>)
 8010926:	f240 523c 	movw	r2, #1340	; 0x53c
 801092a:	4948      	ldr	r1, [pc, #288]	; (8010a4c <tcp_receive+0x730>)
 801092c:	4848      	ldr	r0, [pc, #288]	; (8010a50 <tcp_receive+0x734>)
 801092e:	f005 f99b 	bl	8015c68 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010938:	4293      	cmp	r3, r2
 801093a:	dd06      	ble.n	801094a <tcp_receive+0x62e>
 801093c:	4b42      	ldr	r3, [pc, #264]	; (8010a48 <tcp_receive+0x72c>)
 801093e:	f240 523d 	movw	r2, #1341	; 0x53d
 8010942:	4944      	ldr	r1, [pc, #272]	; (8010a54 <tcp_receive+0x738>)
 8010944:	4842      	ldr	r0, [pc, #264]	; (8010a50 <tcp_receive+0x734>)
 8010946:	f005 f98f 	bl	8015c68 <iprintf>
      if (inseg.p->len < off) {
 801094a:	4b3e      	ldr	r3, [pc, #248]	; (8010a44 <tcp_receive+0x728>)
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	895b      	ldrh	r3, [r3, #10]
 8010950:	461a      	mov	r2, r3
 8010952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010954:	4293      	cmp	r3, r2
 8010956:	dd3e      	ble.n	80109d6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010958:	4b3a      	ldr	r3, [pc, #232]	; (8010a44 <tcp_receive+0x728>)
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	891b      	ldrh	r3, [r3, #8]
 801095e:	461a      	mov	r2, r3
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	4293      	cmp	r3, r2
 8010964:	dd06      	ble.n	8010974 <tcp_receive+0x658>
 8010966:	4b38      	ldr	r3, [pc, #224]	; (8010a48 <tcp_receive+0x72c>)
 8010968:	f240 523f 	movw	r2, #1343	; 0x53f
 801096c:	493a      	ldr	r1, [pc, #232]	; (8010a58 <tcp_receive+0x73c>)
 801096e:	4838      	ldr	r0, [pc, #224]	; (8010a50 <tcp_receive+0x734>)
 8010970:	f005 f97a 	bl	8015c68 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010974:	4b33      	ldr	r3, [pc, #204]	; (8010a44 <tcp_receive+0x728>)
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	891a      	ldrh	r2, [r3, #8]
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	b29b      	uxth	r3, r3
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010982:	e00e      	b.n	80109a2 <tcp_receive+0x686>
          off -= p->len;
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	895b      	ldrh	r3, [r3, #10]
 8010988:	461a      	mov	r2, r3
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	1a9b      	subs	r3, r3, r2
 801098e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	8a3a      	ldrh	r2, [r7, #16]
 8010994:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	2200      	movs	r2, #0
 801099a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	895b      	ldrh	r3, [r3, #10]
 80109a6:	461a      	mov	r2, r3
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	4293      	cmp	r3, r2
 80109ac:	dcea      	bgt.n	8010984 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80109ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	425b      	negs	r3, r3
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	b21b      	sxth	r3, r3
 80109b8:	4619      	mov	r1, r3
 80109ba:	69b8      	ldr	r0, [r7, #24]
 80109bc:	f7fc fc50 	bl	800d260 <pbuf_header>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d01c      	beq.n	8010a00 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80109c6:	4b20      	ldr	r3, [pc, #128]	; (8010a48 <tcp_receive+0x72c>)
 80109c8:	f240 524c 	movw	r2, #1356	; 0x54c
 80109cc:	4923      	ldr	r1, [pc, #140]	; (8010a5c <tcp_receive+0x740>)
 80109ce:	4820      	ldr	r0, [pc, #128]	; (8010a50 <tcp_receive+0x734>)
 80109d0:	f005 f94a 	bl	8015c68 <iprintf>
 80109d4:	e014      	b.n	8010a00 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80109d6:	4b1b      	ldr	r3, [pc, #108]	; (8010a44 <tcp_receive+0x728>)
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109dc:	b292      	uxth	r2, r2
 80109de:	4252      	negs	r2, r2
 80109e0:	b292      	uxth	r2, r2
 80109e2:	b212      	sxth	r2, r2
 80109e4:	4611      	mov	r1, r2
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fc fc3a 	bl	800d260 <pbuf_header>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d006      	beq.n	8010a00 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80109f2:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <tcp_receive+0x72c>)
 80109f4:	f240 5251 	movw	r2, #1361	; 0x551
 80109f8:	4918      	ldr	r1, [pc, #96]	; (8010a5c <tcp_receive+0x740>)
 80109fa:	4815      	ldr	r0, [pc, #84]	; (8010a50 <tcp_receive+0x734>)
 80109fc:	f005 f934 	bl	8015c68 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010a00:	4b10      	ldr	r3, [pc, #64]	; (8010a44 <tcp_receive+0x728>)
 8010a02:	891a      	ldrh	r2, [r3, #8]
 8010a04:	4b0e      	ldr	r3, [pc, #56]	; (8010a40 <tcp_receive+0x724>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	b299      	uxth	r1, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	1acb      	subs	r3, r1, r3
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	4413      	add	r3, r2
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	4b0a      	ldr	r3, [pc, #40]	; (8010a44 <tcp_receive+0x728>)
 8010a1a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a20:	4a07      	ldr	r2, [pc, #28]	; (8010a40 <tcp_receive+0x724>)
 8010a22:	6013      	str	r3, [r2, #0]
 8010a24:	4b07      	ldr	r3, [pc, #28]	; (8010a44 <tcp_receive+0x728>)
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	4a05      	ldr	r2, [pc, #20]	; (8010a40 <tcp_receive+0x724>)
 8010a2a:	6812      	ldr	r2, [r2, #0]
 8010a2c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a2e:	e025      	b.n	8010a7c <tcp_receive+0x760>
 8010a30:	20004244 	.word	0x20004244
 8010a34:	20004248 	.word	0x20004248
 8010a38:	2000b104 	.word	0x2000b104
 8010a3c:	2000424a 	.word	0x2000424a
 8010a40:	20004240 	.word	0x20004240
 8010a44:	20004220 	.word	0x20004220
 8010a48:	0801897c 	.word	0x0801897c
 8010a4c:	08018c04 	.word	0x08018c04
 8010a50:	080189c0 	.word	0x080189c0
 8010a54:	08018c14 	.word	0x08018c14
 8010a58:	08018c24 	.word	0x08018c24
 8010a5c:	08018c34 	.word	0x08018c34
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010a60:	4b87      	ldr	r3, [pc, #540]	; (8010c80 <tcp_receive+0x964>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	da06      	bge.n	8010a7c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	7e9b      	ldrb	r3, [r3, #26]
 8010a72:	f043 0302 	orr.w	r3, r3, #2
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a7c:	4b80      	ldr	r3, [pc, #512]	; (8010c80 <tcp_receive+0x964>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f2c0 8410 	blt.w	80112ac <tcp_receive+0xf90>
 8010a8c:	4b7c      	ldr	r3, [pc, #496]	; (8010c80 <tcp_receive+0x964>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a94:	6879      	ldr	r1, [r7, #4]
 8010a96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a98:	440b      	add	r3, r1
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f300 8404 	bgt.w	80112ac <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010aa8:	4b75      	ldr	r3, [pc, #468]	; (8010c80 <tcp_receive+0x964>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	f040 8287 	bne.w	8010fc0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ab2:	4b74      	ldr	r3, [pc, #464]	; (8010c84 <tcp_receive+0x968>)
 8010ab4:	891c      	ldrh	r4, [r3, #8]
 8010ab6:	4b73      	ldr	r3, [pc, #460]	; (8010c84 <tcp_receive+0x968>)
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	899b      	ldrh	r3, [r3, #12]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fb fa58 	bl	800bf74 <lwip_htons>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	f003 0303 	and.w	r3, r3, #3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d001      	beq.n	8010ad2 <tcp_receive+0x7b6>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e000      	b.n	8010ad4 <tcp_receive+0x7b8>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	4423      	add	r3, r4
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	4b6b      	ldr	r3, [pc, #428]	; (8010c88 <tcp_receive+0x96c>)
 8010ada:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ae0:	4b69      	ldr	r3, [pc, #420]	; (8010c88 <tcp_receive+0x96c>)
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d26e      	bcs.n	8010bc6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ae8:	4b66      	ldr	r3, [pc, #408]	; (8010c84 <tcp_receive+0x968>)
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	899b      	ldrh	r3, [r3, #12]
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7fb fa3f 	bl	800bf74 <lwip_htons>
 8010af6:	4603      	mov	r3, r0
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d01b      	beq.n	8010b38 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010b00:	4b60      	ldr	r3, [pc, #384]	; (8010c84 <tcp_receive+0x968>)
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	899b      	ldrh	r3, [r3, #12]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b0c:	b29c      	uxth	r4, r3
 8010b0e:	4b5d      	ldr	r3, [pc, #372]	; (8010c84 <tcp_receive+0x968>)
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	899b      	ldrh	r3, [r3, #12]
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fb fa2c 	bl	800bf74 <lwip_htons>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7fb fa25 	bl	800bf74 <lwip_htons>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	4b55      	ldr	r3, [pc, #340]	; (8010c84 <tcp_receive+0x968>)
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	4322      	orrs	r2, r4
 8010b34:	b292      	uxth	r2, r2
 8010b36:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b3c:	4b51      	ldr	r3, [pc, #324]	; (8010c84 <tcp_receive+0x968>)
 8010b3e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b40:	4b50      	ldr	r3, [pc, #320]	; (8010c84 <tcp_receive+0x968>)
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	899b      	ldrh	r3, [r3, #12]
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7fb fa13 	bl	800bf74 <lwip_htons>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	f003 0302 	and.w	r3, r3, #2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d005      	beq.n	8010b64 <tcp_receive+0x848>
            inseg.len -= 1;
 8010b58:	4b4a      	ldr	r3, [pc, #296]	; (8010c84 <tcp_receive+0x968>)
 8010b5a:	891b      	ldrh	r3, [r3, #8]
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	4b48      	ldr	r3, [pc, #288]	; (8010c84 <tcp_receive+0x968>)
 8010b62:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010b64:	4b47      	ldr	r3, [pc, #284]	; (8010c84 <tcp_receive+0x968>)
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	4b46      	ldr	r3, [pc, #280]	; (8010c84 <tcp_receive+0x968>)
 8010b6a:	891b      	ldrh	r3, [r3, #8]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	4610      	mov	r0, r2
 8010b70:	f7fc fa26 	bl	800cfc0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010b74:	4b43      	ldr	r3, [pc, #268]	; (8010c84 <tcp_receive+0x968>)
 8010b76:	891c      	ldrh	r4, [r3, #8]
 8010b78:	4b42      	ldr	r3, [pc, #264]	; (8010c84 <tcp_receive+0x968>)
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	899b      	ldrh	r3, [r3, #12]
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fb f9f7 	bl	800bf74 <lwip_htons>
 8010b86:	4603      	mov	r3, r0
 8010b88:	f003 0303 	and.w	r3, r3, #3
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <tcp_receive+0x878>
 8010b90:	2301      	movs	r3, #1
 8010b92:	e000      	b.n	8010b96 <tcp_receive+0x87a>
 8010b94:	2300      	movs	r3, #0
 8010b96:	4423      	add	r3, r4
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	4b3b      	ldr	r3, [pc, #236]	; (8010c88 <tcp_receive+0x96c>)
 8010b9c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b9e:	4b3a      	ldr	r3, [pc, #232]	; (8010c88 <tcp_receive+0x96c>)
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	4b36      	ldr	r3, [pc, #216]	; (8010c80 <tcp_receive+0x964>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	441a      	add	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bb2:	440b      	add	r3, r1
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d006      	beq.n	8010bc6 <tcp_receive+0x8aa>
 8010bb8:	4b34      	ldr	r3, [pc, #208]	; (8010c8c <tcp_receive+0x970>)
 8010bba:	f240 527f 	movw	r2, #1407	; 0x57f
 8010bbe:	4934      	ldr	r1, [pc, #208]	; (8010c90 <tcp_receive+0x974>)
 8010bc0:	4834      	ldr	r0, [pc, #208]	; (8010c94 <tcp_receive+0x978>)
 8010bc2:	f005 f851 	bl	8015c68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f000 80e1 	beq.w	8010d92 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010bd0:	4b2c      	ldr	r3, [pc, #176]	; (8010c84 <tcp_receive+0x968>)
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	899b      	ldrh	r3, [r3, #12]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fb f9cb 	bl	800bf74 <lwip_htons>
 8010bde:	4603      	mov	r3, r0
 8010be0:	f003 0301 	and.w	r3, r3, #1
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d010      	beq.n	8010c0a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010be8:	e00a      	b.n	8010c00 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bee:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010bfa:	68b8      	ldr	r0, [r7, #8]
 8010bfc:	f7fd fe6d 	bl	800e8da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1f0      	bne.n	8010bea <tcp_receive+0x8ce>
 8010c08:	e0c3      	b.n	8010d92 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010c10:	e04f      	b.n	8010cb2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c14:	68db      	ldr	r3, [r3, #12]
 8010c16:	899b      	ldrh	r3, [r3, #12]
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fb f9aa 	bl	800bf74 <lwip_htons>
 8010c20:	4603      	mov	r3, r0
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d03b      	beq.n	8010ca2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c2a:	4b16      	ldr	r3, [pc, #88]	; (8010c84 <tcp_receive+0x968>)
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	899b      	ldrh	r3, [r3, #12]
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7fb f99e 	bl	800bf74 <lwip_htons>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d12f      	bne.n	8010ca2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c42:	4b10      	ldr	r3, [pc, #64]	; (8010c84 <tcp_receive+0x968>)
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	899b      	ldrh	r3, [r3, #12]
 8010c48:	b29c      	uxth	r4, r3
 8010c4a:	2001      	movs	r0, #1
 8010c4c:	f7fb f992 	bl	800bf74 <lwip_htons>
 8010c50:	4603      	mov	r3, r0
 8010c52:	461a      	mov	r2, r3
 8010c54:	4b0b      	ldr	r3, [pc, #44]	; (8010c84 <tcp_receive+0x968>)
 8010c56:	68db      	ldr	r3, [r3, #12]
 8010c58:	4322      	orrs	r2, r4
 8010c5a:	b292      	uxth	r2, r2
 8010c5c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010c5e:	4b09      	ldr	r3, [pc, #36]	; (8010c84 <tcp_receive+0x968>)
 8010c60:	891c      	ldrh	r4, [r3, #8]
 8010c62:	4b08      	ldr	r3, [pc, #32]	; (8010c84 <tcp_receive+0x968>)
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	899b      	ldrh	r3, [r3, #12]
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fb f982 	bl	800bf74 <lwip_htons>
 8010c70:	4603      	mov	r3, r0
 8010c72:	f003 0303 	and.w	r3, r3, #3
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00e      	beq.n	8010c98 <tcp_receive+0x97c>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	e00d      	b.n	8010c9a <tcp_receive+0x97e>
 8010c7e:	bf00      	nop
 8010c80:	20004240 	.word	0x20004240
 8010c84:	20004220 	.word	0x20004220
 8010c88:	2000424a 	.word	0x2000424a
 8010c8c:	0801897c 	.word	0x0801897c
 8010c90:	08018c48 	.word	0x08018c48
 8010c94:	080189c0 	.word	0x080189c0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4423      	add	r3, r4
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	4b95      	ldr	r3, [pc, #596]	; (8010ef4 <tcp_receive+0xbd8>)
 8010ca0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8010ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8010ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cae:	f7fd fe14 	bl	800e8da <tcp_seg_free>
            while (next &&
 8010cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00e      	beq.n	8010cd6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010cb8:	4b8e      	ldr	r3, [pc, #568]	; (8010ef4 <tcp_receive+0xbd8>)
 8010cba:	881b      	ldrh	r3, [r3, #0]
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4b8e      	ldr	r3, [pc, #568]	; (8010ef8 <tcp_receive+0xbdc>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	441a      	add	r2, r3
 8010cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ccc:	8909      	ldrh	r1, [r1, #8]
 8010cce:	440b      	add	r3, r1
 8010cd0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	da9d      	bge.n	8010c12 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d057      	beq.n	8010d8c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8010cdc:	4b85      	ldr	r3, [pc, #532]	; (8010ef4 <tcp_receive+0xbd8>)
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	4b85      	ldr	r3, [pc, #532]	; (8010ef8 <tcp_receive+0xbdc>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	441a      	add	r2, r3
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dd4b      	ble.n	8010d8c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	4b7e      	ldr	r3, [pc, #504]	; (8010ef8 <tcp_receive+0xbdc>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	4b7d      	ldr	r3, [pc, #500]	; (8010efc <tcp_receive+0xbe0>)
 8010d08:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d0a:	4b7c      	ldr	r3, [pc, #496]	; (8010efc <tcp_receive+0xbe0>)
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	899b      	ldrh	r3, [r3, #12]
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fb f92e 	bl	800bf74 <lwip_htons>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	f003 0302 	and.w	r3, r3, #2
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d005      	beq.n	8010d2e <tcp_receive+0xa12>
                inseg.len -= 1;
 8010d22:	4b76      	ldr	r3, [pc, #472]	; (8010efc <tcp_receive+0xbe0>)
 8010d24:	891b      	ldrh	r3, [r3, #8]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	4b74      	ldr	r3, [pc, #464]	; (8010efc <tcp_receive+0xbe0>)
 8010d2c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d2e:	4b73      	ldr	r3, [pc, #460]	; (8010efc <tcp_receive+0xbe0>)
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	4b72      	ldr	r3, [pc, #456]	; (8010efc <tcp_receive+0xbe0>)
 8010d34:	891b      	ldrh	r3, [r3, #8]
 8010d36:	4619      	mov	r1, r3
 8010d38:	4610      	mov	r0, r2
 8010d3a:	f7fc f941 	bl	800cfc0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d3e:	4b6f      	ldr	r3, [pc, #444]	; (8010efc <tcp_receive+0xbe0>)
 8010d40:	891c      	ldrh	r4, [r3, #8]
 8010d42:	4b6e      	ldr	r3, [pc, #440]	; (8010efc <tcp_receive+0xbe0>)
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	899b      	ldrh	r3, [r3, #12]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fb f912 	bl	800bf74 <lwip_htons>
 8010d50:	4603      	mov	r3, r0
 8010d52:	f003 0303 	and.w	r3, r3, #3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <tcp_receive+0xa42>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e000      	b.n	8010d60 <tcp_receive+0xa44>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	4423      	add	r3, r4
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	4b63      	ldr	r3, [pc, #396]	; (8010ef4 <tcp_receive+0xbd8>)
 8010d66:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010d68:	4b62      	ldr	r3, [pc, #392]	; (8010ef4 <tcp_receive+0xbd8>)
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	4b62      	ldr	r3, [pc, #392]	; (8010ef8 <tcp_receive+0xbdc>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	441a      	add	r2, r3
 8010d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d006      	beq.n	8010d8c <tcp_receive+0xa70>
 8010d7e:	4b60      	ldr	r3, [pc, #384]	; (8010f00 <tcp_receive+0xbe4>)
 8010d80:	f240 52af 	movw	r2, #1455	; 0x5af
 8010d84:	495f      	ldr	r1, [pc, #380]	; (8010f04 <tcp_receive+0xbe8>)
 8010d86:	4860      	ldr	r0, [pc, #384]	; (8010f08 <tcp_receive+0xbec>)
 8010d88:	f004 ff6e 	bl	8015c68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d90:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010d92:	4b58      	ldr	r3, [pc, #352]	; (8010ef4 <tcp_receive+0xbd8>)
 8010d94:	881b      	ldrh	r3, [r3, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	4b57      	ldr	r3, [pc, #348]	; (8010ef8 <tcp_receive+0xbdc>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	441a      	add	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010da6:	4b53      	ldr	r3, [pc, #332]	; (8010ef4 <tcp_receive+0xbd8>)
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d206      	bcs.n	8010dbc <tcp_receive+0xaa0>
 8010dae:	4b54      	ldr	r3, [pc, #336]	; (8010f00 <tcp_receive+0xbe4>)
 8010db0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010db4:	4955      	ldr	r1, [pc, #340]	; (8010f0c <tcp_receive+0xbf0>)
 8010db6:	4854      	ldr	r0, [pc, #336]	; (8010f08 <tcp_receive+0xbec>)
 8010db8:	f004 ff56 	bl	8015c68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010dc0:	4b4c      	ldr	r3, [pc, #304]	; (8010ef4 <tcp_receive+0xbd8>)
 8010dc2:	881b      	ldrh	r3, [r3, #0]
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7fd f8f7 	bl	800dfc0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010dd2:	4b4a      	ldr	r3, [pc, #296]	; (8010efc <tcp_receive+0xbe0>)
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	891b      	ldrh	r3, [r3, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d006      	beq.n	8010dea <tcp_receive+0xace>
          recv_data = inseg.p;
 8010ddc:	4b47      	ldr	r3, [pc, #284]	; (8010efc <tcp_receive+0xbe0>)
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	4a4b      	ldr	r2, [pc, #300]	; (8010f10 <tcp_receive+0xbf4>)
 8010de2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010de4:	4b45      	ldr	r3, [pc, #276]	; (8010efc <tcp_receive+0xbe0>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010dea:	4b44      	ldr	r3, [pc, #272]	; (8010efc <tcp_receive+0xbe0>)
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	899b      	ldrh	r3, [r3, #12]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fb f8be 	bl	800bf74 <lwip_htons>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	f003 0301 	and.w	r3, r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f000 80b4 	beq.w	8010f6c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010e04:	4b43      	ldr	r3, [pc, #268]	; (8010f14 <tcp_receive+0xbf8>)
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	f043 0320 	orr.w	r3, r3, #32
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b41      	ldr	r3, [pc, #260]	; (8010f14 <tcp_receive+0xbf8>)
 8010e10:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010e12:	e0ab      	b.n	8010f6c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e18:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	4a35      	ldr	r2, [pc, #212]	; (8010ef8 <tcp_receive+0xbdc>)
 8010e24:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	891b      	ldrh	r3, [r3, #8]
 8010e2a:	461c      	mov	r4, r3
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	899b      	ldrh	r3, [r3, #12]
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fb f89d 	bl	800bf74 <lwip_htons>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	f003 0303 	and.w	r3, r3, #3
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d001      	beq.n	8010e48 <tcp_receive+0xb2c>
 8010e44:	2301      	movs	r3, #1
 8010e46:	e000      	b.n	8010e4a <tcp_receive+0xb2e>
 8010e48:	2300      	movs	r3, #0
 8010e4a:	191a      	adds	r2, r3, r4
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e50:	441a      	add	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e5a:	461c      	mov	r4, r3
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	891b      	ldrh	r3, [r3, #8]
 8010e60:	461d      	mov	r5, r3
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	899b      	ldrh	r3, [r3, #12]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fb f882 	bl	800bf74 <lwip_htons>
 8010e70:	4603      	mov	r3, r0
 8010e72:	f003 0303 	and.w	r3, r3, #3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <tcp_receive+0xb62>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e000      	b.n	8010e80 <tcp_receive+0xb64>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	442b      	add	r3, r5
 8010e82:	429c      	cmp	r4, r3
 8010e84:	d206      	bcs.n	8010e94 <tcp_receive+0xb78>
 8010e86:	4b1e      	ldr	r3, [pc, #120]	; (8010f00 <tcp_receive+0xbe4>)
 8010e88:	f240 52de 	movw	r2, #1502	; 0x5de
 8010e8c:	4922      	ldr	r1, [pc, #136]	; (8010f18 <tcp_receive+0xbfc>)
 8010e8e:	481e      	ldr	r0, [pc, #120]	; (8010f08 <tcp_receive+0xbec>)
 8010e90:	f004 feea 	bl	8015c68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	891b      	ldrh	r3, [r3, #8]
 8010e98:	461c      	mov	r4, r3
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	899b      	ldrh	r3, [r3, #12]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fb f866 	bl	800bf74 <lwip_htons>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	f003 0303 	and.w	r3, r3, #3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <tcp_receive+0xb9a>
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e000      	b.n	8010eb8 <tcp_receive+0xb9c>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	1919      	adds	r1, r3, r4
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ebe:	b28b      	uxth	r3, r1
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7fd f879 	bl	800dfc0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	891b      	ldrh	r3, [r3, #8]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d028      	beq.n	8010f2a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010ed8:	4b0d      	ldr	r3, [pc, #52]	; (8010f10 <tcp_receive+0xbf4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d01d      	beq.n	8010f1c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8010ee0:	4b0b      	ldr	r3, [pc, #44]	; (8010f10 <tcp_receive+0xbf4>)
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4610      	mov	r0, r2
 8010eec:	f7fc fab6 	bl	800d45c <pbuf_cat>
 8010ef0:	e018      	b.n	8010f24 <tcp_receive+0xc08>
 8010ef2:	bf00      	nop
 8010ef4:	2000424a 	.word	0x2000424a
 8010ef8:	20004240 	.word	0x20004240
 8010efc:	20004220 	.word	0x20004220
 8010f00:	0801897c 	.word	0x0801897c
 8010f04:	08018c80 	.word	0x08018c80
 8010f08:	080189c0 	.word	0x080189c0
 8010f0c:	08018cbc 	.word	0x08018cbc
 8010f10:	20004250 	.word	0x20004250
 8010f14:	2000424d 	.word	0x2000424d
 8010f18:	08018cdc 	.word	0x08018cdc
            } else {
              recv_data = cseg->p;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	4a71      	ldr	r2, [pc, #452]	; (80110e8 <tcp_receive+0xdcc>)
 8010f22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2200      	movs	r2, #0
 8010f28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	899b      	ldrh	r3, [r3, #12]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7fb f81e 	bl	800bf74 <lwip_htons>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	f003 0301 	and.w	r3, r3, #1
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d00d      	beq.n	8010f5e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010f42:	4b6a      	ldr	r3, [pc, #424]	; (80110ec <tcp_receive+0xdd0>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	f043 0320 	orr.w	r3, r3, #32
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	4b67      	ldr	r3, [pc, #412]	; (80110ec <tcp_receive+0xdd0>)
 8010f4e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	7d1b      	ldrb	r3, [r3, #20]
 8010f54:	2b04      	cmp	r3, #4
 8010f56:	d102      	bne.n	8010f5e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2207      	movs	r2, #7
 8010f5c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f7fd fcb7 	bl	800e8da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d008      	beq.n	8010f86 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010f80:	429a      	cmp	r2, r3
 8010f82:	f43f af47 	beq.w	8010e14 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	7e9b      	ldrb	r3, [r3, #26]
 8010f8a:	f003 0301 	and.w	r3, r3, #1
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d00e      	beq.n	8010fb0 <tcp_receive+0xc94>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	7e9b      	ldrb	r3, [r3, #26]
 8010f96:	f023 0301 	bic.w	r3, r3, #1
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	769a      	strb	r2, [r3, #26]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	7e9b      	ldrb	r3, [r3, #26]
 8010fa4:	f043 0302 	orr.w	r3, r3, #2
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010fae:	e181      	b.n	80112b4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	7e9b      	ldrb	r3, [r3, #26]
 8010fb4:	f043 0301 	orr.w	r3, r3, #1
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010fbe:	e179      	b.n	80112b4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f001 f8c5 	bl	8012150 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010fce:	4848      	ldr	r0, [pc, #288]	; (80110f0 <tcp_receive+0xdd4>)
 8010fd0:	f7fd fc9b 	bl	800e90a <tcp_seg_copy>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8010fda:	e16b      	b.n	80112b4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fe6:	e150      	b.n	801128a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8010fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	685a      	ldr	r2, [r3, #4]
 8010fee:	4b41      	ldr	r3, [pc, #260]	; (80110f4 <tcp_receive+0xdd8>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d11d      	bne.n	8011032 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010ff6:	4b3e      	ldr	r3, [pc, #248]	; (80110f0 <tcp_receive+0xdd4>)
 8010ff8:	891a      	ldrh	r2, [r3, #8]
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	891b      	ldrh	r3, [r3, #8]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	f240 8148 	bls.w	8011294 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8011004:	483a      	ldr	r0, [pc, #232]	; (80110f0 <tcp_receive+0xdd4>)
 8011006:	f7fd fc80 	bl	800e90a <tcp_seg_copy>
 801100a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	f000 8142 	beq.w	8011298 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8011014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011016:	2b00      	cmp	r3, #0
 8011018:	d003      	beq.n	8011022 <tcp_receive+0xd06>
                    prev->next = cseg;
 801101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	601a      	str	r2, [r3, #0]
 8011020:	e002      	b.n	8011028 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f7ff f900 	bl	8010230 <tcp_oos_insert_segment>
                }
                break;
 8011030:	e132      	b.n	8011298 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011034:	2b00      	cmp	r3, #0
 8011036:	d117      	bne.n	8011068 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011038:	4b2e      	ldr	r3, [pc, #184]	; (80110f4 <tcp_receive+0xdd8>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	da57      	bge.n	80110f8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8011048:	4829      	ldr	r0, [pc, #164]	; (80110f0 <tcp_receive+0xdd4>)
 801104a:	f7fd fc5e 	bl	800e90a <tcp_seg_copy>
 801104e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 8122 	beq.w	801129c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801105e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f7ff f8e5 	bl	8010230 <tcp_oos_insert_segment>
                  }
                  break;
 8011066:	e119      	b.n	801129c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011068:	4b22      	ldr	r3, [pc, #136]	; (80110f4 <tcp_receive+0xdd8>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	3b01      	subs	r3, #1
 8011076:	2b00      	cmp	r3, #0
 8011078:	db3e      	blt.n	80110f8 <tcp_receive+0xddc>
 801107a:	4b1e      	ldr	r3, [pc, #120]	; (80110f4 <tcp_receive+0xdd8>)
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	3301      	adds	r3, #1
 8011088:	2b00      	cmp	r3, #0
 801108a:	dc35      	bgt.n	80110f8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801108c:	4818      	ldr	r0, [pc, #96]	; (80110f0 <tcp_receive+0xdd4>)
 801108e:	f7fd fc3c 	bl	800e90a <tcp_seg_copy>
 8011092:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2b00      	cmp	r3, #0
 8011098:	f000 8102 	beq.w	80112a0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110a4:	8912      	ldrh	r2, [r2, #8]
 80110a6:	441a      	add	r2, r3
 80110a8:	4b12      	ldr	r3, [pc, #72]	; (80110f4 <tcp_receive+0xdd8>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	1ad3      	subs	r3, r2, r3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	dd12      	ble.n	80110d8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80110b2:	4b10      	ldr	r3, [pc, #64]	; (80110f4 <tcp_receive+0xdd8>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	b29b      	uxth	r3, r3
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ce:	891b      	ldrh	r3, [r3, #8]
 80110d0:	4619      	mov	r1, r3
 80110d2:	4610      	mov	r0, r2
 80110d4:	f7fb ff74 	bl	800cfc0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80110d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80110de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7ff f8a5 	bl	8010230 <tcp_oos_insert_segment>
                  }
                  break;
 80110e6:	e0db      	b.n	80112a0 <tcp_receive+0xf84>
 80110e8:	20004250 	.word	0x20004250
 80110ec:	2000424d 	.word	0x2000424d
 80110f0:	20004220 	.word	0x20004220
 80110f4:	20004240 	.word	0x20004240
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80110f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f040 80bf 	bne.w	8011280 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011102:	4b7c      	ldr	r3, [pc, #496]	; (80112f4 <tcp_receive+0xfd8>)
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801110e:	2b00      	cmp	r3, #0
 8011110:	f340 80b6 	ble.w	8011280 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	899b      	ldrh	r3, [r3, #12]
 801111a:	b29b      	uxth	r3, r3
 801111c:	4618      	mov	r0, r3
 801111e:	f7fa ff29 	bl	800bf74 <lwip_htons>
 8011122:	4603      	mov	r3, r0
 8011124:	f003 0301 	and.w	r3, r3, #1
 8011128:	2b00      	cmp	r3, #0
 801112a:	f040 80bb 	bne.w	80112a4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801112e:	4872      	ldr	r0, [pc, #456]	; (80112f8 <tcp_receive+0xfdc>)
 8011130:	f7fd fbeb 	bl	800e90a <tcp_seg_copy>
 8011134:	4602      	mov	r2, r0
 8011136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011138:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	f000 80b2 	beq.w	80112a8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801114c:	8912      	ldrh	r2, [r2, #8]
 801114e:	441a      	add	r2, r3
 8011150:	4b68      	ldr	r3, [pc, #416]	; (80112f4 <tcp_receive+0xfd8>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	1ad3      	subs	r3, r2, r3
 8011156:	2b00      	cmp	r3, #0
 8011158:	dd12      	ble.n	8011180 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801115a:	4b66      	ldr	r3, [pc, #408]	; (80112f4 <tcp_receive+0xfd8>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	b29a      	uxth	r2, r3
 8011160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	b29b      	uxth	r3, r3
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	b29a      	uxth	r2, r3
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011172:	685a      	ldr	r2, [r3, #4]
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	891b      	ldrh	r3, [r3, #8]
 8011178:	4619      	mov	r1, r3
 801117a:	4610      	mov	r0, r2
 801117c:	f7fb ff20 	bl	800cfc0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011180:	4b5e      	ldr	r3, [pc, #376]	; (80112fc <tcp_receive+0xfe0>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	4b5b      	ldr	r3, [pc, #364]	; (80112f4 <tcp_receive+0xfd8>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	441a      	add	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011190:	6879      	ldr	r1, [r7, #4]
 8011192:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011194:	440b      	add	r3, r1
 8011196:	1ad3      	subs	r3, r2, r3
 8011198:	2b00      	cmp	r3, #0
 801119a:	f340 8085 	ble.w	80112a8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	899b      	ldrh	r3, [r3, #12]
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fa fee3 	bl	800bf74 <lwip_htons>
 80111ae:	4603      	mov	r3, r0
 80111b0:	f003 0301 	and.w	r3, r3, #1
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d01e      	beq.n	80111f6 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	899b      	ldrh	r3, [r3, #12]
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111c6:	b29c      	uxth	r4, r3
 80111c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fa fece 	bl	800bf74 <lwip_htons>
 80111d8:	4603      	mov	r3, r0
 80111da:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111de:	b29b      	uxth	r3, r3
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7fa fec7 	bl	800bf74 <lwip_htons>
 80111e6:	4603      	mov	r3, r0
 80111e8:	461a      	mov	r2, r3
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	4322      	orrs	r2, r4
 80111f2:	b292      	uxth	r2, r2
 80111f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011200:	4413      	add	r3, r2
 8011202:	b299      	uxth	r1, r3
 8011204:	4b3b      	ldr	r3, [pc, #236]	; (80112f4 <tcp_receive+0xfd8>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	b29a      	uxth	r2, r3
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	1a8a      	subs	r2, r1, r2
 8011210:	b292      	uxth	r2, r2
 8011212:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	685a      	ldr	r2, [r3, #4]
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	891b      	ldrh	r3, [r3, #8]
 8011220:	4619      	mov	r1, r3
 8011222:	4610      	mov	r0, r2
 8011224:	f7fb fecc 	bl	800cfc0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	891c      	ldrh	r4, [r3, #8]
 801122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	899b      	ldrh	r3, [r3, #12]
 8011236:	b29b      	uxth	r3, r3
 8011238:	4618      	mov	r0, r3
 801123a:	f7fa fe9b 	bl	800bf74 <lwip_htons>
 801123e:	4603      	mov	r3, r0
 8011240:	f003 0303 	and.w	r3, r3, #3
 8011244:	2b00      	cmp	r3, #0
 8011246:	d001      	beq.n	801124c <tcp_receive+0xf30>
 8011248:	2301      	movs	r3, #1
 801124a:	e000      	b.n	801124e <tcp_receive+0xf32>
 801124c:	2300      	movs	r3, #0
 801124e:	4423      	add	r3, r4
 8011250:	b29a      	uxth	r2, r3
 8011252:	4b2a      	ldr	r3, [pc, #168]	; (80112fc <tcp_receive+0xfe0>)
 8011254:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011256:	4b29      	ldr	r3, [pc, #164]	; (80112fc <tcp_receive+0xfe0>)
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	4b25      	ldr	r3, [pc, #148]	; (80112f4 <tcp_receive+0xfd8>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	441a      	add	r2, r3
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011266:	6879      	ldr	r1, [r7, #4]
 8011268:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801126a:	440b      	add	r3, r1
 801126c:	429a      	cmp	r2, r3
 801126e:	d01b      	beq.n	80112a8 <tcp_receive+0xf8c>
 8011270:	4b23      	ldr	r3, [pc, #140]	; (8011300 <tcp_receive+0xfe4>)
 8011272:	f240 627b 	movw	r2, #1659	; 0x67b
 8011276:	4923      	ldr	r1, [pc, #140]	; (8011304 <tcp_receive+0xfe8>)
 8011278:	4823      	ldr	r0, [pc, #140]	; (8011308 <tcp_receive+0xfec>)
 801127a:	f004 fcf5 	bl	8015c68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801127e:	e013      	b.n	80112a8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	62fb      	str	r3, [r7, #44]	; 0x2c
 801128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128c:	2b00      	cmp	r3, #0
 801128e:	f47f aeab 	bne.w	8010fe8 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8011292:	e00f      	b.n	80112b4 <tcp_receive+0xf98>
                break;
 8011294:	bf00      	nop
 8011296:	e00d      	b.n	80112b4 <tcp_receive+0xf98>
                break;
 8011298:	bf00      	nop
 801129a:	e00b      	b.n	80112b4 <tcp_receive+0xf98>
                  break;
 801129c:	bf00      	nop
 801129e:	e009      	b.n	80112b4 <tcp_receive+0xf98>
                  break;
 80112a0:	bf00      	nop
 80112a2:	e007      	b.n	80112b4 <tcp_receive+0xf98>
                  break;
 80112a4:	bf00      	nop
 80112a6:	e005      	b.n	80112b4 <tcp_receive+0xf98>
                break;
 80112a8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80112aa:	e003      	b.n	80112b4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 ff4f 	bl	8012150 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80112b2:	e01a      	b.n	80112ea <tcp_receive+0xfce>
 80112b4:	e019      	b.n	80112ea <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80112b6:	4b0f      	ldr	r3, [pc, #60]	; (80112f4 <tcp_receive+0xfd8>)
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112be:	1ad3      	subs	r3, r2, r3
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	db0a      	blt.n	80112da <tcp_receive+0xfbe>
 80112c4:	4b0b      	ldr	r3, [pc, #44]	; (80112f4 <tcp_receive+0xfd8>)
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112cc:	6879      	ldr	r1, [r7, #4]
 80112ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112d0:	440b      	add	r3, r1
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	3301      	adds	r3, #1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	dd07      	ble.n	80112ea <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	7e9b      	ldrb	r3, [r3, #26]
 80112de:	f043 0302 	orr.w	r3, r3, #2
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80112e8:	e7ff      	b.n	80112ea <tcp_receive+0xfce>
 80112ea:	bf00      	nop
 80112ec:	3734      	adds	r7, #52	; 0x34
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112f2:	bf00      	nop
 80112f4:	20004240 	.word	0x20004240
 80112f8:	20004220 	.word	0x20004220
 80112fc:	2000424a 	.word	0x2000424a
 8011300:	0801897c 	.word	0x0801897c
 8011304:	08018c48 	.word	0x08018c48
 8011308:	080189c0 	.word	0x080189c0

0801130c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8011312:	4b18      	ldr	r3, [pc, #96]	; (8011374 <tcp_getoptbyte+0x68>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d005      	beq.n	8011326 <tcp_getoptbyte+0x1a>
 801131a:	4b17      	ldr	r3, [pc, #92]	; (8011378 <tcp_getoptbyte+0x6c>)
 801131c:	881a      	ldrh	r2, [r3, #0]
 801131e:	4b17      	ldr	r3, [pc, #92]	; (801137c <tcp_getoptbyte+0x70>)
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	429a      	cmp	r2, r3
 8011324:	d20e      	bcs.n	8011344 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011326:	4b16      	ldr	r3, [pc, #88]	; (8011380 <tcp_getoptbyte+0x74>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	3314      	adds	r3, #20
 801132c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801132e:	4b12      	ldr	r3, [pc, #72]	; (8011378 <tcp_getoptbyte+0x6c>)
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	1c5a      	adds	r2, r3, #1
 8011334:	b291      	uxth	r1, r2
 8011336:	4a10      	ldr	r2, [pc, #64]	; (8011378 <tcp_getoptbyte+0x6c>)
 8011338:	8011      	strh	r1, [r2, #0]
 801133a:	461a      	mov	r2, r3
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	4413      	add	r3, r2
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	e010      	b.n	8011366 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8011344:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <tcp_getoptbyte+0x6c>)
 8011346:	881b      	ldrh	r3, [r3, #0]
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	b291      	uxth	r1, r2
 801134c:	4a0a      	ldr	r2, [pc, #40]	; (8011378 <tcp_getoptbyte+0x6c>)
 801134e:	8011      	strh	r1, [r2, #0]
 8011350:	b2da      	uxtb	r2, r3
 8011352:	4b0a      	ldr	r3, [pc, #40]	; (801137c <tcp_getoptbyte+0x70>)
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	b2db      	uxtb	r3, r3
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801135c:	4b05      	ldr	r3, [pc, #20]	; (8011374 <tcp_getoptbyte+0x68>)
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	79fb      	ldrb	r3, [r7, #7]
 8011362:	4413      	add	r3, r2
 8011364:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011366:	4618      	mov	r0, r3
 8011368:	370c      	adds	r7, #12
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	20004238 	.word	0x20004238
 8011378:	2000423c 	.word	0x2000423c
 801137c:	20004236 	.word	0x20004236
 8011380:	20004230 	.word	0x20004230

08011384 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801138c:	4b2d      	ldr	r3, [pc, #180]	; (8011444 <tcp_parseopt+0xc0>)
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d053      	beq.n	801143c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011394:	4b2c      	ldr	r3, [pc, #176]	; (8011448 <tcp_parseopt+0xc4>)
 8011396:	2200      	movs	r2, #0
 8011398:	801a      	strh	r2, [r3, #0]
 801139a:	e043      	b.n	8011424 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 801139c:	f7ff ffb6 	bl	801130c <tcp_getoptbyte>
 80113a0:	4603      	mov	r3, r0
 80113a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d03c      	beq.n	8011424 <tcp_parseopt+0xa0>
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	d002      	beq.n	80113b4 <tcp_parseopt+0x30>
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d03f      	beq.n	8011432 <tcp_parseopt+0xae>
 80113b2:	e026      	b.n	8011402 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80113b4:	f7ff ffaa 	bl	801130c <tcp_getoptbyte>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b04      	cmp	r3, #4
 80113bc:	d13b      	bne.n	8011436 <tcp_parseopt+0xb2>
 80113be:	4b22      	ldr	r3, [pc, #136]	; (8011448 <tcp_parseopt+0xc4>)
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	3302      	adds	r3, #2
 80113c4:	4a1f      	ldr	r2, [pc, #124]	; (8011444 <tcp_parseopt+0xc0>)
 80113c6:	8812      	ldrh	r2, [r2, #0]
 80113c8:	4293      	cmp	r3, r2
 80113ca:	dc34      	bgt.n	8011436 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80113cc:	f7ff ff9e 	bl	801130c <tcp_getoptbyte>
 80113d0:	4603      	mov	r3, r0
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	021b      	lsls	r3, r3, #8
 80113d6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80113d8:	f7ff ff98 	bl	801130c <tcp_getoptbyte>
 80113dc:	4603      	mov	r3, r0
 80113de:	b29a      	uxth	r2, r3
 80113e0:	89bb      	ldrh	r3, [r7, #12]
 80113e2:	4313      	orrs	r3, r2
 80113e4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80113e6:	89bb      	ldrh	r3, [r7, #12]
 80113e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80113ec:	d804      	bhi.n	80113f8 <tcp_parseopt+0x74>
 80113ee:	89bb      	ldrh	r3, [r7, #12]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d001      	beq.n	80113f8 <tcp_parseopt+0x74>
 80113f4:	89ba      	ldrh	r2, [r7, #12]
 80113f6:	e001      	b.n	80113fc <tcp_parseopt+0x78>
 80113f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8011400:	e010      	b.n	8011424 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8011402:	f7ff ff83 	bl	801130c <tcp_getoptbyte>
 8011406:	4603      	mov	r3, r0
 8011408:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801140a:	7afb      	ldrb	r3, [r7, #11]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d914      	bls.n	801143a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8011410:	7afb      	ldrb	r3, [r7, #11]
 8011412:	b29a      	uxth	r2, r3
 8011414:	4b0c      	ldr	r3, [pc, #48]	; (8011448 <tcp_parseopt+0xc4>)
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	4413      	add	r3, r2
 801141a:	b29b      	uxth	r3, r3
 801141c:	3b02      	subs	r3, #2
 801141e:	b29a      	uxth	r2, r3
 8011420:	4b09      	ldr	r3, [pc, #36]	; (8011448 <tcp_parseopt+0xc4>)
 8011422:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011424:	4b08      	ldr	r3, [pc, #32]	; (8011448 <tcp_parseopt+0xc4>)
 8011426:	881a      	ldrh	r2, [r3, #0]
 8011428:	4b06      	ldr	r3, [pc, #24]	; (8011444 <tcp_parseopt+0xc0>)
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	429a      	cmp	r2, r3
 801142e:	d3b5      	bcc.n	801139c <tcp_parseopt+0x18>
 8011430:	e004      	b.n	801143c <tcp_parseopt+0xb8>
        return;
 8011432:	bf00      	nop
 8011434:	e002      	b.n	801143c <tcp_parseopt+0xb8>
          return;
 8011436:	bf00      	nop
 8011438:	e000      	b.n	801143c <tcp_parseopt+0xb8>
          return;
 801143a:	bf00      	nop
      }
    }
  }
}
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	20004234 	.word	0x20004234
 8011448:	2000423c 	.word	0x2000423c

0801144c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801144c:	b480      	push	{r7}
 801144e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011450:	4b05      	ldr	r3, [pc, #20]	; (8011468 <tcp_trigger_input_pcb_close+0x1c>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f043 0310 	orr.w	r3, r3, #16
 8011458:	b2da      	uxtb	r2, r3
 801145a:	4b03      	ldr	r3, [pc, #12]	; (8011468 <tcp_trigger_input_pcb_close+0x1c>)
 801145c:	701a      	strb	r2, [r3, #0]
}
 801145e:	bf00      	nop
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr
 8011468:	2000424d 	.word	0x2000424d

0801146c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	607b      	str	r3, [r7, #4]
 8011476:	460b      	mov	r3, r1
 8011478:	817b      	strh	r3, [r7, #10]
 801147a:	4613      	mov	r3, r2
 801147c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801147e:	897a      	ldrh	r2, [r7, #10]
 8011480:	893b      	ldrh	r3, [r7, #8]
 8011482:	4413      	add	r3, r2
 8011484:	b29b      	uxth	r3, r3
 8011486:	3314      	adds	r3, #20
 8011488:	b29b      	uxth	r3, r3
 801148a:	2200      	movs	r2, #0
 801148c:	4619      	mov	r1, r3
 801148e:	2001      	movs	r0, #1
 8011490:	f7fb fb98 	bl	800cbc4 <pbuf_alloc>
 8011494:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d057      	beq.n	801154c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	895b      	ldrh	r3, [r3, #10]
 80114a0:	461a      	mov	r2, r3
 80114a2:	897b      	ldrh	r3, [r7, #10]
 80114a4:	3314      	adds	r3, #20
 80114a6:	429a      	cmp	r2, r3
 80114a8:	da05      	bge.n	80114b6 <tcp_output_alloc_header+0x4a>
 80114aa:	4b2b      	ldr	r3, [pc, #172]	; (8011558 <tcp_output_alloc_header+0xec>)
 80114ac:	2273      	movs	r2, #115	; 0x73
 80114ae:	492b      	ldr	r1, [pc, #172]	; (801155c <tcp_output_alloc_header+0xf0>)
 80114b0:	482b      	ldr	r0, [pc, #172]	; (8011560 <tcp_output_alloc_header+0xf4>)
 80114b2:	f004 fbd9 	bl	8015c68 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	8adb      	ldrh	r3, [r3, #22]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fa fd57 	bl	800bf74 <lwip_htons>
 80114c6:	4603      	mov	r3, r0
 80114c8:	461a      	mov	r2, r3
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	8b1b      	ldrh	r3, [r3, #24]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fa fd4e 	bl	800bf74 <lwip_htons>
 80114d8:	4603      	mov	r3, r0
 80114da:	461a      	mov	r2, r3
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fa fd50 	bl	800bf90 <lwip_htonl>
 80114f0:	4602      	mov	r2, r0
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80114f6:	897b      	ldrh	r3, [r7, #10]
 80114f8:	089b      	lsrs	r3, r3, #2
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	3305      	adds	r3, #5
 80114fe:	b29b      	uxth	r3, r3
 8011500:	031b      	lsls	r3, r3, #12
 8011502:	b29b      	uxth	r3, r3
 8011504:	f043 0310 	orr.w	r3, r3, #16
 8011508:	b29b      	uxth	r3, r3
 801150a:	4618      	mov	r0, r3
 801150c:	f7fa fd32 	bl	800bf74 <lwip_htons>
 8011510:	4603      	mov	r3, r0
 8011512:	461a      	mov	r2, r3
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801151c:	4618      	mov	r0, r3
 801151e:	f7fa fd29 	bl	800bf74 <lwip_htons>
 8011522:	4603      	mov	r3, r0
 8011524:	461a      	mov	r2, r3
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2200      	movs	r2, #0
 801152e:	741a      	strb	r2, [r3, #16]
 8011530:	2200      	movs	r2, #0
 8011532:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	2200      	movs	r2, #0
 8011538:	749a      	strb	r2, [r3, #18]
 801153a:	2200      	movs	r2, #0
 801153c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011546:	441a      	add	r2, r3
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801154c:	697b      	ldr	r3, [r7, #20]
}
 801154e:	4618      	mov	r0, r3
 8011550:	3718      	adds	r7, #24
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	08018d04 	.word	0x08018d04
 801155c:	08018d38 	.word	0x08018d38
 8011560:	08018d68 	.word	0x08018d68

08011564 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011564:	b590      	push	{r4, r7, lr}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011570:	2b00      	cmp	r3, #0
 8011572:	d02d      	beq.n	80115d0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011578:	60fb      	str	r3, [r7, #12]
 801157a:	e002      	b.n	8011582 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1f8      	bne.n	801157c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	899b      	ldrh	r3, [r3, #12]
 8011590:	b29b      	uxth	r3, r3
 8011592:	4618      	mov	r0, r3
 8011594:	f7fa fcee 	bl	800bf74 <lwip_htons>
 8011598:	4603      	mov	r3, r0
 801159a:	f003 0307 	and.w	r3, r3, #7
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d116      	bne.n	80115d0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	899b      	ldrh	r3, [r3, #12]
 80115a8:	b29c      	uxth	r4, r3
 80115aa:	2001      	movs	r0, #1
 80115ac:	f7fa fce2 	bl	800bf74 <lwip_htons>
 80115b0:	4603      	mov	r3, r0
 80115b2:	461a      	mov	r2, r3
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	4322      	orrs	r2, r4
 80115ba:	b292      	uxth	r2, r2
 80115bc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	7e9b      	ldrb	r3, [r3, #26]
 80115c2:	f043 0320 	orr.w	r3, r3, #32
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	e004      	b.n	80115da <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80115d0:	2101      	movs	r1, #1
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fcc0 	bl	8011f58 <tcp_enqueue_flags>
 80115d8:	4603      	mov	r3, r0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3714      	adds	r7, #20
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd90      	pop	{r4, r7, pc}
	...

080115e4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80115e4:	b590      	push	{r4, r7, lr}
 80115e6:	b087      	sub	sp, #28
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	603b      	str	r3, [r7, #0]
 80115f0:	4613      	mov	r3, r2
 80115f2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80115f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	f003 0304 	and.w	r3, r3, #4
 8011600:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011602:	2003      	movs	r0, #3
 8011604:	f7fb f8a4 	bl	800c750 <memp_malloc>
 8011608:	6138      	str	r0, [r7, #16]
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d104      	bne.n	801161a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011610:	68b8      	ldr	r0, [r7, #8]
 8011612:	f7fb fe49 	bl	800d2a8 <pbuf_free>
    return NULL;
 8011616:	2300      	movs	r3, #0
 8011618:	e061      	b.n	80116de <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011620:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	2200      	movs	r2, #0
 8011626:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	891a      	ldrh	r2, [r3, #8]
 8011632:	7dfb      	ldrb	r3, [r7, #23]
 8011634:	b29b      	uxth	r3, r3
 8011636:	429a      	cmp	r2, r3
 8011638:	d205      	bcs.n	8011646 <tcp_create_segment+0x62>
 801163a:	4b2b      	ldr	r3, [pc, #172]	; (80116e8 <tcp_create_segment+0x104>)
 801163c:	22ba      	movs	r2, #186	; 0xba
 801163e:	492b      	ldr	r1, [pc, #172]	; (80116ec <tcp_create_segment+0x108>)
 8011640:	482b      	ldr	r0, [pc, #172]	; (80116f0 <tcp_create_segment+0x10c>)
 8011642:	f004 fb11 	bl	8015c68 <iprintf>
  seg->len = p->tot_len - optlen;
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	891a      	ldrh	r2, [r3, #8]
 801164a:	7dfb      	ldrb	r3, [r7, #23]
 801164c:	b29b      	uxth	r3, r3
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	b29a      	uxth	r2, r3
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011656:	2114      	movs	r1, #20
 8011658:	68b8      	ldr	r0, [r7, #8]
 801165a:	f7fb fe01 	bl	800d260 <pbuf_header>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d004      	beq.n	801166e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011664:	6938      	ldr	r0, [r7, #16]
 8011666:	f7fd f938 	bl	800e8da <tcp_seg_free>
    return NULL;
 801166a:	2300      	movs	r3, #0
 801166c:	e037      	b.n	80116de <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	685a      	ldr	r2, [r3, #4]
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	8ada      	ldrh	r2, [r3, #22]
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	68dc      	ldr	r4, [r3, #12]
 8011680:	4610      	mov	r0, r2
 8011682:	f7fa fc77 	bl	800bf74 <lwip_htons>
 8011686:	4603      	mov	r3, r0
 8011688:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	8b1a      	ldrh	r2, [r3, #24]
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	68dc      	ldr	r4, [r3, #12]
 8011692:	4610      	mov	r0, r2
 8011694:	f7fa fc6e 	bl	800bf74 <lwip_htons>
 8011698:	4603      	mov	r3, r0
 801169a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	68dc      	ldr	r4, [r3, #12]
 80116a0:	6838      	ldr	r0, [r7, #0]
 80116a2:	f7fa fc75 	bl	800bf90 <lwip_htonl>
 80116a6:	4603      	mov	r3, r0
 80116a8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80116aa:	7dfb      	ldrb	r3, [r7, #23]
 80116ac:	089b      	lsrs	r3, r3, #2
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	3305      	adds	r3, #5
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	031b      	lsls	r3, r3, #12
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	79fb      	ldrb	r3, [r7, #7]
 80116bc:	b29b      	uxth	r3, r3
 80116be:	4313      	orrs	r3, r2
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	68dc      	ldr	r4, [r3, #12]
 80116c6:	4610      	mov	r0, r2
 80116c8:	f7fa fc54 	bl	800bf74 <lwip_htons>
 80116cc:	4603      	mov	r3, r0
 80116ce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	2200      	movs	r2, #0
 80116d6:	749a      	strb	r2, [r3, #18]
 80116d8:	2200      	movs	r2, #0
 80116da:	74da      	strb	r2, [r3, #19]
  return seg;
 80116dc:	693b      	ldr	r3, [r7, #16]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	371c      	adds	r7, #28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd90      	pop	{r4, r7, pc}
 80116e6:	bf00      	nop
 80116e8:	08018d04 	.word	0x08018d04
 80116ec:	08018d90 	.word	0x08018d90
 80116f0:	08018d68 	.word	0x08018d68

080116f4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	607b      	str	r3, [r7, #4]
 80116fc:	4603      	mov	r3, r0
 80116fe:	73fb      	strb	r3, [r7, #15]
 8011700:	460b      	mov	r3, r1
 8011702:	81bb      	strh	r3, [r7, #12]
 8011704:	4613      	mov	r3, r2
 8011706:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011708:	89bb      	ldrh	r3, [r7, #12]
 801170a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801170c:	89ba      	ldrh	r2, [r7, #12]
 801170e:	897b      	ldrh	r3, [r7, #10]
 8011710:	429a      	cmp	r2, r3
 8011712:	d221      	bcs.n	8011758 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011714:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011718:	f003 0302 	and.w	r3, r3, #2
 801171c:	2b00      	cmp	r3, #0
 801171e:	d111      	bne.n	8011744 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8011720:	6a3b      	ldr	r3, [r7, #32]
 8011722:	7e9b      	ldrb	r3, [r3, #26]
 8011724:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011728:	2b00      	cmp	r3, #0
 801172a:	d115      	bne.n	8011758 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801172c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011730:	2b00      	cmp	r3, #0
 8011732:	d007      	beq.n	8011744 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011734:	6a3b      	ldr	r3, [r7, #32]
 8011736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8011738:	2b00      	cmp	r3, #0
 801173a:	d103      	bne.n	8011744 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801173c:	6a3b      	ldr	r3, [r7, #32]
 801173e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8011740:	2b00      	cmp	r3, #0
 8011742:	d009      	beq.n	8011758 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011744:	89bb      	ldrh	r3, [r7, #12]
 8011746:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801174a:	f023 0203 	bic.w	r2, r3, #3
 801174e:	897b      	ldrh	r3, [r7, #10]
 8011750:	4293      	cmp	r3, r2
 8011752:	bf28      	it	cs
 8011754:	4613      	movcs	r3, r2
 8011756:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011758:	8af9      	ldrh	r1, [r7, #22]
 801175a:	7bfb      	ldrb	r3, [r7, #15]
 801175c:	2200      	movs	r2, #0
 801175e:	4618      	mov	r0, r3
 8011760:	f7fb fa30 	bl	800cbc4 <pbuf_alloc>
 8011764:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801176c:	2300      	movs	r3, #0
 801176e:	e019      	b.n	80117a4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <tcp_pbuf_prealloc+0x92>
 8011778:	4b0c      	ldr	r3, [pc, #48]	; (80117ac <tcp_pbuf_prealloc+0xb8>)
 801177a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801177e:	490c      	ldr	r1, [pc, #48]	; (80117b0 <tcp_pbuf_prealloc+0xbc>)
 8011780:	480c      	ldr	r0, [pc, #48]	; (80117b4 <tcp_pbuf_prealloc+0xc0>)
 8011782:	f004 fa71 	bl	8015c68 <iprintf>
  *oversize = p->len - length;
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	895a      	ldrh	r2, [r3, #10]
 801178a:	89bb      	ldrh	r3, [r7, #12]
 801178c:	1ad3      	subs	r3, r2, r3
 801178e:	b29a      	uxth	r2, r3
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	89ba      	ldrh	r2, [r7, #12]
 8011798:	811a      	strh	r2, [r3, #8]
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	891a      	ldrh	r2, [r3, #8]
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	815a      	strh	r2, [r3, #10]
  return p;
 80117a2:	693b      	ldr	r3, [r7, #16]
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3718      	adds	r7, #24
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	08018d04 	.word	0x08018d04
 80117b0:	08018da8 	.word	0x08018da8
 80117b4:	08018d68 	.word	0x08018d68

080117b8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	460b      	mov	r3, r1
 80117c2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	7d1b      	ldrb	r3, [r3, #20]
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	d00e      	beq.n	80117ea <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80117d0:	2b07      	cmp	r3, #7
 80117d2:	d00a      	beq.n	80117ea <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80117d8:	2b02      	cmp	r3, #2
 80117da:	d006      	beq.n	80117ea <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80117e0:	2b03      	cmp	r3, #3
 80117e2:	d002      	beq.n	80117ea <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80117e4:	f06f 030a 	mvn.w	r3, #10
 80117e8:	e04f      	b.n	801188a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80117ea:	887b      	ldrh	r3, [r7, #2]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d101      	bne.n	80117f4 <tcp_write_checks+0x3c>
    return ERR_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	e04a      	b.n	801188a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117fa:	887a      	ldrh	r2, [r7, #2]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d909      	bls.n	8011814 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	7e9b      	ldrb	r3, [r3, #26]
 8011804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011808:	b2da      	uxtb	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801180e:	f04f 33ff 	mov.w	r3, #4294967295
 8011812:	e03a      	b.n	801188a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801181a:	2b08      	cmp	r3, #8
 801181c:	d806      	bhi.n	801182c <tcp_write_checks+0x74>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011824:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011828:	4293      	cmp	r3, r2
 801182a:	d909      	bls.n	8011840 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	7e9b      	ldrb	r3, [r3, #26]
 8011830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011834:	b2da      	uxtb	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801183a:	f04f 33ff 	mov.w	r3, #4294967295
 801183e:	e024      	b.n	801188a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00f      	beq.n	801186a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801184e:	2b00      	cmp	r3, #0
 8011850:	d11a      	bne.n	8011888 <tcp_write_checks+0xd0>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011856:	2b00      	cmp	r3, #0
 8011858:	d116      	bne.n	8011888 <tcp_write_checks+0xd0>
 801185a:	4b0e      	ldr	r3, [pc, #56]	; (8011894 <tcp_write_checks+0xdc>)
 801185c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011860:	490d      	ldr	r1, [pc, #52]	; (8011898 <tcp_write_checks+0xe0>)
 8011862:	480e      	ldr	r0, [pc, #56]	; (801189c <tcp_write_checks+0xe4>)
 8011864:	f004 fa00 	bl	8015c68 <iprintf>
 8011868:	e00e      	b.n	8011888 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d103      	bne.n	801187a <tcp_write_checks+0xc2>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011876:	2b00      	cmp	r3, #0
 8011878:	d006      	beq.n	8011888 <tcp_write_checks+0xd0>
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <tcp_write_checks+0xdc>)
 801187c:	f240 1259 	movw	r2, #345	; 0x159
 8011880:	4907      	ldr	r1, [pc, #28]	; (80118a0 <tcp_write_checks+0xe8>)
 8011882:	4806      	ldr	r0, [pc, #24]	; (801189c <tcp_write_checks+0xe4>)
 8011884:	f004 f9f0 	bl	8015c68 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	08018d04 	.word	0x08018d04
 8011898:	08018dbc 	.word	0x08018dbc
 801189c:	08018d68 	.word	0x08018d68
 80118a0:	08018df8 	.word	0x08018df8

080118a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80118a4:	b590      	push	{r4, r7, lr}
 80118a6:	b09b      	sub	sp, #108	; 0x6c
 80118a8:	af04      	add	r7, sp, #16
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	4611      	mov	r1, r2
 80118b0:	461a      	mov	r2, r3
 80118b2:	460b      	mov	r3, r1
 80118b4:	80fb      	strh	r3, [r7, #6]
 80118b6:	4613      	mov	r3, r2
 80118b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80118ba:	2300      	movs	r3, #0
 80118bc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80118be:	2300      	movs	r3, #0
 80118c0:	653b      	str	r3, [r7, #80]	; 0x50
 80118c2:	2300      	movs	r3, #0
 80118c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118c6:	2300      	movs	r3, #0
 80118c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80118ca:	2300      	movs	r3, #0
 80118cc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80118ce:	2300      	movs	r3, #0
 80118d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80118d4:	2300      	movs	r3, #0
 80118d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80118da:	2300      	movs	r3, #0
 80118dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80118e0:	2300      	movs	r3, #0
 80118e2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80118e4:	2300      	movs	r3, #0
 80118e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118f2:	085b      	lsrs	r3, r3, #1
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118fa:	4293      	cmp	r3, r2
 80118fc:	bf28      	it	cs
 80118fe:	4613      	movcs	r3, r2
 8011900:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011904:	2b00      	cmp	r3, #0
 8011906:	d102      	bne.n	801190e <tcp_write+0x6a>
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801190c:	e000      	b.n	8011910 <tcp_write+0x6c>
 801190e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011910:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d109      	bne.n	801192c <tcp_write+0x88>
 8011918:	4b92      	ldr	r3, [pc, #584]	; (8011b64 <tcp_write+0x2c0>)
 801191a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801191e:	4992      	ldr	r1, [pc, #584]	; (8011b68 <tcp_write+0x2c4>)
 8011920:	4892      	ldr	r0, [pc, #584]	; (8011b6c <tcp_write+0x2c8>)
 8011922:	f004 f9a1 	bl	8015c68 <iprintf>
 8011926:	f06f 030f 	mvn.w	r3, #15
 801192a:	e30a      	b.n	8011f42 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801192c:	88fb      	ldrh	r3, [r7, #6]
 801192e:	4619      	mov	r1, r3
 8011930:	68f8      	ldr	r0, [r7, #12]
 8011932:	f7ff ff41 	bl	80117b8 <tcp_write_checks>
 8011936:	4603      	mov	r3, r0
 8011938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801193c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <tcp_write+0xa6>
    return err;
 8011944:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011948:	e2fb      	b.n	8011f42 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011950:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011958:	2b00      	cmp	r3, #0
 801195a:	f000 80f5 	beq.w	8011b48 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011962:	653b      	str	r3, [r7, #80]	; 0x50
 8011964:	e002      	b.n	801196c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8011966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801196c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1f8      	bne.n	8011966 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8011974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011976:	7a9b      	ldrb	r3, [r3, #10]
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	b29b      	uxth	r3, r3
 801197c:	f003 0304 	and.w	r3, r3, #4
 8011980:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011986:	891b      	ldrh	r3, [r3, #8]
 8011988:	4619      	mov	r1, r3
 801198a:	8c3b      	ldrh	r3, [r7, #32]
 801198c:	440b      	add	r3, r1
 801198e:	429a      	cmp	r2, r3
 8011990:	da06      	bge.n	80119a0 <tcp_write+0xfc>
 8011992:	4b74      	ldr	r3, [pc, #464]	; (8011b64 <tcp_write+0x2c0>)
 8011994:	f240 12c7 	movw	r2, #455	; 0x1c7
 8011998:	4975      	ldr	r1, [pc, #468]	; (8011b70 <tcp_write+0x2cc>)
 801199a:	4874      	ldr	r0, [pc, #464]	; (8011b6c <tcp_write+0x2c8>)
 801199c:	f004 f964 	bl	8015c68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80119a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a2:	891a      	ldrh	r2, [r3, #8]
 80119a4:	8c3b      	ldrh	r3, [r7, #32]
 80119a6:	4413      	add	r3, r2
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80119ac:	1ad3      	subs	r3, r2, r3
 80119ae:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80119b6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80119b8:	8a7b      	ldrh	r3, [r7, #18]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d027      	beq.n	8011a0e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80119be:	8a7b      	ldrh	r3, [r7, #18]
 80119c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d206      	bcs.n	80119d4 <tcp_write+0x130>
 80119c6:	4b67      	ldr	r3, [pc, #412]	; (8011b64 <tcp_write+0x2c0>)
 80119c8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80119cc:	4969      	ldr	r1, [pc, #420]	; (8011b74 <tcp_write+0x2d0>)
 80119ce:	4867      	ldr	r0, [pc, #412]	; (8011b6c <tcp_write+0x2c8>)
 80119d0:	f004 f94a 	bl	8015c68 <iprintf>
      seg = last_unsent;
 80119d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80119d8:	8a7b      	ldrh	r3, [r7, #18]
 80119da:	88fa      	ldrh	r2, [r7, #6]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d901      	bls.n	80119e4 <tcp_write+0x140>
 80119e0:	8a7b      	ldrh	r3, [r7, #18]
 80119e2:	e000      	b.n	80119e6 <tcp_write+0x142>
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80119e8:	4293      	cmp	r3, r2
 80119ea:	bfa8      	it	ge
 80119ec:	4613      	movge	r3, r2
 80119ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80119f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119f6:	4413      	add	r3, r2
 80119f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80119fc:	8a7a      	ldrh	r2, [r7, #18]
 80119fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011a06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011a0e:	8a7b      	ldrh	r3, [r7, #18]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00b      	beq.n	8011a2c <tcp_write+0x188>
 8011a14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a18:	88fb      	ldrh	r3, [r7, #6]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d006      	beq.n	8011a2c <tcp_write+0x188>
 8011a1e:	4b51      	ldr	r3, [pc, #324]	; (8011b64 <tcp_write+0x2c0>)
 8011a20:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011a24:	4954      	ldr	r1, [pc, #336]	; (8011b78 <tcp_write+0x2d4>)
 8011a26:	4851      	ldr	r0, [pc, #324]	; (8011b6c <tcp_write+0x2c8>)
 8011a28:	f004 f91e 	bl	8015c68 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011a2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a30:	88fb      	ldrh	r3, [r7, #6]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	f080 8168 	bcs.w	8011d08 <tcp_write+0x464>
 8011a38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	f000 8164 	beq.w	8011d08 <tcp_write+0x464>
 8011a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a42:	891b      	ldrh	r3, [r3, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	f000 815f 	beq.w	8011d08 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011a4a:	88fa      	ldrh	r2, [r7, #6]
 8011a4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a50:	1ad2      	subs	r2, r2, r3
 8011a52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011a54:	4293      	cmp	r3, r2
 8011a56:	bfa8      	it	ge
 8011a58:	4613      	movge	r3, r2
 8011a5a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a5e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011a60:	797b      	ldrb	r3, [r7, #5]
 8011a62:	f003 0301 	and.w	r3, r3, #1
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d027      	beq.n	8011aba <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011a6a:	f107 0012 	add.w	r0, r7, #18
 8011a6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a70:	8bf9      	ldrh	r1, [r7, #30]
 8011a72:	2301      	movs	r3, #1
 8011a74:	9302      	str	r3, [sp, #8]
 8011a76:	797b      	ldrb	r3, [r7, #5]
 8011a78:	9301      	str	r3, [sp, #4]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2004      	movs	r0, #4
 8011a82:	f7ff fe37 	bl	80116f4 <tcp_pbuf_prealloc>
 8011a86:	6578      	str	r0, [r7, #84]	; 0x54
 8011a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f000 8227 	beq.w	8011ede <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a92:	6858      	ldr	r0, [r3, #4]
 8011a94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	8bfa      	ldrh	r2, [r7, #30]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	f004 f8cf 	bl	8015c42 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011aa4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011aa6:	f7fb fc99 	bl	800d3dc <pbuf_clen>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	461a      	mov	r2, r3
 8011aae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ab2:	4413      	add	r3, r2
 8011ab4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011ab8:	e03f      	b.n	8011b3a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	637b      	str	r3, [r7, #52]	; 0x34
 8011ac0:	e002      	b.n	8011ac8 <tcp_write+0x224>
 8011ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8011ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d1f8      	bne.n	8011ac2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad2:	7b1b      	ldrb	r3, [r3, #12]
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	d115      	bne.n	8011b04 <tcp_write+0x260>
 8011ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ade:	8952      	ldrh	r2, [r2, #10]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	68ba      	ldr	r2, [r7, #8]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d10d      	bne.n	8011b04 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d006      	beq.n	8011afe <tcp_write+0x25a>
 8011af0:	4b1c      	ldr	r3, [pc, #112]	; (8011b64 <tcp_write+0x2c0>)
 8011af2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011af6:	4921      	ldr	r1, [pc, #132]	; (8011b7c <tcp_write+0x2d8>)
 8011af8:	481c      	ldr	r0, [pc, #112]	; (8011b6c <tcp_write+0x2c8>)
 8011afa:	f004 f8b5 	bl	8015c68 <iprintf>
          extendlen = seglen;
 8011afe:	8bfb      	ldrh	r3, [r7, #30]
 8011b00:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011b02:	e01a      	b.n	8011b3a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011b04:	8bfb      	ldrh	r3, [r7, #30]
 8011b06:	2201      	movs	r2, #1
 8011b08:	4619      	mov	r1, r3
 8011b0a:	2004      	movs	r0, #4
 8011b0c:	f7fb f85a 	bl	800cbc4 <pbuf_alloc>
 8011b10:	6578      	str	r0, [r7, #84]	; 0x54
 8011b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f000 81e4 	beq.w	8011ee2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8011b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b1e:	68ba      	ldr	r2, [r7, #8]
 8011b20:	441a      	add	r2, r3
 8011b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b24:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011b26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b28:	f7fb fc58 	bl	800d3dc <pbuf_clen>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	461a      	mov	r2, r3
 8011b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b34:	4413      	add	r3, r2
 8011b36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011b3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b3e:	8bfb      	ldrh	r3, [r7, #30]
 8011b40:	4413      	add	r3, r2
 8011b42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011b46:	e0df      	b.n	8011d08 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 80da 	beq.w	8011d08 <tcp_write+0x464>
 8011b54:	4b03      	ldr	r3, [pc, #12]	; (8011b64 <tcp_write+0x2c0>)
 8011b56:	f240 2225 	movw	r2, #549	; 0x225
 8011b5a:	4909      	ldr	r1, [pc, #36]	; (8011b80 <tcp_write+0x2dc>)
 8011b5c:	4803      	ldr	r0, [pc, #12]	; (8011b6c <tcp_write+0x2c8>)
 8011b5e:	f004 f883 	bl	8015c68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011b62:	e0d1      	b.n	8011d08 <tcp_write+0x464>
 8011b64:	08018d04 	.word	0x08018d04
 8011b68:	08018e2c 	.word	0x08018e2c
 8011b6c:	08018d68 	.word	0x08018d68
 8011b70:	08018e60 	.word	0x08018e60
 8011b74:	08018e78 	.word	0x08018e78
 8011b78:	08018e98 	.word	0x08018e98
 8011b7c:	08018eb8 	.word	0x08018eb8
 8011b80:	08018ee4 	.word	0x08018ee4
    struct pbuf *p;
    u16_t left = len - pos;
 8011b84:	88fa      	ldrh	r2, [r7, #6]
 8011b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b8a:	1ad3      	subs	r3, r2, r3
 8011b8c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011b9a:	8b7a      	ldrh	r2, [r7, #26]
 8011b9c:	8bbb      	ldrh	r3, [r7, #28]
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	bf28      	it	cs
 8011ba2:	4613      	movcs	r3, r2
 8011ba4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011ba6:	797b      	ldrb	r3, [r7, #5]
 8011ba8:	f003 0301 	and.w	r3, r3, #1
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d036      	beq.n	8011c1e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	8b3b      	ldrh	r3, [r7, #24]
 8011bb8:	4413      	add	r3, r2
 8011bba:	b299      	uxth	r1, r3
 8011bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	bf0c      	ite	eq
 8011bc2:	2301      	moveq	r3, #1
 8011bc4:	2300      	movne	r3, #0
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	f107 0012 	add.w	r0, r7, #18
 8011bcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011bce:	9302      	str	r3, [sp, #8]
 8011bd0:	797b      	ldrb	r3, [r7, #5]
 8011bd2:	9301      	str	r3, [sp, #4]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2000      	movs	r0, #0
 8011bdc:	f7ff fd8a 	bl	80116f4 <tcp_pbuf_prealloc>
 8011be0:	6338      	str	r0, [r7, #48]	; 0x30
 8011be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f000 817e 	beq.w	8011ee6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	895b      	ldrh	r3, [r3, #10]
 8011bee:	8b3a      	ldrh	r2, [r7, #24]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d906      	bls.n	8011c02 <tcp_write+0x35e>
 8011bf4:	4b8f      	ldr	r3, [pc, #572]	; (8011e34 <tcp_write+0x590>)
 8011bf6:	f240 2241 	movw	r2, #577	; 0x241
 8011bfa:	498f      	ldr	r1, [pc, #572]	; (8011e38 <tcp_write+0x594>)
 8011bfc:	488f      	ldr	r0, [pc, #572]	; (8011e3c <tcp_write+0x598>)
 8011bfe:	f004 f833 	bl	8015c68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8011c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c04:	685a      	ldr	r2, [r3, #4]
 8011c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c0a:	18d0      	adds	r0, r2, r3
 8011c0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	4413      	add	r3, r2
 8011c14:	8b3a      	ldrh	r2, [r7, #24]
 8011c16:	4619      	mov	r1, r3
 8011c18:	f004 f813 	bl	8015c42 <memcpy>
 8011c1c:	e02e      	b.n	8011c7c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011c1e:	8a7b      	ldrh	r3, [r7, #18]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d006      	beq.n	8011c32 <tcp_write+0x38e>
 8011c24:	4b83      	ldr	r3, [pc, #524]	; (8011e34 <tcp_write+0x590>)
 8011c26:	f240 224b 	movw	r2, #587	; 0x24b
 8011c2a:	4985      	ldr	r1, [pc, #532]	; (8011e40 <tcp_write+0x59c>)
 8011c2c:	4883      	ldr	r0, [pc, #524]	; (8011e3c <tcp_write+0x598>)
 8011c2e:	f004 f81b 	bl	8015c68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011c32:	8b3b      	ldrh	r3, [r7, #24]
 8011c34:	2201      	movs	r2, #1
 8011c36:	4619      	mov	r1, r3
 8011c38:	2000      	movs	r0, #0
 8011c3a:	f7fa ffc3 	bl	800cbc4 <pbuf_alloc>
 8011c3e:	6178      	str	r0, [r7, #20]
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f000 8151 	beq.w	8011eea <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011c48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	441a      	add	r2, r3
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	2000      	movs	r0, #0
 8011c60:	f7fa ffb0 	bl	800cbc4 <pbuf_alloc>
 8011c64:	6338      	str	r0, [r7, #48]	; 0x30
 8011c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d103      	bne.n	8011c74 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011c6c:	6978      	ldr	r0, [r7, #20]
 8011c6e:	f7fb fb1b 	bl	800d2a8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011c72:	e13d      	b.n	8011ef0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011c74:	6979      	ldr	r1, [r7, #20]
 8011c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c78:	f7fb fbf0 	bl	800d45c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c7e:	f7fb fbad 	bl	800d3dc <pbuf_clen>
 8011c82:	4603      	mov	r3, r0
 8011c84:	461a      	mov	r2, r3
 8011c86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c8a:	4413      	add	r3, r2
 8011c8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011c90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c94:	2b09      	cmp	r3, #9
 8011c96:	d805      	bhi.n	8011ca4 <tcp_write+0x400>
 8011c98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c9c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d903      	bls.n	8011cac <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ca6:	f7fb faff 	bl	800d2a8 <pbuf_free>
      goto memerr;
 8011caa:	e121      	b.n	8011ef0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011cb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cb4:	441a      	add	r2, r3
 8011cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cc2:	68f8      	ldr	r0, [r7, #12]
 8011cc4:	f7ff fc8e 	bl	80115e4 <tcp_create_segment>
 8011cc8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f000 810e 	beq.w	8011eee <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d102      	bne.n	8011cde <tcp_write+0x43a>
      queue = seg;
 8011cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cda:	647b      	str	r3, [r7, #68]	; 0x44
 8011cdc:	e00c      	b.n	8011cf8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d106      	bne.n	8011cf2 <tcp_write+0x44e>
 8011ce4:	4b53      	ldr	r3, [pc, #332]	; (8011e34 <tcp_write+0x590>)
 8011ce6:	f240 2285 	movw	r2, #645	; 0x285
 8011cea:	4956      	ldr	r1, [pc, #344]	; (8011e44 <tcp_write+0x5a0>)
 8011cec:	4853      	ldr	r0, [pc, #332]	; (8011e3c <tcp_write+0x598>)
 8011cee:	f003 ffbb 	bl	8015c68 <iprintf>
      prev_seg->next = seg;
 8011cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cf6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cfa:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011cfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d00:	8b3b      	ldrh	r3, [r7, #24]
 8011d02:	4413      	add	r3, r2
 8011d04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011d08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d0c:	88fb      	ldrh	r3, [r7, #6]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	f4ff af38 	bcc.w	8011b84 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d02c      	beq.n	8011d74 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d20:	e01e      	b.n	8011d60 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8011d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d24:	891a      	ldrh	r2, [r3, #8]
 8011d26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d28:	4413      	add	r3, r2
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d110      	bne.n	8011d5a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d3e:	8952      	ldrh	r2, [r2, #10]
 8011d40:	4413      	add	r3, r2
 8011d42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011d44:	68b9      	ldr	r1, [r7, #8]
 8011d46:	4618      	mov	r0, r3
 8011d48:	f003 ff7b 	bl	8015c42 <memcpy>
        p->len += oversize_used;
 8011d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4e:	895a      	ldrh	r2, [r3, #10]
 8011d50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d52:	4413      	add	r3, r2
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d58:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1dd      	bne.n	8011d22 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8011d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d68:	891a      	ldrh	r2, [r3, #8]
 8011d6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d6c:	4413      	add	r3, r2
 8011d6e:	b29a      	uxth	r2, r3
 8011d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d72:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011d74:	8a7a      	ldrh	r2, [r7, #18]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d018      	beq.n	8011db4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <tcp_write+0x4f2>
 8011d88:	4b2a      	ldr	r3, [pc, #168]	; (8011e34 <tcp_write+0x590>)
 8011d8a:	f240 22bb 	movw	r2, #699	; 0x2bb
 8011d8e:	492e      	ldr	r1, [pc, #184]	; (8011e48 <tcp_write+0x5a4>)
 8011d90:	482a      	ldr	r0, [pc, #168]	; (8011e3c <tcp_write+0x598>)
 8011d92:	f003 ff69 	bl	8015c68 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fb fb5d 	bl	800d45c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011da4:	891a      	ldrh	r2, [r3, #8]
 8011da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011da8:	891b      	ldrh	r3, [r3, #8]
 8011daa:	4413      	add	r3, r2
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011db0:	811a      	strh	r2, [r3, #8]
 8011db2:	e037      	b.n	8011e24 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8011db4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d034      	beq.n	8011e24 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d003      	beq.n	8011dc8 <tcp_write+0x524>
 8011dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d106      	bne.n	8011dd6 <tcp_write+0x532>
 8011dc8:	4b1a      	ldr	r3, [pc, #104]	; (8011e34 <tcp_write+0x590>)
 8011dca:	f240 22c1 	movw	r2, #705	; 0x2c1
 8011dce:	491f      	ldr	r1, [pc, #124]	; (8011e4c <tcp_write+0x5a8>)
 8011dd0:	481a      	ldr	r0, [pc, #104]	; (8011e3c <tcp_write+0x598>)
 8011dd2:	f003 ff49 	bl	8015c68 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ddc:	e009      	b.n	8011df2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8011dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de0:	891a      	ldrh	r2, [r3, #8]
 8011de2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011de4:	4413      	add	r3, r2
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dea:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1f1      	bne.n	8011dde <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8011dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfc:	891a      	ldrh	r2, [r3, #8]
 8011dfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e00:	4413      	add	r3, r2
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e06:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	895a      	ldrh	r2, [r3, #10]
 8011e0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e0e:	4413      	add	r3, r2
 8011e10:	b29a      	uxth	r2, r3
 8011e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e14:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e18:	891a      	ldrh	r2, [r3, #8]
 8011e1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e1c:	4413      	add	r3, r2
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e22:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d112      	bne.n	8011e50 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e2e:	669a      	str	r2, [r3, #104]	; 0x68
 8011e30:	e011      	b.n	8011e56 <tcp_write+0x5b2>
 8011e32:	bf00      	nop
 8011e34:	08018d04 	.word	0x08018d04
 8011e38:	08018f14 	.word	0x08018f14
 8011e3c:	08018d68 	.word	0x08018d68
 8011e40:	08018f54 	.word	0x08018f54
 8011e44:	08018f64 	.word	0x08018f64
 8011e48:	08018f78 	.word	0x08018f78
 8011e4c:	08018fb0 	.word	0x08018fb0
  } else {
    last_unsent->next = queue;
 8011e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e54:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e5a:	88fb      	ldrh	r3, [r7, #6]
 8011e5c:	441a      	add	r2, r3
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e68:	88fb      	ldrh	r3, [r7, #6]
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011e7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d00e      	beq.n	8011ea6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d10a      	bne.n	8011ea6 <tcp_write+0x602>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d106      	bne.n	8011ea6 <tcp_write+0x602>
 8011e98:	4b2c      	ldr	r3, [pc, #176]	; (8011f4c <tcp_write+0x6a8>)
 8011e9a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011e9e:	492c      	ldr	r1, [pc, #176]	; (8011f50 <tcp_write+0x6ac>)
 8011ea0:	482c      	ldr	r0, [pc, #176]	; (8011f54 <tcp_write+0x6b0>)
 8011ea2:	f003 fee1 	bl	8015c68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8011ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d016      	beq.n	8011eda <tcp_write+0x636>
 8011eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d012      	beq.n	8011eda <tcp_write+0x636>
 8011eb4:	797b      	ldrb	r3, [r7, #5]
 8011eb6:	f003 0302 	and.w	r3, r3, #2
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d10d      	bne.n	8011eda <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	899b      	ldrh	r3, [r3, #12]
 8011ec4:	b29c      	uxth	r4, r3
 8011ec6:	2008      	movs	r0, #8
 8011ec8:	f7fa f854 	bl	800bf74 <lwip_htons>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	4322      	orrs	r2, r4
 8011ed6:	b292      	uxth	r2, r2
 8011ed8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	e031      	b.n	8011f42 <tcp_write+0x69e>
          goto memerr;
 8011ede:	bf00      	nop
 8011ee0:	e006      	b.n	8011ef0 <tcp_write+0x64c>
            goto memerr;
 8011ee2:	bf00      	nop
 8011ee4:	e004      	b.n	8011ef0 <tcp_write+0x64c>
        goto memerr;
 8011ee6:	bf00      	nop
 8011ee8:	e002      	b.n	8011ef0 <tcp_write+0x64c>
        goto memerr;
 8011eea:	bf00      	nop
 8011eec:	e000      	b.n	8011ef0 <tcp_write+0x64c>
      goto memerr;
 8011eee:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	7e9b      	ldrb	r3, [r3, #26]
 8011ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d002      	beq.n	8011f0a <tcp_write+0x666>
    pbuf_free(concat_p);
 8011f04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f06:	f7fb f9cf 	bl	800d2a8 <pbuf_free>
  }
  if (queue != NULL) {
 8011f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d002      	beq.n	8011f16 <tcp_write+0x672>
    tcp_segs_free(queue);
 8011f10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011f12:	f7fc fcce 	bl	800e8b2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00e      	beq.n	8011f3e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10a      	bne.n	8011f3e <tcp_write+0x69a>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d106      	bne.n	8011f3e <tcp_write+0x69a>
 8011f30:	4b06      	ldr	r3, [pc, #24]	; (8011f4c <tcp_write+0x6a8>)
 8011f32:	f240 3202 	movw	r2, #770	; 0x302
 8011f36:	4906      	ldr	r1, [pc, #24]	; (8011f50 <tcp_write+0x6ac>)
 8011f38:	4806      	ldr	r0, [pc, #24]	; (8011f54 <tcp_write+0x6b0>)
 8011f3a:	f003 fe95 	bl	8015c68 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	375c      	adds	r7, #92	; 0x5c
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd90      	pop	{r4, r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	08018d04 	.word	0x08018d04
 8011f50:	08018fe8 	.word	0x08018fe8
 8011f54:	08018d68 	.word	0x08018d68

08011f58 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b08a      	sub	sp, #40	; 0x28
 8011f5c:	af02      	add	r7, sp, #8
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	460b      	mov	r3, r1
 8011f62:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011f64:	2300      	movs	r3, #0
 8011f66:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011f6c:	78fb      	ldrb	r3, [r7, #3]
 8011f6e:	f003 0303 	and.w	r3, r3, #3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d106      	bne.n	8011f84 <tcp_enqueue_flags+0x2c>
 8011f76:	4b6f      	ldr	r3, [pc, #444]	; (8012134 <tcp_enqueue_flags+0x1dc>)
 8011f78:	f240 321b 	movw	r2, #795	; 0x31b
 8011f7c:	496e      	ldr	r1, [pc, #440]	; (8012138 <tcp_enqueue_flags+0x1e0>)
 8011f7e:	486f      	ldr	r0, [pc, #444]	; (801213c <tcp_enqueue_flags+0x1e4>)
 8011f80:	f003 fe72 	bl	8015c68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f8a:	2b08      	cmp	r3, #8
 8011f8c:	d806      	bhi.n	8011f9c <tcp_enqueue_flags+0x44>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f94:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011f98:	4293      	cmp	r3, r2
 8011f9a:	d90e      	bls.n	8011fba <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011f9c:	78fb      	ldrb	r3, [r7, #3]
 8011f9e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d109      	bne.n	8011fba <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	7e9b      	ldrb	r3, [r3, #26]
 8011faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb8:	e0b7      	b.n	801212a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8011fba:	78fb      	ldrb	r3, [r7, #3]
 8011fbc:	f003 0302 	and.w	r3, r3, #2
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d001      	beq.n	8011fc8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011fc8:	7ffb      	ldrb	r3, [r7, #31]
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	f003 0304 	and.w	r3, r3, #4
 8011fd2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011fd4:	7dfb      	ldrb	r3, [r7, #23]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	2200      	movs	r2, #0
 8011fda:	4619      	mov	r1, r3
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f7fa fdf1 	bl	800cbc4 <pbuf_alloc>
 8011fe2:	6138      	str	r0, [r7, #16]
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d109      	bne.n	8011ffe <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	7e9b      	ldrb	r3, [r3, #26]
 8011fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ffc:	e095      	b.n	801212a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	895a      	ldrh	r2, [r3, #10]
 8012002:	7dfb      	ldrb	r3, [r7, #23]
 8012004:	b29b      	uxth	r3, r3
 8012006:	429a      	cmp	r2, r3
 8012008:	d206      	bcs.n	8012018 <tcp_enqueue_flags+0xc0>
 801200a:	4b4a      	ldr	r3, [pc, #296]	; (8012134 <tcp_enqueue_flags+0x1dc>)
 801200c:	f240 3241 	movw	r2, #833	; 0x341
 8012010:	494b      	ldr	r1, [pc, #300]	; (8012140 <tcp_enqueue_flags+0x1e8>)
 8012012:	484a      	ldr	r0, [pc, #296]	; (801213c <tcp_enqueue_flags+0x1e4>)
 8012014:	f003 fe28 	bl	8015c68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801201c:	78fa      	ldrb	r2, [r7, #3]
 801201e:	7ffb      	ldrb	r3, [r7, #31]
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	460b      	mov	r3, r1
 8012024:	6939      	ldr	r1, [r7, #16]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7ff fadc 	bl	80115e4 <tcp_create_segment>
 801202c:	60f8      	str	r0, [r7, #12]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d109      	bne.n	8012048 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	7e9b      	ldrb	r3, [r3, #26]
 8012038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801203c:	b2da      	uxtb	r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012042:	f04f 33ff 	mov.w	r3, #4294967295
 8012046:	e070      	b.n	801212a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	f003 0303 	and.w	r3, r3, #3
 8012050:	2b00      	cmp	r3, #0
 8012052:	d006      	beq.n	8012062 <tcp_enqueue_flags+0x10a>
 8012054:	4b37      	ldr	r3, [pc, #220]	; (8012134 <tcp_enqueue_flags+0x1dc>)
 8012056:	f240 3249 	movw	r2, #841	; 0x349
 801205a:	493a      	ldr	r1, [pc, #232]	; (8012144 <tcp_enqueue_flags+0x1ec>)
 801205c:	4837      	ldr	r0, [pc, #220]	; (801213c <tcp_enqueue_flags+0x1e4>)
 801205e:	f003 fe03 	bl	8015c68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	891b      	ldrh	r3, [r3, #8]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d006      	beq.n	8012078 <tcp_enqueue_flags+0x120>
 801206a:	4b32      	ldr	r3, [pc, #200]	; (8012134 <tcp_enqueue_flags+0x1dc>)
 801206c:	f240 324a 	movw	r2, #842	; 0x34a
 8012070:	4935      	ldr	r1, [pc, #212]	; (8012148 <tcp_enqueue_flags+0x1f0>)
 8012072:	4832      	ldr	r0, [pc, #200]	; (801213c <tcp_enqueue_flags+0x1e4>)
 8012074:	f003 fdf8 	bl	8015c68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801207c:	2b00      	cmp	r3, #0
 801207e:	d103      	bne.n	8012088 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	669a      	str	r2, [r3, #104]	; 0x68
 8012086:	e00d      	b.n	80120a4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801208c:	61bb      	str	r3, [r7, #24]
 801208e:	e002      	b.n	8012096 <tcp_enqueue_flags+0x13e>
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	61bb      	str	r3, [r7, #24]
 8012096:	69bb      	ldr	r3, [r7, #24]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1f8      	bne.n	8012090 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80120ac:	78fb      	ldrb	r3, [r7, #3]
 80120ae:	f003 0302 	and.w	r3, r3, #2
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d104      	bne.n	80120c0 <tcp_enqueue_flags+0x168>
 80120b6:	78fb      	ldrb	r3, [r7, #3]
 80120b8:	f003 0301 	and.w	r3, r3, #1
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d004      	beq.n	80120ca <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c4:	1c5a      	adds	r2, r3, #1
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80120ca:	78fb      	ldrb	r3, [r7, #3]
 80120cc:	f003 0301 	and.w	r3, r3, #1
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d006      	beq.n	80120e2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	7e9b      	ldrb	r3, [r3, #26]
 80120d8:	f043 0320 	orr.w	r3, r3, #32
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fb f978 	bl	800d3dc <pbuf_clen>
 80120ec:	4603      	mov	r3, r0
 80120ee:	461a      	mov	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120f6:	4413      	add	r3, r2
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012106:	2b00      	cmp	r3, #0
 8012108:	d00e      	beq.n	8012128 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801210e:	2b00      	cmp	r3, #0
 8012110:	d10a      	bne.n	8012128 <tcp_enqueue_flags+0x1d0>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012116:	2b00      	cmp	r3, #0
 8012118:	d106      	bne.n	8012128 <tcp_enqueue_flags+0x1d0>
 801211a:	4b06      	ldr	r3, [pc, #24]	; (8012134 <tcp_enqueue_flags+0x1dc>)
 801211c:	f240 326d 	movw	r2, #877	; 0x36d
 8012120:	490a      	ldr	r1, [pc, #40]	; (801214c <tcp_enqueue_flags+0x1f4>)
 8012122:	4806      	ldr	r0, [pc, #24]	; (801213c <tcp_enqueue_flags+0x1e4>)
 8012124:	f003 fda0 	bl	8015c68 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3720      	adds	r7, #32
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	08018d04 	.word	0x08018d04
 8012138:	08019008 	.word	0x08019008
 801213c:	08018d68 	.word	0x08018d68
 8012140:	08019060 	.word	0x08019060
 8012144:	0801909c 	.word	0x0801909c
 8012148:	080190b4 	.word	0x080190b4
 801214c:	080190e0 	.word	0x080190e0

08012150 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012150:	b590      	push	{r4, r7, lr}
 8012152:	b08b      	sub	sp, #44	; 0x2c
 8012154:	af04      	add	r7, sp, #16
 8012156:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8012158:	2300      	movs	r3, #0
 801215a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801215c:	7dbb      	ldrb	r3, [r7, #22]
 801215e:	b29c      	uxth	r4, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012164:	4618      	mov	r0, r3
 8012166:	f7f9 ff13 	bl	800bf90 <lwip_htonl>
 801216a:	4603      	mov	r3, r0
 801216c:	2200      	movs	r2, #0
 801216e:	4621      	mov	r1, r4
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7ff f97b 	bl	801146c <tcp_output_alloc_header>
 8012176:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d109      	bne.n	8012192 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	7e9b      	ldrb	r3, [r3, #26]
 8012182:	f043 0303 	orr.w	r3, r3, #3
 8012186:	b2da      	uxtb	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801218c:	f06f 0301 	mvn.w	r3, #1
 8012190:	e036      	b.n	8012200 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	3304      	adds	r3, #4
 8012196:	4618      	mov	r0, r3
 8012198:	f002 f9c0 	bl	801451c <ip4_route>
 801219c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d102      	bne.n	80121aa <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80121a4:	23fc      	movs	r3, #252	; 0xfc
 80121a6:	75fb      	strb	r3, [r7, #23]
 80121a8:	e012      	b.n	80121d0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80121aa:	6879      	ldr	r1, [r7, #4]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	1d18      	adds	r0, r3, #4
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	7a9c      	ldrb	r4, [r3, #10]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	7a5b      	ldrb	r3, [r3, #9]
 80121b8:	68fa      	ldr	r2, [r7, #12]
 80121ba:	9202      	str	r2, [sp, #8]
 80121bc:	2206      	movs	r2, #6
 80121be:	9201      	str	r2, [sp, #4]
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	4623      	mov	r3, r4
 80121c4:	4602      	mov	r2, r0
 80121c6:	6938      	ldr	r0, [r7, #16]
 80121c8:	f002 fb50 	bl	801486c <ip4_output_if>
 80121cc:	4603      	mov	r3, r0
 80121ce:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80121d0:	6938      	ldr	r0, [r7, #16]
 80121d2:	f7fb f869 	bl	800d2a8 <pbuf_free>

  if (err != ERR_OK) {
 80121d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d007      	beq.n	80121ee <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	7e9b      	ldrb	r3, [r3, #26]
 80121e2:	f043 0303 	orr.w	r3, r3, #3
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	769a      	strb	r2, [r3, #26]
 80121ec:	e006      	b.n	80121fc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	7e9b      	ldrb	r3, [r3, #26]
 80121f2:	f023 0303 	bic.w	r3, r3, #3
 80121f6:	b2da      	uxtb	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80121fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012200:	4618      	mov	r0, r3
 8012202:	371c      	adds	r7, #28
 8012204:	46bd      	mov	sp, r7
 8012206:	bd90      	pop	{r4, r7, pc}

08012208 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012208:	b5b0      	push	{r4, r5, r7, lr}
 801220a:	b08a      	sub	sp, #40	; 0x28
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	7d1b      	ldrb	r3, [r3, #20]
 8012214:	2b01      	cmp	r3, #1
 8012216:	d106      	bne.n	8012226 <tcp_output+0x1e>
 8012218:	4b9b      	ldr	r3, [pc, #620]	; (8012488 <tcp_output+0x280>)
 801221a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801221e:	499b      	ldr	r1, [pc, #620]	; (801248c <tcp_output+0x284>)
 8012220:	489b      	ldr	r0, [pc, #620]	; (8012490 <tcp_output+0x288>)
 8012222:	f003 fd21 	bl	8015c68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012226:	4b9b      	ldr	r3, [pc, #620]	; (8012494 <tcp_output+0x28c>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	429a      	cmp	r2, r3
 801222e:	d101      	bne.n	8012234 <tcp_output+0x2c>
    return ERR_OK;
 8012230:	2300      	movs	r3, #0
 8012232:	e1cf      	b.n	80125d4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012240:	429a      	cmp	r2, r3
 8012242:	d203      	bcs.n	801224c <tcp_output+0x44>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801224a:	e002      	b.n	8012252 <tcp_output+0x4a>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012252:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012258:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	7e9b      	ldrb	r3, [r3, #26]
 801225e:	f003 0302 	and.w	r3, r3, #2
 8012262:	2b00      	cmp	r3, #0
 8012264:	d017      	beq.n	8012296 <tcp_output+0x8e>
 8012266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012268:	2b00      	cmp	r3, #0
 801226a:	d00f      	beq.n	801228c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	4618      	mov	r0, r3
 8012274:	f7f9 fe8c 	bl	800bf90 <lwip_htonl>
 8012278:	4602      	mov	r2, r0
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012282:	8912      	ldrh	r2, [r2, #8]
 8012284:	4413      	add	r3, r2
     (seg == NULL ||
 8012286:	69ba      	ldr	r2, [r7, #24]
 8012288:	429a      	cmp	r2, r3
 801228a:	d204      	bcs.n	8012296 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff ff5f 	bl	8012150 <tcp_send_empty_ack>
 8012292:	4603      	mov	r3, r0
 8012294:	e19e      	b.n	80125d4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801229a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801229c:	6a3b      	ldr	r3, [r7, #32]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d007      	beq.n	80122b2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80122a2:	e002      	b.n	80122aa <tcp_output+0xa2>
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	623b      	str	r3, [r7, #32]
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d1f8      	bne.n	80122a4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	3304      	adds	r3, #4
 80122b6:	4618      	mov	r0, r3
 80122b8:	f002 f930 	bl	801451c <ip4_route>
 80122bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <tcp_output+0xc2>
    return ERR_RTE;
 80122c4:	f06f 0303 	mvn.w	r3, #3
 80122c8:	e184      	b.n	80125d4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d003      	beq.n	80122d8 <tcp_output+0xd0>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d111      	bne.n	80122fc <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <tcp_output+0xdc>
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	3304      	adds	r3, #4
 80122e2:	e000      	b.n	80122e6 <tcp_output+0xde>
 80122e4:	2300      	movs	r3, #0
 80122e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d102      	bne.n	80122f4 <tcp_output+0xec>
      return ERR_RTE;
 80122ee:	f06f 0303 	mvn.w	r3, #3
 80122f2:	e16f      	b.n	80125d4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f000 813e 	beq.w	8012580 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	f7f9 fe40 	bl	800bf90 <lwip_htonl>
 8012310:	4602      	mov	r2, r0
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801231a:	8912      	ldrh	r2, [r2, #8]
 801231c:	4413      	add	r3, r2
  if (seg != NULL &&
 801231e:	69ba      	ldr	r2, [r7, #24]
 8012320:	429a      	cmp	r2, r3
 8012322:	f080 812d 	bcs.w	8012580 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	2b00      	cmp	r3, #0
 801232a:	f000 8129 	beq.w	8012580 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012334:	461a      	mov	r2, r3
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	4293      	cmp	r3, r2
 801233a:	f040 8121 	bne.w	8012580 <tcp_output+0x378>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012342:	2b00      	cmp	r3, #0
 8012344:	f040 811c 	bne.w	8012580 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801234e:	2b00      	cmp	r3, #0
 8012350:	f040 812b 	bne.w	80125aa <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2201      	movs	r2, #1
 8012360:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8012364:	e121      	b.n	80125aa <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	899b      	ldrh	r3, [r3, #12]
 801236c:	b29b      	uxth	r3, r3
 801236e:	4618      	mov	r0, r3
 8012370:	f7f9 fe00 	bl	800bf74 <lwip_htons>
 8012374:	4603      	mov	r3, r0
 8012376:	f003 0304 	and.w	r3, r3, #4
 801237a:	2b00      	cmp	r3, #0
 801237c:	d006      	beq.n	801238c <tcp_output+0x184>
 801237e:	4b42      	ldr	r3, [pc, #264]	; (8012488 <tcp_output+0x280>)
 8012380:	f240 4246 	movw	r2, #1094	; 0x446
 8012384:	4944      	ldr	r1, [pc, #272]	; (8012498 <tcp_output+0x290>)
 8012386:	4842      	ldr	r0, [pc, #264]	; (8012490 <tcp_output+0x288>)
 8012388:	f003 fc6e 	bl	8015c68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012390:	2b00      	cmp	r3, #0
 8012392:	d01f      	beq.n	80123d4 <tcp_output+0x1cc>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	7e9b      	ldrb	r3, [r3, #26]
 8012398:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801239c:	2b00      	cmp	r3, #0
 801239e:	d119      	bne.n	80123d4 <tcp_output+0x1cc>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d00b      	beq.n	80123c0 <tcp_output+0x1b8>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d110      	bne.n	80123d4 <tcp_output+0x1cc>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123b6:	891a      	ldrh	r2, [r3, #8]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123bc:	429a      	cmp	r2, r3
 80123be:	d209      	bcs.n	80123d4 <tcp_output+0x1cc>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d004      	beq.n	80123d4 <tcp_output+0x1cc>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80123d0:	2b08      	cmp	r3, #8
 80123d2:	d901      	bls.n	80123d8 <tcp_output+0x1d0>
 80123d4:	2301      	movs	r3, #1
 80123d6:	e000      	b.n	80123da <tcp_output+0x1d2>
 80123d8:	2300      	movs	r3, #0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	7e9b      	ldrb	r3, [r3, #26]
 80123e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f000 80e1 	beq.w	80125ae <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	7d1b      	ldrb	r3, [r3, #20]
 80123f0:	2b02      	cmp	r3, #2
 80123f2:	d00d      	beq.n	8012410 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	899b      	ldrh	r3, [r3, #12]
 80123fa:	b29c      	uxth	r4, r3
 80123fc:	2010      	movs	r0, #16
 80123fe:	f7f9 fdb9 	bl	800bf74 <lwip_htons>
 8012402:	4603      	mov	r3, r0
 8012404:	461a      	mov	r2, r3
 8012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	4322      	orrs	r2, r4
 801240c:	b292      	uxth	r2, r2
 801240e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8012410:	697a      	ldr	r2, [r7, #20]
 8012412:	6879      	ldr	r1, [r7, #4]
 8012414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012416:	f000 f8e1 	bl	80125dc <tcp_output_segment>
 801241a:	4603      	mov	r3, r0
 801241c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d009      	beq.n	801243a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	7e9b      	ldrb	r3, [r3, #26]
 801242a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801242e:	b2da      	uxtb	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	769a      	strb	r2, [r3, #26]
      return err;
 8012434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012438:	e0cc      	b.n	80125d4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	7d1b      	ldrb	r3, [r3, #20]
 8012446:	2b02      	cmp	r3, #2
 8012448:	d006      	beq.n	8012458 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	7e9b      	ldrb	r3, [r3, #26]
 801244e:	f023 0303 	bic.w	r3, r3, #3
 8012452:	b2da      	uxtb	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f7f9 fd96 	bl	800bf90 <lwip_htonl>
 8012464:	4604      	mov	r4, r0
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	891b      	ldrh	r3, [r3, #8]
 801246a:	461d      	mov	r5, r3
 801246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	899b      	ldrh	r3, [r3, #12]
 8012472:	b29b      	uxth	r3, r3
 8012474:	4618      	mov	r0, r3
 8012476:	f7f9 fd7d 	bl	800bf74 <lwip_htons>
 801247a:	4603      	mov	r3, r0
 801247c:	f003 0303 	and.w	r3, r3, #3
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00b      	beq.n	801249c <tcp_output+0x294>
 8012484:	2301      	movs	r3, #1
 8012486:	e00a      	b.n	801249e <tcp_output+0x296>
 8012488:	08018d04 	.word	0x08018d04
 801248c:	08019108 	.word	0x08019108
 8012490:	08018d68 	.word	0x08018d68
 8012494:	2000b114 	.word	0x2000b114
 8012498:	08019130 	.word	0x08019130
 801249c:	2300      	movs	r3, #0
 801249e:	442b      	add	r3, r5
 80124a0:	4423      	add	r3, r4
 80124a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	1ad3      	subs	r3, r2, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	da02      	bge.n	80124b6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	68ba      	ldr	r2, [r7, #8]
 80124b4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	891b      	ldrh	r3, [r3, #8]
 80124ba:	461c      	mov	r4, r3
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	68db      	ldr	r3, [r3, #12]
 80124c0:	899b      	ldrh	r3, [r3, #12]
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f9 fd55 	bl	800bf74 <lwip_htons>
 80124ca:	4603      	mov	r3, r0
 80124cc:	f003 0303 	and.w	r3, r3, #3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d001      	beq.n	80124d8 <tcp_output+0x2d0>
 80124d4:	2301      	movs	r3, #1
 80124d6:	e000      	b.n	80124da <tcp_output+0x2d2>
 80124d8:	2300      	movs	r3, #0
 80124da:	4423      	add	r3, r4
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d049      	beq.n	8012574 <tcp_output+0x36c>
      seg->next = NULL;
 80124e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e2:	2200      	movs	r2, #0
 80124e4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d105      	bne.n	80124fa <tcp_output+0x2f2>
        pcb->unacked = seg;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124f2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f6:	623b      	str	r3, [r7, #32]
 80124f8:	e03f      	b.n	801257a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80124fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	4618      	mov	r0, r3
 8012502:	f7f9 fd45 	bl	800bf90 <lwip_htonl>
 8012506:	4604      	mov	r4, r0
 8012508:	6a3b      	ldr	r3, [r7, #32]
 801250a:	68db      	ldr	r3, [r3, #12]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	4618      	mov	r0, r3
 8012510:	f7f9 fd3e 	bl	800bf90 <lwip_htonl>
 8012514:	4603      	mov	r3, r0
 8012516:	1ae3      	subs	r3, r4, r3
 8012518:	2b00      	cmp	r3, #0
 801251a:	da24      	bge.n	8012566 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	336c      	adds	r3, #108	; 0x6c
 8012520:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012522:	e002      	b.n	801252a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d011      	beq.n	8012556 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	4618      	mov	r0, r3
 801253c:	f7f9 fd28 	bl	800bf90 <lwip_htonl>
 8012540:	4604      	mov	r4, r0
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	4618      	mov	r0, r3
 801254a:	f7f9 fd21 	bl	800bf90 <lwip_htonl>
 801254e:	4603      	mov	r3, r0
 8012550:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012552:	2b00      	cmp	r3, #0
 8012554:	dbe6      	blt.n	8012524 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012562:	601a      	str	r2, [r3, #0]
 8012564:	e009      	b.n	801257a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012566:	6a3b      	ldr	r3, [r7, #32]
 8012568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801256a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801256c:	6a3b      	ldr	r3, [r7, #32]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	623b      	str	r3, [r7, #32]
 8012572:	e002      	b.n	801257a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012576:	f7fc f9b0 	bl	800e8da <tcp_seg_free>
    }
    seg = pcb->unsent;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801257e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	2b00      	cmp	r3, #0
 8012584:	d015      	beq.n	80125b2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	f7f9 fcff 	bl	800bf90 <lwip_htonl>
 8012592:	4602      	mov	r2, r0
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012598:	1ad3      	subs	r3, r2, r3
 801259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801259c:	8912      	ldrh	r2, [r2, #8]
 801259e:	4413      	add	r3, r2
  while (seg != NULL &&
 80125a0:	69ba      	ldr	r2, [r7, #24]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	f4bf aedf 	bcs.w	8012366 <tcp_output+0x15e>
  }
output_done:
 80125a8:	e003      	b.n	80125b2 <tcp_output+0x3aa>
    goto output_done;
 80125aa:	bf00      	nop
 80125ac:	e002      	b.n	80125b4 <tcp_output+0x3ac>
      break;
 80125ae:	bf00      	nop
 80125b0:	e000      	b.n	80125b4 <tcp_output+0x3ac>
output_done:
 80125b2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d103      	bne.n	80125c4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2200      	movs	r2, #0
 80125c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	7e9b      	ldrb	r3, [r3, #26]
 80125c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125cc:	b2da      	uxtb	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3728      	adds	r7, #40	; 0x28
 80125d8:	46bd      	mov	sp, r7
 80125da:	bdb0      	pop	{r4, r5, r7, pc}

080125dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80125dc:	b5b0      	push	{r4, r5, r7, lr}
 80125de:	b08c      	sub	sp, #48	; 0x30
 80125e0:	af04      	add	r7, sp, #16
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	89db      	ldrh	r3, [r3, #14]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d001      	beq.n	80125f6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80125f2:	2300      	movs	r3, #0
 80125f4:	e08b      	b.n	801270e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	68dc      	ldr	r4, [r3, #12]
 80125fe:	4610      	mov	r0, r2
 8012600:	f7f9 fcc6 	bl	800bf90 <lwip_htonl>
 8012604:	4603      	mov	r3, r0
 8012606:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	68dc      	ldr	r4, [r3, #12]
 8012610:	4610      	mov	r0, r2
 8012612:	f7f9 fcaf 	bl	800bf74 <lwip_htons>
 8012616:	4603      	mov	r3, r0
 8012618:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261e:	68ba      	ldr	r2, [r7, #8]
 8012620:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012622:	441a      	add	r2, r3
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	3314      	adds	r3, #20
 801262e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7a9b      	ldrb	r3, [r3, #10]
 8012634:	f003 0301 	and.w	r3, r3, #1
 8012638:	2b00      	cmp	r3, #0
 801263a:	d014      	beq.n	8012666 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	3304      	adds	r3, #4
 8012640:	4619      	mov	r1, r3
 8012642:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012646:	f7fc fc73 	bl	800ef30 <tcp_eff_send_mss_impl>
 801264a:	4603      	mov	r3, r0
 801264c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801264e:	8b7b      	ldrh	r3, [r7, #26]
 8012650:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012654:	4618      	mov	r0, r3
 8012656:	f7f9 fc9b 	bl	800bf90 <lwip_htonl>
 801265a:	4602      	mov	r2, r0
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	3304      	adds	r3, #4
 8012664:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801266c:	2b00      	cmp	r3, #0
 801266e:	da02      	bge.n	8012676 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	2200      	movs	r2, #0
 8012674:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801267a:	2b00      	cmp	r3, #0
 801267c:	d10c      	bne.n	8012698 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801267e:	4b26      	ldr	r3, [pc, #152]	; (8012718 <tcp_output_segment+0x13c>)
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	4618      	mov	r0, r3
 801268e:	f7f9 fc7f 	bl	800bf90 <lwip_htonl>
 8012692:	4602      	mov	r2, r0
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	461a      	mov	r2, r3
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	8959      	ldrh	r1, [r3, #10]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	8b3a      	ldrh	r2, [r7, #24]
 80126b4:	1a8a      	subs	r2, r1, r2
 80126b6:	b292      	uxth	r2, r2
 80126b8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	8919      	ldrh	r1, [r3, #8]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	8b3a      	ldrh	r2, [r7, #24]
 80126c6:	1a8a      	subs	r2, r1, r2
 80126c8:	b292      	uxth	r2, r2
 80126ca:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	68d2      	ldr	r2, [r2, #12]
 80126d4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	2200      	movs	r2, #0
 80126dc:	741a      	strb	r2, [r3, #16]
 80126de:	2200      	movs	r2, #0
 80126e0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	6858      	ldr	r0, [r3, #4]
 80126e6:	68b9      	ldr	r1, [r7, #8]
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	1d1c      	adds	r4, r3, #4
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	7a9d      	ldrb	r5, [r3, #10]
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	7a5b      	ldrb	r3, [r3, #9]
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	9202      	str	r2, [sp, #8]
 80126f8:	2206      	movs	r2, #6
 80126fa:	9201      	str	r2, [sp, #4]
 80126fc:	9300      	str	r3, [sp, #0]
 80126fe:	462b      	mov	r3, r5
 8012700:	4622      	mov	r2, r4
 8012702:	f002 f8b3 	bl	801486c <ip4_output_if>
 8012706:	4603      	mov	r3, r0
 8012708:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801270a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3720      	adds	r7, #32
 8012712:	46bd      	mov	sp, r7
 8012714:	bdb0      	pop	{r4, r5, r7, pc}
 8012716:	bf00      	nop
 8012718:	2000b104 	.word	0x2000b104

0801271c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b08c      	sub	sp, #48	; 0x30
 8012720:	af04      	add	r7, sp, #16
 8012722:	60f8      	str	r0, [r7, #12]
 8012724:	60b9      	str	r1, [r7, #8]
 8012726:	607a      	str	r2, [r7, #4]
 8012728:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801272a:	2200      	movs	r2, #0
 801272c:	2114      	movs	r1, #20
 801272e:	2001      	movs	r0, #1
 8012730:	f7fa fa48 	bl	800cbc4 <pbuf_alloc>
 8012734:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d05b      	beq.n	80127f4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	895b      	ldrh	r3, [r3, #10]
 8012740:	2b13      	cmp	r3, #19
 8012742:	d806      	bhi.n	8012752 <tcp_rst+0x36>
 8012744:	4b2d      	ldr	r3, [pc, #180]	; (80127fc <tcp_rst+0xe0>)
 8012746:	f240 524d 	movw	r2, #1357	; 0x54d
 801274a:	492d      	ldr	r1, [pc, #180]	; (8012800 <tcp_rst+0xe4>)
 801274c:	482d      	ldr	r0, [pc, #180]	; (8012804 <tcp_rst+0xe8>)
 801274e:	f003 fa8b 	bl	8015c68 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8012758:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801275a:	4618      	mov	r0, r3
 801275c:	f7f9 fc0a 	bl	800bf74 <lwip_htons>
 8012760:	4603      	mov	r3, r0
 8012762:	461a      	mov	r2, r3
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8012768:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801276a:	4618      	mov	r0, r3
 801276c:	f7f9 fc02 	bl	800bf74 <lwip_htons>
 8012770:	4603      	mov	r3, r0
 8012772:	461a      	mov	r2, r3
 8012774:	69bb      	ldr	r3, [r7, #24]
 8012776:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8012778:	68f8      	ldr	r0, [r7, #12]
 801277a:	f7f9 fc09 	bl	800bf90 <lwip_htonl>
 801277e:	4602      	mov	r2, r0
 8012780:	69bb      	ldr	r3, [r7, #24]
 8012782:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8012784:	68b8      	ldr	r0, [r7, #8]
 8012786:	f7f9 fc03 	bl	800bf90 <lwip_htonl>
 801278a:	4602      	mov	r2, r0
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012790:	f245 0014 	movw	r0, #20500	; 0x5014
 8012794:	f7f9 fbee 	bl	800bf74 <lwip_htons>
 8012798:	4603      	mov	r3, r0
 801279a:	461a      	mov	r2, r3
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	2200      	movs	r2, #0
 80127a4:	f042 0208 	orr.w	r2, r2, #8
 80127a8:	739a      	strb	r2, [r3, #14]
 80127aa:	2200      	movs	r2, #0
 80127ac:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80127b0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	2200      	movs	r2, #0
 80127b6:	741a      	strb	r2, [r3, #16]
 80127b8:	2200      	movs	r2, #0
 80127ba:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	2200      	movs	r2, #0
 80127c0:	749a      	strb	r2, [r3, #18]
 80127c2:	2200      	movs	r2, #0
 80127c4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80127c6:	6838      	ldr	r0, [r7, #0]
 80127c8:	f001 fea8 	bl	801451c <ip4_route>
 80127cc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00b      	beq.n	80127ec <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	9302      	str	r3, [sp, #8]
 80127d8:	2306      	movs	r3, #6
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	2300      	movs	r3, #0
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	23ff      	movs	r3, #255	; 0xff
 80127e2:	683a      	ldr	r2, [r7, #0]
 80127e4:	6879      	ldr	r1, [r7, #4]
 80127e6:	69f8      	ldr	r0, [r7, #28]
 80127e8:	f002 f840 	bl	801486c <ip4_output_if>
  }
  pbuf_free(p);
 80127ec:	69f8      	ldr	r0, [r7, #28]
 80127ee:	f7fa fd5b 	bl	800d2a8 <pbuf_free>
 80127f2:	e000      	b.n	80127f6 <tcp_rst+0xda>
    return;
 80127f4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80127f6:	3720      	adds	r7, #32
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	08018d04 	.word	0x08018d04
 8012800:	08018d38 	.word	0x08018d38
 8012804:	08018d68 	.word	0x08018d68

08012808 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012814:	2b00      	cmp	r3, #0
 8012816:	d029      	beq.n	801286c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801281c:	60fb      	str	r3, [r7, #12]
 801281e:	e002      	b.n	8012826 <tcp_rexmit_rto+0x1e>
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	60fb      	str	r3, [r7, #12]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d1f8      	bne.n	8012820 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801284a:	2bff      	cmp	r3, #255	; 0xff
 801284c:	d007      	beq.n	801285e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012854:	3301      	adds	r3, #1
 8012856:	b2da      	uxtb	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2200      	movs	r2, #0
 8012862:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7ff fccf 	bl	8012208 <tcp_output>
 801286a:	e000      	b.n	801286e <tcp_rexmit_rto+0x66>
    return;
 801286c:	bf00      	nop
}
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012874:	b590      	push	{r4, r7, lr}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012880:	2b00      	cmp	r3, #0
 8012882:	d043      	beq.n	801290c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012888:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	3368      	adds	r3, #104	; 0x68
 8012896:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012898:	e002      	b.n	80128a0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d011      	beq.n	80128cc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	68db      	ldr	r3, [r3, #12]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7f9 fb6d 	bl	800bf90 <lwip_htonl>
 80128b6:	4604      	mov	r4, r0
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7f9 fb66 	bl	800bf90 <lwip_htonl>
 80128c4:	4603      	mov	r3, r0
 80128c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dbe6      	blt.n	801289a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	68ba      	ldr	r2, [r7, #8]
 80128d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d103      	bne.n	80128ea <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2200      	movs	r2, #0
 80128e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128f0:	2bff      	cmp	r3, #255	; 0xff
 80128f2:	d007      	beq.n	8012904 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128fa:	3301      	adds	r3, #1
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	635a      	str	r2, [r3, #52]	; 0x34
 801290a:	e000      	b.n	801290e <tcp_rexmit+0x9a>
    return;
 801290c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801290e:	3714      	adds	r7, #20
 8012910:	46bd      	mov	sp, r7
 8012912:	bd90      	pop	{r4, r7, pc}

08012914 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012920:	2b00      	cmp	r3, #0
 8012922:	d04c      	beq.n	80129be <tcp_rexmit_fast+0xaa>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	7e9b      	ldrb	r3, [r3, #26]
 8012928:	f003 0304 	and.w	r3, r3, #4
 801292c:	2b00      	cmp	r3, #0
 801292e:	d146      	bne.n	80129be <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f7ff ff9f 	bl	8012874 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012942:	429a      	cmp	r2, r3
 8012944:	d208      	bcs.n	8012958 <tcp_rexmit_fast+0x44>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801294c:	2b00      	cmp	r3, #0
 801294e:	da00      	bge.n	8012952 <tcp_rexmit_fast+0x3e>
 8012950:	3301      	adds	r3, #1
 8012952:	105b      	asrs	r3, r3, #1
 8012954:	b29b      	uxth	r3, r3
 8012956:	e007      	b.n	8012968 <tcp_rexmit_fast+0x54>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801295e:	2b00      	cmp	r3, #0
 8012960:	da00      	bge.n	8012964 <tcp_rexmit_fast+0x50>
 8012962:	3301      	adds	r3, #1
 8012964:	105b      	asrs	r3, r3, #1
 8012966:	b29b      	uxth	r3, r3
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012974:	461a      	mov	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801297a:	005b      	lsls	r3, r3, #1
 801297c:	429a      	cmp	r2, r3
 801297e:	d206      	bcs.n	801298e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012984:	005b      	lsls	r3, r3, #1
 8012986:	b29a      	uxth	r2, r3
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012998:	4619      	mov	r1, r3
 801299a:	0049      	lsls	r1, r1, #1
 801299c:	440b      	add	r3, r1
 801299e:	b29b      	uxth	r3, r3
 80129a0:	4413      	add	r3, r2
 80129a2:	b29a      	uxth	r2, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	7e9b      	ldrb	r3, [r3, #26]
 80129ae:	f043 0304 	orr.w	r3, r3, #4
 80129b2:	b2da      	uxtb	r2, r3
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b08a      	sub	sp, #40	; 0x28
 80129ca:	af04      	add	r7, sp, #16
 80129cc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129d2:	3b01      	subs	r3, #1
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7f9 fadb 	bl	800bf90 <lwip_htonl>
 80129da:	4603      	mov	r3, r0
 80129dc:	2200      	movs	r2, #0
 80129de:	2100      	movs	r1, #0
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f7fe fd43 	bl	801146c <tcp_output_alloc_header>
 80129e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d102      	bne.n	80129f4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80129ee:	f04f 33ff 	mov.w	r3, #4294967295
 80129f2:	e021      	b.n	8012a38 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	3304      	adds	r3, #4
 80129f8:	4618      	mov	r0, r3
 80129fa:	f001 fd8f 	bl	801451c <ip4_route>
 80129fe:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d102      	bne.n	8012a0c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8012a06:	23fc      	movs	r3, #252	; 0xfc
 8012a08:	75fb      	strb	r3, [r7, #23]
 8012a0a:	e010      	b.n	8012a2e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012a0c:	6879      	ldr	r1, [r7, #4]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	1d1a      	adds	r2, r3, #4
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	7a98      	ldrb	r0, [r3, #10]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	9302      	str	r3, [sp, #8]
 8012a1a:	2306      	movs	r3, #6
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	2300      	movs	r3, #0
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	4603      	mov	r3, r0
 8012a24:	6938      	ldr	r0, [r7, #16]
 8012a26:	f001 ff21 	bl	801486c <ip4_output_if>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012a2e:	6938      	ldr	r0, [r7, #16]
 8012a30:	f7fa fc3a 	bl	800d2a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3718      	adds	r7, #24
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012a40:	b590      	push	{r4, r7, lr}
 8012a42:	b08f      	sub	sp, #60	; 0x3c
 8012a44:	af04      	add	r7, sp, #16
 8012a46:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a4c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012a4e:	6a3b      	ldr	r3, [r7, #32]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d102      	bne.n	8012a5a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a58:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012a5a:	6a3b      	ldr	r3, [r7, #32]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d101      	bne.n	8012a64 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012a60:	2300      	movs	r3, #0
 8012a62:	e085      	b.n	8012b70 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012a64:	6a3b      	ldr	r3, [r7, #32]
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	899b      	ldrh	r3, [r3, #12]
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7f9 fa81 	bl	800bf74 <lwip_htons>
 8012a72:	4603      	mov	r3, r0
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d005      	beq.n	8012a88 <tcp_zero_window_probe+0x48>
 8012a7c:	6a3b      	ldr	r3, [r7, #32]
 8012a7e:	891b      	ldrh	r3, [r3, #8]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <tcp_zero_window_probe+0x48>
 8012a84:	2301      	movs	r3, #1
 8012a86:	e000      	b.n	8012a8a <tcp_zero_window_probe+0x4a>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012a8c:	7ffb      	ldrb	r3, [r7, #31]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	bf0c      	ite	eq
 8012a92:	2301      	moveq	r3, #1
 8012a94:	2300      	movne	r3, #0
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	8bba      	ldrh	r2, [r7, #28]
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7fe fce1 	bl	801146c <tcp_output_alloc_header>
 8012aaa:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d102      	bne.n	8012ab8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ab6:	e05b      	b.n	8012b70 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012abe:	7ffb      	ldrb	r3, [r7, #31]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00e      	beq.n	8012ae2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	899b      	ldrh	r3, [r3, #12]
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012ace:	b29c      	uxth	r4, r3
 8012ad0:	2011      	movs	r0, #17
 8012ad2:	f7f9 fa4f 	bl	800bf74 <lwip_htons>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	4323      	orrs	r3, r4
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	819a      	strh	r2, [r3, #12]
 8012ae0:	e010      	b.n	8012b04 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	3314      	adds	r3, #20
 8012ae8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012aea:	6a3b      	ldr	r3, [r7, #32]
 8012aec:	6858      	ldr	r0, [r3, #4]
 8012aee:	6a3b      	ldr	r3, [r7, #32]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	891a      	ldrh	r2, [r3, #8]
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	891b      	ldrh	r3, [r3, #8]
 8012af8:	1ad3      	subs	r3, r2, r3
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	2201      	movs	r2, #1
 8012afe:	6939      	ldr	r1, [r7, #16]
 8012b00:	f7fa fdce 	bl	800d6a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012b04:	6a3b      	ldr	r3, [r7, #32]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7f9 fa40 	bl	800bf90 <lwip_htonl>
 8012b10:	4603      	mov	r3, r0
 8012b12:	3301      	adds	r3, #1
 8012b14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	da02      	bge.n	8012b28 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	3304      	adds	r3, #4
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f001 fcf5 	bl	801451c <ip4_route>
 8012b32:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d103      	bne.n	8012b42 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012b3a:	23fc      	movs	r3, #252	; 0xfc
 8012b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b40:	e011      	b.n	8012b66 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012b42:	6879      	ldr	r1, [r7, #4]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	1d1a      	adds	r2, r3, #4
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	7a98      	ldrb	r0, [r3, #10]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	9302      	str	r3, [sp, #8]
 8012b50:	2306      	movs	r3, #6
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	2300      	movs	r3, #0
 8012b56:	9300      	str	r3, [sp, #0]
 8012b58:	4603      	mov	r3, r0
 8012b5a:	69b8      	ldr	r0, [r7, #24]
 8012b5c:	f001 fe86 	bl	801486c <ip4_output_if>
 8012b60:	4603      	mov	r3, r0
 8012b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012b66:	69b8      	ldr	r0, [r7, #24]
 8012b68:	f7fa fb9e 	bl	800d2a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	372c      	adds	r7, #44	; 0x2c
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd90      	pop	{r4, r7, pc}

08012b78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012b80:	f7fa fe10 	bl	800d7a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012b84:	4b0a      	ldr	r3, [pc, #40]	; (8012bb0 <tcpip_tcp_timer+0x38>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d103      	bne.n	8012b94 <tcpip_tcp_timer+0x1c>
 8012b8c:	4b09      	ldr	r3, [pc, #36]	; (8012bb4 <tcpip_tcp_timer+0x3c>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d005      	beq.n	8012ba0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b94:	2200      	movs	r2, #0
 8012b96:	4908      	ldr	r1, [pc, #32]	; (8012bb8 <tcpip_tcp_timer+0x40>)
 8012b98:	20fa      	movs	r0, #250	; 0xfa
 8012b9a:	f000 f86f 	bl	8012c7c <sys_timeout>
 8012b9e:	e002      	b.n	8012ba6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012ba0:	4b06      	ldr	r3, [pc, #24]	; (8012bbc <tcpip_tcp_timer+0x44>)
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	601a      	str	r2, [r3, #0]
  }
}
 8012ba6:	bf00      	nop
 8012ba8:	3708      	adds	r7, #8
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	2000b100 	.word	0x2000b100
 8012bb4:	2000b110 	.word	0x2000b110
 8012bb8:	08012b79 	.word	0x08012b79
 8012bbc:	2000425c 	.word	0x2000425c

08012bc0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012bc4:	4b0a      	ldr	r3, [pc, #40]	; (8012bf0 <tcp_timer_needed+0x30>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10f      	bne.n	8012bec <tcp_timer_needed+0x2c>
 8012bcc:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <tcp_timer_needed+0x34>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d103      	bne.n	8012bdc <tcp_timer_needed+0x1c>
 8012bd4:	4b08      	ldr	r3, [pc, #32]	; (8012bf8 <tcp_timer_needed+0x38>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d007      	beq.n	8012bec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012bdc:	4b04      	ldr	r3, [pc, #16]	; (8012bf0 <tcp_timer_needed+0x30>)
 8012bde:	2201      	movs	r2, #1
 8012be0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012be2:	2200      	movs	r2, #0
 8012be4:	4905      	ldr	r1, [pc, #20]	; (8012bfc <tcp_timer_needed+0x3c>)
 8012be6:	20fa      	movs	r0, #250	; 0xfa
 8012be8:	f000 f848 	bl	8012c7c <sys_timeout>
  }
}
 8012bec:	bf00      	nop
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	2000425c 	.word	0x2000425c
 8012bf4:	2000b100 	.word	0x2000b100
 8012bf8:	2000b110 	.word	0x2000b110
 8012bfc:	08012b79 	.word	0x08012b79

08012c00 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	4903      	ldr	r1, [pc, #12]	; (8012c28 <cyclic_timer+0x28>)
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f000 f82e 	bl	8012c7c <sys_timeout>
}
 8012c20:	bf00      	nop
 8012c22:	3710      	adds	r7, #16
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	08012c01 	.word	0x08012c01

08012c2c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012c32:	2301      	movs	r3, #1
 8012c34:	607b      	str	r3, [r7, #4]
 8012c36:	e00e      	b.n	8012c56 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012c38:	4a0d      	ldr	r2, [pc, #52]	; (8012c70 <sys_timeouts_init+0x44>)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	4a0a      	ldr	r2, [pc, #40]	; (8012c70 <sys_timeouts_init+0x44>)
 8012c46:	4413      	add	r3, r2
 8012c48:	461a      	mov	r2, r3
 8012c4a:	490a      	ldr	r1, [pc, #40]	; (8012c74 <sys_timeouts_init+0x48>)
 8012c4c:	f000 f816 	bl	8012c7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	3301      	adds	r3, #1
 8012c54:	607b      	str	r3, [r7, #4]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2b02      	cmp	r3, #2
 8012c5a:	d9ed      	bls.n	8012c38 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012c5c:	f7f3 ffe0 	bl	8006c20 <sys_now>
 8012c60:	4602      	mov	r2, r0
 8012c62:	4b05      	ldr	r3, [pc, #20]	; (8012c78 <sys_timeouts_init+0x4c>)
 8012c64:	601a      	str	r2, [r3, #0]
}
 8012c66:	bf00      	nop
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	0801d5c4 	.word	0x0801d5c4
 8012c74:	08012c01 	.word	0x08012c01
 8012c78:	20004258 	.word	0x20004258

08012c7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b088      	sub	sp, #32
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012c88:	200a      	movs	r0, #10
 8012c8a:	f7f9 fd61 	bl	800c750 <memp_malloc>
 8012c8e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d10a      	bne.n	8012cac <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f040 8084 	bne.w	8012da6 <sys_timeout+0x12a>
 8012c9e:	4b44      	ldr	r3, [pc, #272]	; (8012db0 <sys_timeout+0x134>)
 8012ca0:	22d4      	movs	r2, #212	; 0xd4
 8012ca2:	4944      	ldr	r1, [pc, #272]	; (8012db4 <sys_timeout+0x138>)
 8012ca4:	4844      	ldr	r0, [pc, #272]	; (8012db8 <sys_timeout+0x13c>)
 8012ca6:	f002 ffdf 	bl	8015c68 <iprintf>
    return;
 8012caa:	e07c      	b.n	8012da6 <sys_timeout+0x12a>
  }

  now = sys_now();
 8012cac:	f7f3 ffb8 	bl	8006c20 <sys_now>
 8012cb0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012cb2:	4b42      	ldr	r3, [pc, #264]	; (8012dbc <sys_timeout+0x140>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d105      	bne.n	8012cc6 <sys_timeout+0x4a>
    diff = 0;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012cbe:	4a40      	ldr	r2, [pc, #256]	; (8012dc0 <sys_timeout+0x144>)
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	6013      	str	r3, [r2, #0]
 8012cc4:	e004      	b.n	8012cd0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012cc6:	4b3e      	ldr	r3, [pc, #248]	; (8012dc0 <sys_timeout+0x144>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	693a      	ldr	r2, [r7, #16]
 8012ccc:	1ad3      	subs	r3, r2, r3
 8012cce:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012ce2:	68fa      	ldr	r2, [r7, #12]
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	441a      	add	r2, r3
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012cec:	4b33      	ldr	r3, [pc, #204]	; (8012dbc <sys_timeout+0x140>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d103      	bne.n	8012cfc <sys_timeout+0x80>
    next_timeout = timeout;
 8012cf4:	4a31      	ldr	r2, [pc, #196]	; (8012dbc <sys_timeout+0x140>)
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	6013      	str	r3, [r2, #0]
    return;
 8012cfa:	e055      	b.n	8012da8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012cfc:	4b2f      	ldr	r3, [pc, #188]	; (8012dbc <sys_timeout+0x140>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	68fa      	ldr	r2, [r7, #12]
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d20f      	bcs.n	8012d28 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8012d08:	4b2c      	ldr	r3, [pc, #176]	; (8012dbc <sys_timeout+0x140>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	6859      	ldr	r1, [r3, #4]
 8012d0e:	4b2b      	ldr	r3, [pc, #172]	; (8012dbc <sys_timeout+0x140>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	68fa      	ldr	r2, [r7, #12]
 8012d14:	1a8a      	subs	r2, r1, r2
 8012d16:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8012d18:	4b28      	ldr	r3, [pc, #160]	; (8012dbc <sys_timeout+0x140>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012d20:	4a26      	ldr	r2, [pc, #152]	; (8012dbc <sys_timeout+0x140>)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	e03f      	b.n	8012da8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d28:	4b24      	ldr	r3, [pc, #144]	; (8012dbc <sys_timeout+0x140>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	61fb      	str	r3, [r7, #28]
 8012d2e:	e036      	b.n	8012d9e <sys_timeout+0x122>
      timeout->time -= t->time;
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	1ad2      	subs	r2, r2, r3
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d006      	beq.n	8012d54 <sys_timeout+0xd8>
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	685a      	ldr	r2, [r3, #4]
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d921      	bls.n	8012d98 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d009      	beq.n	8012d70 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	6859      	ldr	r1, [r3, #4]
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	685a      	ldr	r2, [r3, #4]
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	1a8a      	subs	r2, r1, r2
 8012d6c:	605a      	str	r2, [r3, #4]
 8012d6e:	e00b      	b.n	8012d88 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	68fa      	ldr	r2, [r7, #12]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d206      	bcs.n	8012d88 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012d7a:	4b10      	ldr	r3, [pc, #64]	; (8012dbc <sys_timeout+0x140>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	685a      	ldr	r2, [r3, #4]
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	441a      	add	r2, r3
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	681a      	ldr	r2, [r3, #0]
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	697a      	ldr	r2, [r7, #20]
 8012d94:	601a      	str	r2, [r3, #0]
        break;
 8012d96:	e007      	b.n	8012da8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	61fb      	str	r3, [r7, #28]
 8012d9e:	69fb      	ldr	r3, [r7, #28]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1c5      	bne.n	8012d30 <sys_timeout+0xb4>
 8012da4:	e000      	b.n	8012da8 <sys_timeout+0x12c>
    return;
 8012da6:	bf00      	nop
      }
    }
  }
}
 8012da8:	3720      	adds	r7, #32
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	08019148 	.word	0x08019148
 8012db4:	0801917c 	.word	0x0801917c
 8012db8:	080191bc 	.word	0x080191bc
 8012dbc:	20004254 	.word	0x20004254
 8012dc0:	20004258 	.word	0x20004258

08012dc4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b086      	sub	sp, #24
 8012dc8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8012dca:	4b24      	ldr	r3, [pc, #144]	; (8012e5c <sys_check_timeouts+0x98>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d03f      	beq.n	8012e52 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8012dd2:	f7f3 ff25 	bl	8006c20 <sys_now>
 8012dd6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8012dd8:	4b21      	ldr	r3, [pc, #132]	; (8012e60 <sys_check_timeouts+0x9c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8012de6:	4b1d      	ldr	r3, [pc, #116]	; (8012e5c <sys_check_timeouts+0x98>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d02c      	beq.n	8012e4c <sys_check_timeouts+0x88>
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	697a      	ldr	r2, [r7, #20]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d327      	bcc.n	8012e4c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	685a      	ldr	r2, [r3, #4]
 8012e04:	4b16      	ldr	r3, [pc, #88]	; (8012e60 <sys_check_timeouts+0x9c>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4413      	add	r3, r2
 8012e0a:	4a15      	ldr	r2, [pc, #84]	; (8012e60 <sys_check_timeouts+0x9c>)
 8012e0c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	697a      	ldr	r2, [r7, #20]
 8012e14:	1ad3      	subs	r3, r2, r3
 8012e16:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4a0f      	ldr	r2, [pc, #60]	; (8012e5c <sys_check_timeouts+0x98>)
 8012e1e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	689b      	ldr	r3, [r3, #8]
 8012e24:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012e2c:	68b9      	ldr	r1, [r7, #8]
 8012e2e:	200a      	movs	r0, #10
 8012e30:	f7f9 fce0 	bl	800c7f4 <memp_free>
        if (handler != NULL) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d008      	beq.n	8012e4c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8012e3a:	480a      	ldr	r0, [pc, #40]	; (8012e64 <sys_check_timeouts+0xa0>)
 8012e3c:	f002 fe6a 	bl	8015b14 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6838      	ldr	r0, [r7, #0]
 8012e44:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8012e46:	4807      	ldr	r0, [pc, #28]	; (8012e64 <sys_check_timeouts+0xa0>)
 8012e48:	f002 fe73 	bl	8015b32 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012e4c:	7cfb      	ldrb	r3, [r7, #19]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d1c7      	bne.n	8012de2 <sys_check_timeouts+0x1e>
  }
}
 8012e52:	bf00      	nop
 8012e54:	3718      	adds	r7, #24
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	20004254 	.word	0x20004254
 8012e60:	20004258 	.word	0x20004258
 8012e64:	200079ec 	.word	0x200079ec

08012e68 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8012e6e:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <sys_timeouts_sleeptime+0x44>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d102      	bne.n	8012e7c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8012e76:	f04f 33ff 	mov.w	r3, #4294967295
 8012e7a:	e013      	b.n	8012ea4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8012e7c:	f7f3 fed0 	bl	8006c20 <sys_now>
 8012e80:	4602      	mov	r2, r0
 8012e82:	4b0b      	ldr	r3, [pc, #44]	; (8012eb0 <sys_timeouts_sleeptime+0x48>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8012e8a:	4b08      	ldr	r3, [pc, #32]	; (8012eac <sys_timeouts_sleeptime+0x44>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d901      	bls.n	8012e9a <sys_timeouts_sleeptime+0x32>
    return 0;
 8012e96:	2300      	movs	r3, #0
 8012e98:	e004      	b.n	8012ea4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8012e9a:	4b04      	ldr	r3, [pc, #16]	; (8012eac <sys_timeouts_sleeptime+0x44>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	685a      	ldr	r2, [r3, #4]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	1ad3      	subs	r3, r2, r3
  }
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	20004254 	.word	0x20004254
 8012eb0:	20004258 	.word	0x20004258

08012eb4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8012ebe:	4b0f      	ldr	r3, [pc, #60]	; (8012efc <sys_timeouts_mbox_fetch+0x48>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d105      	bne.n	8012ed2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	6839      	ldr	r1, [r7, #0]
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f002 fced 	bl	80158aa <sys_arch_mbox_fetch>
    return;
 8012ed0:	e011      	b.n	8012ef6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8012ed2:	f7ff ffc9 	bl	8012e68 <sys_timeouts_sleeptime>
 8012ed6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d008      	beq.n	8012ef0 <sys_timeouts_mbox_fetch+0x3c>
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	6839      	ldr	r1, [r7, #0]
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f002 fce1 	bl	80158aa <sys_arch_mbox_fetch>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eee:	d102      	bne.n	8012ef6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012ef0:	f7ff ff68 	bl	8012dc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012ef4:	e7e3      	b.n	8012ebe <sys_timeouts_mbox_fetch+0xa>
  }
}
 8012ef6:	3710      	adds	r7, #16
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	20004254 	.word	0x20004254

08012f00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012f00:	b480      	push	{r7}
 8012f02:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012f04:	bf00      	nop
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr
	...

08012f10 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b083      	sub	sp, #12
 8012f14:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012f1a:	4b17      	ldr	r3, [pc, #92]	; (8012f78 <udp_new_port+0x68>)
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	1c5a      	adds	r2, r3, #1
 8012f20:	b291      	uxth	r1, r2
 8012f22:	4a15      	ldr	r2, [pc, #84]	; (8012f78 <udp_new_port+0x68>)
 8012f24:	8011      	strh	r1, [r2, #0]
 8012f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d103      	bne.n	8012f36 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012f2e:	4b12      	ldr	r3, [pc, #72]	; (8012f78 <udp_new_port+0x68>)
 8012f30:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012f34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f36:	4b11      	ldr	r3, [pc, #68]	; (8012f7c <udp_new_port+0x6c>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	603b      	str	r3, [r7, #0]
 8012f3c:	e011      	b.n	8012f62 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	8a5a      	ldrh	r2, [r3, #18]
 8012f42:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <udp_new_port+0x68>)
 8012f44:	881b      	ldrh	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d108      	bne.n	8012f5c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012f4a:	88fb      	ldrh	r3, [r7, #6]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	80fb      	strh	r3, [r7, #6]
 8012f50:	88fb      	ldrh	r3, [r7, #6]
 8012f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f56:	d3e0      	bcc.n	8012f1a <udp_new_port+0xa>
        return 0;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	e007      	b.n	8012f6c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	603b      	str	r3, [r7, #0]
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d1ea      	bne.n	8012f3e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012f68:	4b03      	ldr	r3, [pc, #12]	; (8012f78 <udp_new_port+0x68>)
 8012f6a:	881b      	ldrh	r3, [r3, #0]
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	370c      	adds	r7, #12
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr
 8012f78:	20000030 	.word	0x20000030
 8012f7c:	2000b118 	.word	0x2000b118

08012f80 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b085      	sub	sp, #20
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012f8e:	79fb      	ldrb	r3, [r7, #7]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d018      	beq.n	8012fc6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d013      	beq.n	8012fc2 <udp_input_local_match+0x42>
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00f      	beq.n	8012fc2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fa2:	4b14      	ldr	r3, [pc, #80]	; (8012ff4 <udp_input_local_match+0x74>)
 8012fa4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012faa:	d00a      	beq.n	8012fc2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	4b10      	ldr	r3, [pc, #64]	; (8012ff4 <udp_input_local_match+0x74>)
 8012fb2:	695b      	ldr	r3, [r3, #20]
 8012fb4:	405a      	eors	r2, r3
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	3308      	adds	r3, #8
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d110      	bne.n	8012fe4 <udp_input_local_match+0x64>
          return 1;
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e00f      	b.n	8012fe6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d009      	beq.n	8012fe0 <udp_input_local_match+0x60>
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d005      	beq.n	8012fe0 <udp_input_local_match+0x60>
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	4b06      	ldr	r3, [pc, #24]	; (8012ff4 <udp_input_local_match+0x74>)
 8012fda:	695b      	ldr	r3, [r3, #20]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d101      	bne.n	8012fe4 <udp_input_local_match+0x64>
      return 1;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e000      	b.n	8012fe6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3714      	adds	r7, #20
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	200079f0 	.word	0x200079f0

08012ff8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012ff8:	b590      	push	{r4, r7, lr}
 8012ffa:	b08d      	sub	sp, #52	; 0x34
 8012ffc:	af02      	add	r7, sp, #8
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013002:	2300      	movs	r3, #0
 8013004:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	895b      	ldrh	r3, [r3, #10]
 801300a:	2b07      	cmp	r3, #7
 801300c:	d803      	bhi.n	8013016 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7fa f94a 	bl	800d2a8 <pbuf_free>
    goto end;
 8013014:	e0c6      	b.n	80131a4 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801301c:	4b63      	ldr	r3, [pc, #396]	; (80131ac <udp_input+0x1b4>)
 801301e:	695a      	ldr	r2, [r3, #20]
 8013020:	4b62      	ldr	r3, [pc, #392]	; (80131ac <udp_input+0x1b4>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4619      	mov	r1, r3
 8013026:	4610      	mov	r0, r2
 8013028:	f001 fcf2 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 801302c:	4603      	mov	r3, r0
 801302e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	b29b      	uxth	r3, r3
 8013036:	4618      	mov	r0, r3
 8013038:	f7f8 ff9c 	bl	800bf74 <lwip_htons>
 801303c:	4603      	mov	r3, r0
 801303e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	885b      	ldrh	r3, [r3, #2]
 8013044:	b29b      	uxth	r3, r3
 8013046:	4618      	mov	r0, r3
 8013048:	f7f8 ff94 	bl	800bf74 <lwip_htons>
 801304c:	4603      	mov	r3, r0
 801304e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013050:	2300      	movs	r3, #0
 8013052:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013054:	2300      	movs	r3, #0
 8013056:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013058:	2300      	movs	r3, #0
 801305a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801305c:	4b54      	ldr	r3, [pc, #336]	; (80131b0 <udp_input+0x1b8>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	627b      	str	r3, [r7, #36]	; 0x24
 8013062:	e03b      	b.n	80130dc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013066:	8a5b      	ldrh	r3, [r3, #18]
 8013068:	89fa      	ldrh	r2, [r7, #14]
 801306a:	429a      	cmp	r2, r3
 801306c:	d131      	bne.n	80130d2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801306e:	7cfb      	ldrb	r3, [r7, #19]
 8013070:	461a      	mov	r2, r3
 8013072:	6839      	ldr	r1, [r7, #0]
 8013074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013076:	f7ff ff83 	bl	8012f80 <udp_input_local_match>
 801307a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801307c:	2b00      	cmp	r3, #0
 801307e:	d028      	beq.n	80130d2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8013080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013082:	7c1b      	ldrb	r3, [r3, #16]
 8013084:	f003 0304 	and.w	r3, r3, #4
 8013088:	2b00      	cmp	r3, #0
 801308a:	d104      	bne.n	8013096 <udp_input+0x9e>
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d101      	bne.n	8013096 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8013092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013094:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013098:	8a9b      	ldrh	r3, [r3, #20]
 801309a:	8a3a      	ldrh	r2, [r7, #16]
 801309c:	429a      	cmp	r2, r3
 801309e:	d118      	bne.n	80130d2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d005      	beq.n	80130b4 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80130a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130aa:	685a      	ldr	r2, [r3, #4]
 80130ac:	4b3f      	ldr	r3, [pc, #252]	; (80131ac <udp_input+0x1b4>)
 80130ae:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d10e      	bne.n	80130d2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80130b4:	6a3b      	ldr	r3, [r7, #32]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d014      	beq.n	80130e4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80130ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130bc:	68da      	ldr	r2, [r3, #12]
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80130c2:	4b3b      	ldr	r3, [pc, #236]	; (80131b0 <udp_input+0x1b8>)
 80130c4:	681a      	ldr	r2, [r3, #0]
 80130c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80130ca:	4a39      	ldr	r2, [pc, #228]	; (80131b0 <udp_input+0x1b8>)
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80130d0:	e008      	b.n	80130e4 <udp_input+0xec>
      }
    }

    prev = pcb;
 80130d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	627b      	str	r3, [r7, #36]	; 0x24
 80130dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d1c0      	bne.n	8013064 <udp_input+0x6c>
 80130e2:	e000      	b.n	80130e6 <udp_input+0xee>
        break;
 80130e4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80130e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <udp_input+0xf8>
    pcb = uncon_pcb;
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d002      	beq.n	80130fc <udp_input+0x104>
    for_us = 1;
 80130f6:	2301      	movs	r3, #1
 80130f8:	76fb      	strb	r3, [r7, #27]
 80130fa:	e00a      	b.n	8013112 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	3304      	adds	r3, #4
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	4b2a      	ldr	r3, [pc, #168]	; (80131ac <udp_input+0x1b4>)
 8013104:	695b      	ldr	r3, [r3, #20]
 8013106:	429a      	cmp	r2, r3
 8013108:	bf0c      	ite	eq
 801310a:	2301      	moveq	r3, #1
 801310c:	2300      	movne	r3, #0
 801310e:	b2db      	uxtb	r3, r3
 8013110:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013112:	7efb      	ldrb	r3, [r7, #27]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d042      	beq.n	801319e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8013118:	f06f 0107 	mvn.w	r1, #7
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7fa f89f 	bl	800d260 <pbuf_header>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d00a      	beq.n	801313e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8013128:	4b22      	ldr	r3, [pc, #136]	; (80131b4 <udp_input+0x1bc>)
 801312a:	f240 1255 	movw	r2, #341	; 0x155
 801312e:	4922      	ldr	r1, [pc, #136]	; (80131b8 <udp_input+0x1c0>)
 8013130:	4822      	ldr	r0, [pc, #136]	; (80131bc <udp_input+0x1c4>)
 8013132:	f002 fd99 	bl	8015c68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7fa f8b6 	bl	800d2a8 <pbuf_free>
      goto end;
 801313c:	e032      	b.n	80131a4 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	2b00      	cmp	r3, #0
 8013142:	d012      	beq.n	801316a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00a      	beq.n	8013162 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314e:	699c      	ldr	r4, [r3, #24]
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	69d8      	ldr	r0, [r3, #28]
 8013154:	8a3b      	ldrh	r3, [r7, #16]
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	4b19      	ldr	r3, [pc, #100]	; (80131c0 <udp_input+0x1c8>)
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801315e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013160:	e021      	b.n	80131a6 <udp_input+0x1ae>
        pbuf_free(p);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7fa f8a0 	bl	800d2a8 <pbuf_free>
        goto end;
 8013168:	e01c      	b.n	80131a4 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801316a:	7cfb      	ldrb	r3, [r7, #19]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d112      	bne.n	8013196 <udp_input+0x19e>
 8013170:	4b0e      	ldr	r3, [pc, #56]	; (80131ac <udp_input+0x1b4>)
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013178:	2be0      	cmp	r3, #224	; 0xe0
 801317a:	d00c      	beq.n	8013196 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801317c:	4b0b      	ldr	r3, [pc, #44]	; (80131ac <udp_input+0x1b4>)
 801317e:	899b      	ldrh	r3, [r3, #12]
 8013180:	3308      	adds	r3, #8
 8013182:	b29b      	uxth	r3, r3
 8013184:	b21b      	sxth	r3, r3
 8013186:	4619      	mov	r1, r3
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f7fa f87b 	bl	800d284 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801318e:	2103      	movs	r1, #3
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f001 f93b 	bl	801440c <icmp_dest_unreach>
      pbuf_free(p);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7fa f886 	bl	800d2a8 <pbuf_free>
  return;
 801319c:	e003      	b.n	80131a6 <udp_input+0x1ae>
    pbuf_free(p);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7fa f882 	bl	800d2a8 <pbuf_free>
  return;
 80131a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80131a6:	372c      	adds	r7, #44	; 0x2c
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd90      	pop	{r4, r7, pc}
 80131ac:	200079f0 	.word	0x200079f0
 80131b0:	2000b118 	.word	0x2000b118
 80131b4:	080191e4 	.word	0x080191e4
 80131b8:	08019214 	.word	0x08019214
 80131bc:	08019228 	.word	0x08019228
 80131c0:	20007a00 	.word	0x20007a00

080131c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b086      	sub	sp, #24
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	4613      	mov	r3, r2
 80131d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d101      	bne.n	80131dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80131d8:	4b30      	ldr	r3, [pc, #192]	; (801329c <udp_bind+0xd8>)
 80131da:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d002      	beq.n	80131e8 <udp_bind+0x24>
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d102      	bne.n	80131ee <udp_bind+0x2a>
    return ERR_VAL;
 80131e8:	f06f 0305 	mvn.w	r3, #5
 80131ec:	e052      	b.n	8013294 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80131ee:	2300      	movs	r3, #0
 80131f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131f2:	4b2b      	ldr	r3, [pc, #172]	; (80132a0 <udp_bind+0xdc>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	617b      	str	r3, [r7, #20]
 80131f8:	e009      	b.n	801320e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80131fa:	68fa      	ldr	r2, [r7, #12]
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d102      	bne.n	8013208 <udp_bind+0x44>
      rebind = 1;
 8013202:	2301      	movs	r3, #1
 8013204:	74fb      	strb	r3, [r7, #19]
      break;
 8013206:	e005      	b.n	8013214 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	617b      	str	r3, [r7, #20]
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d1f2      	bne.n	80131fa <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8013214:	88fb      	ldrh	r3, [r7, #6]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d109      	bne.n	801322e <udp_bind+0x6a>
    port = udp_new_port();
 801321a:	f7ff fe79 	bl	8012f10 <udp_new_port>
 801321e:	4603      	mov	r3, r0
 8013220:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013222:	88fb      	ldrh	r3, [r7, #6]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d11e      	bne.n	8013266 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013228:	f06f 0307 	mvn.w	r3, #7
 801322c:	e032      	b.n	8013294 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801322e:	4b1c      	ldr	r3, [pc, #112]	; (80132a0 <udp_bind+0xdc>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	617b      	str	r3, [r7, #20]
 8013234:	e014      	b.n	8013260 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	429a      	cmp	r2, r3
 801323c:	d00d      	beq.n	801325a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	8a5b      	ldrh	r3, [r3, #18]
 8013242:	88fa      	ldrh	r2, [r7, #6]
 8013244:	429a      	cmp	r2, r3
 8013246:	d108      	bne.n	801325a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013250:	429a      	cmp	r2, r3
 8013252:	d102      	bne.n	801325a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013254:	f06f 0307 	mvn.w	r3, #7
 8013258:	e01c      	b.n	8013294 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	617b      	str	r3, [r7, #20]
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d1e7      	bne.n	8013236 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d002      	beq.n	8013272 <udp_bind+0xae>
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	e000      	b.n	8013274 <udp_bind+0xb0>
 8013272:	2300      	movs	r3, #0
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	88fa      	ldrh	r2, [r7, #6]
 801327c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801327e:	7cfb      	ldrb	r3, [r7, #19]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d106      	bne.n	8013292 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013284:	4b06      	ldr	r3, [pc, #24]	; (80132a0 <udp_bind+0xdc>)
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801328c:	4a04      	ldr	r2, [pc, #16]	; (80132a0 <udp_bind+0xdc>)
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013292:	2300      	movs	r3, #0
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	0801d5dc 	.word	0x0801d5dc
 80132a0:	2000b118 	.word	0x2000b118

080132a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	68ba      	ldr	r2, [r7, #8]
 80132b4:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	61da      	str	r2, [r3, #28]
}
 80132bc:	bf00      	nop
 80132be:	3714      	adds	r7, #20
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr

080132c8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80132d0:	4b15      	ldr	r3, [pc, #84]	; (8013328 <udp_remove+0x60>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d105      	bne.n	80132e6 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80132da:	4b13      	ldr	r3, [pc, #76]	; (8013328 <udp_remove+0x60>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	68db      	ldr	r3, [r3, #12]
 80132e0:	4a11      	ldr	r2, [pc, #68]	; (8013328 <udp_remove+0x60>)
 80132e2:	6013      	str	r3, [r2, #0]
 80132e4:	e017      	b.n	8013316 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80132e6:	4b10      	ldr	r3, [pc, #64]	; (8013328 <udp_remove+0x60>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	60fb      	str	r3, [r7, #12]
 80132ec:	e010      	b.n	8013310 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	68db      	ldr	r3, [r3, #12]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d009      	beq.n	801330a <udp_remove+0x42>
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d104      	bne.n	801330a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	68da      	ldr	r2, [r3, #12]
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	60da      	str	r2, [r3, #12]
        break;
 8013308:	e005      	b.n	8013316 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	60fb      	str	r3, [r7, #12]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d1eb      	bne.n	80132ee <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013316:	6879      	ldr	r1, [r7, #4]
 8013318:	2000      	movs	r0, #0
 801331a:	f7f9 fa6b 	bl	800c7f4 <memp_free>
}
 801331e:	bf00      	nop
 8013320:	3710      	adds	r7, #16
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	2000b118 	.word	0x2000b118

0801332c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013332:	2000      	movs	r0, #0
 8013334:	f7f9 fa0c 	bl	800c750 <memp_malloc>
 8013338:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d007      	beq.n	8013350 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013340:	2220      	movs	r2, #32
 8013342:	2100      	movs	r1, #0
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f002 fc87 	bl	8015c58 <memset>
    pcb->ttl = UDP_TTL;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	22ff      	movs	r2, #255	; 0xff
 801334e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013350:	687b      	ldr	r3, [r7, #4]
}
 8013352:	4618      	mov	r0, r3
 8013354:	3708      	adds	r7, #8
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801335a:	b580      	push	{r7, lr}
 801335c:	b084      	sub	sp, #16
 801335e:	af00      	add	r7, sp, #0
 8013360:	4603      	mov	r3, r0
 8013362:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8013364:	f7ff ffe2 	bl	801332c <udp_new>
 8013368:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801336a:	68fb      	ldr	r3, [r7, #12]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8013374:	b480      	push	{r7}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d01e      	beq.n	80133c2 <udp_netif_ip_addr_changed+0x4e>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d01a      	beq.n	80133c2 <udp_netif_ip_addr_changed+0x4e>
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d017      	beq.n	80133c2 <udp_netif_ip_addr_changed+0x4e>
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d013      	beq.n	80133c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801339a:	4b0d      	ldr	r3, [pc, #52]	; (80133d0 <udp_netif_ip_addr_changed+0x5c>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	60fb      	str	r3, [r7, #12]
 80133a0:	e00c      	b.n	80133bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d103      	bne.n	80133b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	681a      	ldr	r2, [r3, #0]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d1ef      	bne.n	80133a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80133c2:	bf00      	nop
 80133c4:	3714      	adds	r7, #20
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	2000b118 	.word	0x2000b118

080133d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80133dc:	4915      	ldr	r1, [pc, #84]	; (8013434 <etharp_free_entry+0x60>)
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	4613      	mov	r3, r2
 80133e2:	005b      	lsls	r3, r3, #1
 80133e4:	4413      	add	r3, r2
 80133e6:	00db      	lsls	r3, r3, #3
 80133e8:	440b      	add	r3, r1
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d013      	beq.n	8013418 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80133f0:	4910      	ldr	r1, [pc, #64]	; (8013434 <etharp_free_entry+0x60>)
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	4613      	mov	r3, r2
 80133f6:	005b      	lsls	r3, r3, #1
 80133f8:	4413      	add	r3, r2
 80133fa:	00db      	lsls	r3, r3, #3
 80133fc:	440b      	add	r3, r1
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4618      	mov	r0, r3
 8013402:	f7f9 ff51 	bl	800d2a8 <pbuf_free>
    arp_table[i].q = NULL;
 8013406:	490b      	ldr	r1, [pc, #44]	; (8013434 <etharp_free_entry+0x60>)
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	4613      	mov	r3, r2
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	4413      	add	r3, r2
 8013410:	00db      	lsls	r3, r3, #3
 8013412:	440b      	add	r3, r1
 8013414:	2200      	movs	r2, #0
 8013416:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013418:	4906      	ldr	r1, [pc, #24]	; (8013434 <etharp_free_entry+0x60>)
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	4613      	mov	r3, r2
 801341e:	005b      	lsls	r3, r3, #1
 8013420:	4413      	add	r3, r2
 8013422:	00db      	lsls	r3, r3, #3
 8013424:	440b      	add	r3, r1
 8013426:	3314      	adds	r3, #20
 8013428:	2200      	movs	r2, #0
 801342a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801342c:	bf00      	nop
 801342e:	3708      	adds	r7, #8
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	20004260 	.word	0x20004260

08013438 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801343e:	2300      	movs	r3, #0
 8013440:	71fb      	strb	r3, [r7, #7]
 8013442:	e096      	b.n	8013572 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013444:	79fa      	ldrb	r2, [r7, #7]
 8013446:	494f      	ldr	r1, [pc, #316]	; (8013584 <etharp_tmr+0x14c>)
 8013448:	4613      	mov	r3, r2
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	4413      	add	r3, r2
 801344e:	00db      	lsls	r3, r3, #3
 8013450:	440b      	add	r3, r1
 8013452:	3314      	adds	r3, #20
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8013458:	79bb      	ldrb	r3, [r7, #6]
 801345a:	2b00      	cmp	r3, #0
 801345c:	f000 8086 	beq.w	801356c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8013460:	79fa      	ldrb	r2, [r7, #7]
 8013462:	4948      	ldr	r1, [pc, #288]	; (8013584 <etharp_tmr+0x14c>)
 8013464:	4613      	mov	r3, r2
 8013466:	005b      	lsls	r3, r3, #1
 8013468:	4413      	add	r3, r2
 801346a:	00db      	lsls	r3, r3, #3
 801346c:	440b      	add	r3, r1
 801346e:	3312      	adds	r3, #18
 8013470:	881b      	ldrh	r3, [r3, #0]
 8013472:	3301      	adds	r3, #1
 8013474:	b298      	uxth	r0, r3
 8013476:	4943      	ldr	r1, [pc, #268]	; (8013584 <etharp_tmr+0x14c>)
 8013478:	4613      	mov	r3, r2
 801347a:	005b      	lsls	r3, r3, #1
 801347c:	4413      	add	r3, r2
 801347e:	00db      	lsls	r3, r3, #3
 8013480:	440b      	add	r3, r1
 8013482:	3312      	adds	r3, #18
 8013484:	4602      	mov	r2, r0
 8013486:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013488:	79fa      	ldrb	r2, [r7, #7]
 801348a:	493e      	ldr	r1, [pc, #248]	; (8013584 <etharp_tmr+0x14c>)
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	3312      	adds	r3, #18
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801349e:	d215      	bcs.n	80134cc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80134a0:	79fa      	ldrb	r2, [r7, #7]
 80134a2:	4938      	ldr	r1, [pc, #224]	; (8013584 <etharp_tmr+0x14c>)
 80134a4:	4613      	mov	r3, r2
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	4413      	add	r3, r2
 80134aa:	00db      	lsls	r3, r3, #3
 80134ac:	440b      	add	r3, r1
 80134ae:	3314      	adds	r3, #20
 80134b0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d10f      	bne.n	80134d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80134b6:	79fa      	ldrb	r2, [r7, #7]
 80134b8:	4932      	ldr	r1, [pc, #200]	; (8013584 <etharp_tmr+0x14c>)
 80134ba:	4613      	mov	r3, r2
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	4413      	add	r3, r2
 80134c0:	00db      	lsls	r3, r3, #3
 80134c2:	440b      	add	r3, r1
 80134c4:	3312      	adds	r3, #18
 80134c6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80134c8:	2b04      	cmp	r3, #4
 80134ca:	d904      	bls.n	80134d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80134cc:	79fb      	ldrb	r3, [r7, #7]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff ff80 	bl	80133d4 <etharp_free_entry>
 80134d4:	e04a      	b.n	801356c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80134d6:	79fa      	ldrb	r2, [r7, #7]
 80134d8:	492a      	ldr	r1, [pc, #168]	; (8013584 <etharp_tmr+0x14c>)
 80134da:	4613      	mov	r3, r2
 80134dc:	005b      	lsls	r3, r3, #1
 80134de:	4413      	add	r3, r2
 80134e0:	00db      	lsls	r3, r3, #3
 80134e2:	440b      	add	r3, r1
 80134e4:	3314      	adds	r3, #20
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	2b03      	cmp	r3, #3
 80134ea:	d10a      	bne.n	8013502 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80134ec:	79fa      	ldrb	r2, [r7, #7]
 80134ee:	4925      	ldr	r1, [pc, #148]	; (8013584 <etharp_tmr+0x14c>)
 80134f0:	4613      	mov	r3, r2
 80134f2:	005b      	lsls	r3, r3, #1
 80134f4:	4413      	add	r3, r2
 80134f6:	00db      	lsls	r3, r3, #3
 80134f8:	440b      	add	r3, r1
 80134fa:	3314      	adds	r3, #20
 80134fc:	2204      	movs	r2, #4
 80134fe:	701a      	strb	r2, [r3, #0]
 8013500:	e034      	b.n	801356c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013502:	79fa      	ldrb	r2, [r7, #7]
 8013504:	491f      	ldr	r1, [pc, #124]	; (8013584 <etharp_tmr+0x14c>)
 8013506:	4613      	mov	r3, r2
 8013508:	005b      	lsls	r3, r3, #1
 801350a:	4413      	add	r3, r2
 801350c:	00db      	lsls	r3, r3, #3
 801350e:	440b      	add	r3, r1
 8013510:	3314      	adds	r3, #20
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	2b04      	cmp	r3, #4
 8013516:	d10a      	bne.n	801352e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013518:	79fa      	ldrb	r2, [r7, #7]
 801351a:	491a      	ldr	r1, [pc, #104]	; (8013584 <etharp_tmr+0x14c>)
 801351c:	4613      	mov	r3, r2
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	4413      	add	r3, r2
 8013522:	00db      	lsls	r3, r3, #3
 8013524:	440b      	add	r3, r1
 8013526:	3314      	adds	r3, #20
 8013528:	2202      	movs	r2, #2
 801352a:	701a      	strb	r2, [r3, #0]
 801352c:	e01e      	b.n	801356c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801352e:	79fa      	ldrb	r2, [r7, #7]
 8013530:	4914      	ldr	r1, [pc, #80]	; (8013584 <etharp_tmr+0x14c>)
 8013532:	4613      	mov	r3, r2
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	4413      	add	r3, r2
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	440b      	add	r3, r1
 801353c:	3314      	adds	r3, #20
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	2b01      	cmp	r3, #1
 8013542:	d113      	bne.n	801356c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013544:	79fa      	ldrb	r2, [r7, #7]
 8013546:	490f      	ldr	r1, [pc, #60]	; (8013584 <etharp_tmr+0x14c>)
 8013548:	4613      	mov	r3, r2
 801354a:	005b      	lsls	r3, r3, #1
 801354c:	4413      	add	r3, r2
 801354e:	00db      	lsls	r3, r3, #3
 8013550:	440b      	add	r3, r1
 8013552:	3308      	adds	r3, #8
 8013554:	6818      	ldr	r0, [r3, #0]
 8013556:	79fa      	ldrb	r2, [r7, #7]
 8013558:	4613      	mov	r3, r2
 801355a:	005b      	lsls	r3, r3, #1
 801355c:	4413      	add	r3, r2
 801355e:	00db      	lsls	r3, r3, #3
 8013560:	4a08      	ldr	r2, [pc, #32]	; (8013584 <etharp_tmr+0x14c>)
 8013562:	4413      	add	r3, r2
 8013564:	3304      	adds	r3, #4
 8013566:	4619      	mov	r1, r3
 8013568:	f000 fe38 	bl	80141dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801356c:	79fb      	ldrb	r3, [r7, #7]
 801356e:	3301      	adds	r3, #1
 8013570:	71fb      	strb	r3, [r7, #7]
 8013572:	79fb      	ldrb	r3, [r7, #7]
 8013574:	2b09      	cmp	r3, #9
 8013576:	f67f af65 	bls.w	8013444 <etharp_tmr+0xc>
      }
    }
  }
}
 801357a:	bf00      	nop
 801357c:	3708      	adds	r7, #8
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	20004260 	.word	0x20004260

08013588 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b088      	sub	sp, #32
 801358c:	af00      	add	r7, sp, #0
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	460b      	mov	r3, r1
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013596:	230a      	movs	r3, #10
 8013598:	77fb      	strb	r3, [r7, #31]
 801359a:	230a      	movs	r3, #10
 801359c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801359e:	230a      	movs	r3, #10
 80135a0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80135a6:	230a      	movs	r3, #10
 80135a8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	833b      	strh	r3, [r7, #24]
 80135ae:	2300      	movs	r3, #0
 80135b0:	82fb      	strh	r3, [r7, #22]
 80135b2:	2300      	movs	r3, #0
 80135b4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80135b6:	2300      	movs	r3, #0
 80135b8:	773b      	strb	r3, [r7, #28]
 80135ba:	e093      	b.n	80136e4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80135bc:	7f3a      	ldrb	r2, [r7, #28]
 80135be:	4990      	ldr	r1, [pc, #576]	; (8013800 <etharp_find_entry+0x278>)
 80135c0:	4613      	mov	r3, r2
 80135c2:	005b      	lsls	r3, r3, #1
 80135c4:	4413      	add	r3, r2
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	440b      	add	r3, r1
 80135ca:	3314      	adds	r3, #20
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80135d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80135d4:	2b0a      	cmp	r3, #10
 80135d6:	d105      	bne.n	80135e4 <etharp_find_entry+0x5c>
 80135d8:	7cfb      	ldrb	r3, [r7, #19]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d102      	bne.n	80135e4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80135de:	7f3b      	ldrb	r3, [r7, #28]
 80135e0:	777b      	strb	r3, [r7, #29]
 80135e2:	e07c      	b.n	80136de <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80135e4:	7cfb      	ldrb	r3, [r7, #19]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d079      	beq.n	80136de <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80135ea:	7cfb      	ldrb	r3, [r7, #19]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d009      	beq.n	8013604 <etharp_find_entry+0x7c>
 80135f0:	7cfb      	ldrb	r3, [r7, #19]
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d806      	bhi.n	8013604 <etharp_find_entry+0x7c>
 80135f6:	4b83      	ldr	r3, [pc, #524]	; (8013804 <etharp_find_entry+0x27c>)
 80135f8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80135fc:	4982      	ldr	r1, [pc, #520]	; (8013808 <etharp_find_entry+0x280>)
 80135fe:	4883      	ldr	r0, [pc, #524]	; (801380c <etharp_find_entry+0x284>)
 8013600:	f002 fb32 	bl	8015c68 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d00f      	beq.n	801362a <etharp_find_entry+0xa2>
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6819      	ldr	r1, [r3, #0]
 801360e:	7f3a      	ldrb	r2, [r7, #28]
 8013610:	487b      	ldr	r0, [pc, #492]	; (8013800 <etharp_find_entry+0x278>)
 8013612:	4613      	mov	r3, r2
 8013614:	005b      	lsls	r3, r3, #1
 8013616:	4413      	add	r3, r2
 8013618:	00db      	lsls	r3, r3, #3
 801361a:	4403      	add	r3, r0
 801361c:	3304      	adds	r3, #4
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4299      	cmp	r1, r3
 8013622:	d102      	bne.n	801362a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013624:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8013628:	e0e5      	b.n	80137f6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801362a:	7cfb      	ldrb	r3, [r7, #19]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d13b      	bne.n	80136a8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013630:	7f3a      	ldrb	r2, [r7, #28]
 8013632:	4973      	ldr	r1, [pc, #460]	; (8013800 <etharp_find_entry+0x278>)
 8013634:	4613      	mov	r3, r2
 8013636:	005b      	lsls	r3, r3, #1
 8013638:	4413      	add	r3, r2
 801363a:	00db      	lsls	r3, r3, #3
 801363c:	440b      	add	r3, r1
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d018      	beq.n	8013676 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8013644:	7f3a      	ldrb	r2, [r7, #28]
 8013646:	496e      	ldr	r1, [pc, #440]	; (8013800 <etharp_find_entry+0x278>)
 8013648:	4613      	mov	r3, r2
 801364a:	005b      	lsls	r3, r3, #1
 801364c:	4413      	add	r3, r2
 801364e:	00db      	lsls	r3, r3, #3
 8013650:	440b      	add	r3, r1
 8013652:	3312      	adds	r3, #18
 8013654:	881b      	ldrh	r3, [r3, #0]
 8013656:	8b3a      	ldrh	r2, [r7, #24]
 8013658:	429a      	cmp	r2, r3
 801365a:	d840      	bhi.n	80136de <etharp_find_entry+0x156>
            old_queue = i;
 801365c:	7f3b      	ldrb	r3, [r7, #28]
 801365e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8013660:	7f3a      	ldrb	r2, [r7, #28]
 8013662:	4967      	ldr	r1, [pc, #412]	; (8013800 <etharp_find_entry+0x278>)
 8013664:	4613      	mov	r3, r2
 8013666:	005b      	lsls	r3, r3, #1
 8013668:	4413      	add	r3, r2
 801366a:	00db      	lsls	r3, r3, #3
 801366c:	440b      	add	r3, r1
 801366e:	3312      	adds	r3, #18
 8013670:	881b      	ldrh	r3, [r3, #0]
 8013672:	833b      	strh	r3, [r7, #24]
 8013674:	e033      	b.n	80136de <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013676:	7f3a      	ldrb	r2, [r7, #28]
 8013678:	4961      	ldr	r1, [pc, #388]	; (8013800 <etharp_find_entry+0x278>)
 801367a:	4613      	mov	r3, r2
 801367c:	005b      	lsls	r3, r3, #1
 801367e:	4413      	add	r3, r2
 8013680:	00db      	lsls	r3, r3, #3
 8013682:	440b      	add	r3, r1
 8013684:	3312      	adds	r3, #18
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	8afa      	ldrh	r2, [r7, #22]
 801368a:	429a      	cmp	r2, r3
 801368c:	d827      	bhi.n	80136de <etharp_find_entry+0x156>
            old_pending = i;
 801368e:	7f3b      	ldrb	r3, [r7, #28]
 8013690:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8013692:	7f3a      	ldrb	r2, [r7, #28]
 8013694:	495a      	ldr	r1, [pc, #360]	; (8013800 <etharp_find_entry+0x278>)
 8013696:	4613      	mov	r3, r2
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	4413      	add	r3, r2
 801369c:	00db      	lsls	r3, r3, #3
 801369e:	440b      	add	r3, r1
 80136a0:	3312      	adds	r3, #18
 80136a2:	881b      	ldrh	r3, [r3, #0]
 80136a4:	82fb      	strh	r3, [r7, #22]
 80136a6:	e01a      	b.n	80136de <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80136a8:	7cfb      	ldrb	r3, [r7, #19]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d917      	bls.n	80136de <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80136ae:	7f3a      	ldrb	r2, [r7, #28]
 80136b0:	4953      	ldr	r1, [pc, #332]	; (8013800 <etharp_find_entry+0x278>)
 80136b2:	4613      	mov	r3, r2
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	4413      	add	r3, r2
 80136b8:	00db      	lsls	r3, r3, #3
 80136ba:	440b      	add	r3, r1
 80136bc:	3312      	adds	r3, #18
 80136be:	881b      	ldrh	r3, [r3, #0]
 80136c0:	8aba      	ldrh	r2, [r7, #20]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d80b      	bhi.n	80136de <etharp_find_entry+0x156>
            old_stable = i;
 80136c6:	7f3b      	ldrb	r3, [r7, #28]
 80136c8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80136ca:	7f3a      	ldrb	r2, [r7, #28]
 80136cc:	494c      	ldr	r1, [pc, #304]	; (8013800 <etharp_find_entry+0x278>)
 80136ce:	4613      	mov	r3, r2
 80136d0:	005b      	lsls	r3, r3, #1
 80136d2:	4413      	add	r3, r2
 80136d4:	00db      	lsls	r3, r3, #3
 80136d6:	440b      	add	r3, r1
 80136d8:	3312      	adds	r3, #18
 80136da:	881b      	ldrh	r3, [r3, #0]
 80136dc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80136de:	7f3b      	ldrb	r3, [r7, #28]
 80136e0:	3301      	adds	r3, #1
 80136e2:	773b      	strb	r3, [r7, #28]
 80136e4:	7f3b      	ldrb	r3, [r7, #28]
 80136e6:	2b09      	cmp	r3, #9
 80136e8:	f67f af68 	bls.w	80135bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80136ec:	7afb      	ldrb	r3, [r7, #11]
 80136ee:	f003 0302 	and.w	r3, r3, #2
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d108      	bne.n	8013708 <etharp_find_entry+0x180>
 80136f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80136fa:	2b0a      	cmp	r3, #10
 80136fc:	d107      	bne.n	801370e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80136fe:	7afb      	ldrb	r3, [r7, #11]
 8013700:	f003 0301 	and.w	r3, r3, #1
 8013704:	2b00      	cmp	r3, #0
 8013706:	d102      	bne.n	801370e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8013708:	f04f 33ff 	mov.w	r3, #4294967295
 801370c:	e073      	b.n	80137f6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801370e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013712:	2b09      	cmp	r3, #9
 8013714:	dc02      	bgt.n	801371c <etharp_find_entry+0x194>
    i = empty;
 8013716:	7f7b      	ldrb	r3, [r7, #29]
 8013718:	773b      	strb	r3, [r7, #28]
 801371a:	e036      	b.n	801378a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801371c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013720:	2b09      	cmp	r3, #9
 8013722:	dc13      	bgt.n	801374c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8013724:	7fbb      	ldrb	r3, [r7, #30]
 8013726:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013728:	7f3a      	ldrb	r2, [r7, #28]
 801372a:	4935      	ldr	r1, [pc, #212]	; (8013800 <etharp_find_entry+0x278>)
 801372c:	4613      	mov	r3, r2
 801372e:	005b      	lsls	r3, r3, #1
 8013730:	4413      	add	r3, r2
 8013732:	00db      	lsls	r3, r3, #3
 8013734:	440b      	add	r3, r1
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d018      	beq.n	801376e <etharp_find_entry+0x1e6>
 801373c:	4b31      	ldr	r3, [pc, #196]	; (8013804 <etharp_find_entry+0x27c>)
 801373e:	f240 126f 	movw	r2, #367	; 0x16f
 8013742:	4933      	ldr	r1, [pc, #204]	; (8013810 <etharp_find_entry+0x288>)
 8013744:	4831      	ldr	r0, [pc, #196]	; (801380c <etharp_find_entry+0x284>)
 8013746:	f002 fa8f 	bl	8015c68 <iprintf>
 801374a:	e010      	b.n	801376e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801374c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013750:	2b09      	cmp	r3, #9
 8013752:	dc02      	bgt.n	801375a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8013754:	7ffb      	ldrb	r3, [r7, #31]
 8013756:	773b      	strb	r3, [r7, #28]
 8013758:	e009      	b.n	801376e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801375a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801375e:	2b09      	cmp	r3, #9
 8013760:	dc02      	bgt.n	8013768 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013762:	7efb      	ldrb	r3, [r7, #27]
 8013764:	773b      	strb	r3, [r7, #28]
 8013766:	e002      	b.n	801376e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8013768:	f04f 33ff 	mov.w	r3, #4294967295
 801376c:	e043      	b.n	80137f6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801376e:	7f3b      	ldrb	r3, [r7, #28]
 8013770:	2b09      	cmp	r3, #9
 8013772:	d906      	bls.n	8013782 <etharp_find_entry+0x1fa>
 8013774:	4b23      	ldr	r3, [pc, #140]	; (8013804 <etharp_find_entry+0x27c>)
 8013776:	f240 1281 	movw	r2, #385	; 0x181
 801377a:	4926      	ldr	r1, [pc, #152]	; (8013814 <etharp_find_entry+0x28c>)
 801377c:	4823      	ldr	r0, [pc, #140]	; (801380c <etharp_find_entry+0x284>)
 801377e:	f002 fa73 	bl	8015c68 <iprintf>
    etharp_free_entry(i);
 8013782:	7f3b      	ldrb	r3, [r7, #28]
 8013784:	4618      	mov	r0, r3
 8013786:	f7ff fe25 	bl	80133d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801378a:	7f3b      	ldrb	r3, [r7, #28]
 801378c:	2b09      	cmp	r3, #9
 801378e:	d906      	bls.n	801379e <etharp_find_entry+0x216>
 8013790:	4b1c      	ldr	r3, [pc, #112]	; (8013804 <etharp_find_entry+0x27c>)
 8013792:	f240 1285 	movw	r2, #389	; 0x185
 8013796:	491f      	ldr	r1, [pc, #124]	; (8013814 <etharp_find_entry+0x28c>)
 8013798:	481c      	ldr	r0, [pc, #112]	; (801380c <etharp_find_entry+0x284>)
 801379a:	f002 fa65 	bl	8015c68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801379e:	7f3a      	ldrb	r2, [r7, #28]
 80137a0:	4917      	ldr	r1, [pc, #92]	; (8013800 <etharp_find_entry+0x278>)
 80137a2:	4613      	mov	r3, r2
 80137a4:	005b      	lsls	r3, r3, #1
 80137a6:	4413      	add	r3, r2
 80137a8:	00db      	lsls	r3, r3, #3
 80137aa:	440b      	add	r3, r1
 80137ac:	3314      	adds	r3, #20
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d006      	beq.n	80137c2 <etharp_find_entry+0x23a>
 80137b4:	4b13      	ldr	r3, [pc, #76]	; (8013804 <etharp_find_entry+0x27c>)
 80137b6:	f240 1287 	movw	r2, #391	; 0x187
 80137ba:	4917      	ldr	r1, [pc, #92]	; (8013818 <etharp_find_entry+0x290>)
 80137bc:	4813      	ldr	r0, [pc, #76]	; (801380c <etharp_find_entry+0x284>)
 80137be:	f002 fa53 	bl	8015c68 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00a      	beq.n	80137de <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80137c8:	7f3a      	ldrb	r2, [r7, #28]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6819      	ldr	r1, [r3, #0]
 80137ce:	480c      	ldr	r0, [pc, #48]	; (8013800 <etharp_find_entry+0x278>)
 80137d0:	4613      	mov	r3, r2
 80137d2:	005b      	lsls	r3, r3, #1
 80137d4:	4413      	add	r3, r2
 80137d6:	00db      	lsls	r3, r3, #3
 80137d8:	4403      	add	r3, r0
 80137da:	3304      	adds	r3, #4
 80137dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80137de:	7f3a      	ldrb	r2, [r7, #28]
 80137e0:	4907      	ldr	r1, [pc, #28]	; (8013800 <etharp_find_entry+0x278>)
 80137e2:	4613      	mov	r3, r2
 80137e4:	005b      	lsls	r3, r3, #1
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	3312      	adds	r3, #18
 80137ee:	2200      	movs	r2, #0
 80137f0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80137f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3720      	adds	r7, #32
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	20004260 	.word	0x20004260
 8013804:	08019280 	.word	0x08019280
 8013808:	080192b8 	.word	0x080192b8
 801380c:	080192f8 	.word	0x080192f8
 8013810:	08019320 	.word	0x08019320
 8013814:	08019338 	.word	0x08019338
 8013818:	0801934c 	.word	0x0801934c

0801381c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b088      	sub	sp, #32
 8013820:	af02      	add	r7, sp, #8
 8013822:	60f8      	str	r0, [r7, #12]
 8013824:	60b9      	str	r1, [r7, #8]
 8013826:	607a      	str	r2, [r7, #4]
 8013828:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013830:	2b06      	cmp	r3, #6
 8013832:	d006      	beq.n	8013842 <etharp_update_arp_entry+0x26>
 8013834:	4b48      	ldr	r3, [pc, #288]	; (8013958 <etharp_update_arp_entry+0x13c>)
 8013836:	f240 12ab 	movw	r2, #427	; 0x1ab
 801383a:	4948      	ldr	r1, [pc, #288]	; (801395c <etharp_update_arp_entry+0x140>)
 801383c:	4848      	ldr	r0, [pc, #288]	; (8013960 <etharp_update_arp_entry+0x144>)
 801383e:	f002 fa13 	bl	8015c68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d012      	beq.n	801386e <etharp_update_arp_entry+0x52>
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00e      	beq.n	801386e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	68f9      	ldr	r1, [r7, #12]
 8013856:	4618      	mov	r0, r3
 8013858:	f001 f8da 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 801385c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801385e:	2b00      	cmp	r3, #0
 8013860:	d105      	bne.n	801386e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801386a:	2be0      	cmp	r3, #224	; 0xe0
 801386c:	d102      	bne.n	8013874 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801386e:	f06f 030f 	mvn.w	r3, #15
 8013872:	e06c      	b.n	801394e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013874:	78fb      	ldrb	r3, [r7, #3]
 8013876:	68fa      	ldr	r2, [r7, #12]
 8013878:	4619      	mov	r1, r3
 801387a:	68b8      	ldr	r0, [r7, #8]
 801387c:	f7ff fe84 	bl	8013588 <etharp_find_entry>
 8013880:	4603      	mov	r3, r0
 8013882:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013888:	2b00      	cmp	r3, #0
 801388a:	da02      	bge.n	8013892 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801388c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013890:	e05d      	b.n	801394e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013892:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013896:	4933      	ldr	r1, [pc, #204]	; (8013964 <etharp_update_arp_entry+0x148>)
 8013898:	4613      	mov	r3, r2
 801389a:	005b      	lsls	r3, r3, #1
 801389c:	4413      	add	r3, r2
 801389e:	00db      	lsls	r3, r3, #3
 80138a0:	440b      	add	r3, r1
 80138a2:	3314      	adds	r3, #20
 80138a4:	2202      	movs	r2, #2
 80138a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80138a8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80138ac:	492d      	ldr	r1, [pc, #180]	; (8013964 <etharp_update_arp_entry+0x148>)
 80138ae:	4613      	mov	r3, r2
 80138b0:	005b      	lsls	r3, r3, #1
 80138b2:	4413      	add	r3, r2
 80138b4:	00db      	lsls	r3, r3, #3
 80138b6:	440b      	add	r3, r1
 80138b8:	3308      	adds	r3, #8
 80138ba:	68fa      	ldr	r2, [r7, #12]
 80138bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80138be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80138c2:	4613      	mov	r3, r2
 80138c4:	005b      	lsls	r3, r3, #1
 80138c6:	4413      	add	r3, r2
 80138c8:	00db      	lsls	r3, r3, #3
 80138ca:	3308      	adds	r3, #8
 80138cc:	4a25      	ldr	r2, [pc, #148]	; (8013964 <etharp_update_arp_entry+0x148>)
 80138ce:	4413      	add	r3, r2
 80138d0:	3304      	adds	r3, #4
 80138d2:	2206      	movs	r2, #6
 80138d4:	6879      	ldr	r1, [r7, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f002 f9b3 	bl	8015c42 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80138dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80138e0:	4920      	ldr	r1, [pc, #128]	; (8013964 <etharp_update_arp_entry+0x148>)
 80138e2:	4613      	mov	r3, r2
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	4413      	add	r3, r2
 80138e8:	00db      	lsls	r3, r3, #3
 80138ea:	440b      	add	r3, r1
 80138ec:	3312      	adds	r3, #18
 80138ee:	2200      	movs	r2, #0
 80138f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80138f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80138f6:	491b      	ldr	r1, [pc, #108]	; (8013964 <etharp_update_arp_entry+0x148>)
 80138f8:	4613      	mov	r3, r2
 80138fa:	005b      	lsls	r3, r3, #1
 80138fc:	4413      	add	r3, r2
 80138fe:	00db      	lsls	r3, r3, #3
 8013900:	440b      	add	r3, r1
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d021      	beq.n	801394c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013908:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801390c:	4915      	ldr	r1, [pc, #84]	; (8013964 <etharp_update_arp_entry+0x148>)
 801390e:	4613      	mov	r3, r2
 8013910:	005b      	lsls	r3, r3, #1
 8013912:	4413      	add	r3, r2
 8013914:	00db      	lsls	r3, r3, #3
 8013916:	440b      	add	r3, r1
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801391c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013920:	4910      	ldr	r1, [pc, #64]	; (8013964 <etharp_update_arp_entry+0x148>)
 8013922:	4613      	mov	r3, r2
 8013924:	005b      	lsls	r3, r3, #1
 8013926:	4413      	add	r3, r2
 8013928:	00db      	lsls	r3, r3, #3
 801392a:	440b      	add	r3, r1
 801392c:	2200      	movs	r2, #0
 801392e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8013936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6939      	ldr	r1, [r7, #16]
 8013940:	68f8      	ldr	r0, [r7, #12]
 8013942:	f001 ff07 	bl	8015754 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013946:	6938      	ldr	r0, [r7, #16]
 8013948:	f7f9 fcae 	bl	800d2a8 <pbuf_free>
  }
  return ERR_OK;
 801394c:	2300      	movs	r3, #0
}
 801394e:	4618      	mov	r0, r3
 8013950:	3718      	adds	r7, #24
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	08019280 	.word	0x08019280
 801395c:	08019378 	.word	0x08019378
 8013960:	080192f8 	.word	0x080192f8
 8013964:	20004260 	.word	0x20004260

08013968 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b084      	sub	sp, #16
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013970:	2300      	movs	r3, #0
 8013972:	73fb      	strb	r3, [r7, #15]
 8013974:	e01f      	b.n	80139b6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8013976:	7bfa      	ldrb	r2, [r7, #15]
 8013978:	4912      	ldr	r1, [pc, #72]	; (80139c4 <etharp_cleanup_netif+0x5c>)
 801397a:	4613      	mov	r3, r2
 801397c:	005b      	lsls	r3, r3, #1
 801397e:	4413      	add	r3, r2
 8013980:	00db      	lsls	r3, r3, #3
 8013982:	440b      	add	r3, r1
 8013984:	3314      	adds	r3, #20
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801398a:	7bbb      	ldrb	r3, [r7, #14]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00f      	beq.n	80139b0 <etharp_cleanup_netif+0x48>
 8013990:	7bfa      	ldrb	r2, [r7, #15]
 8013992:	490c      	ldr	r1, [pc, #48]	; (80139c4 <etharp_cleanup_netif+0x5c>)
 8013994:	4613      	mov	r3, r2
 8013996:	005b      	lsls	r3, r3, #1
 8013998:	4413      	add	r3, r2
 801399a:	00db      	lsls	r3, r3, #3
 801399c:	440b      	add	r3, r1
 801399e:	3308      	adds	r3, #8
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d103      	bne.n	80139b0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80139a8:	7bfb      	ldrb	r3, [r7, #15]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7ff fd12 	bl	80133d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139b0:	7bfb      	ldrb	r3, [r7, #15]
 80139b2:	3301      	adds	r3, #1
 80139b4:	73fb      	strb	r3, [r7, #15]
 80139b6:	7bfb      	ldrb	r3, [r7, #15]
 80139b8:	2b09      	cmp	r3, #9
 80139ba:	d9dc      	bls.n	8013976 <etharp_cleanup_netif+0xe>
    }
  }
}
 80139bc:	bf00      	nop
 80139be:	3710      	adds	r7, #16
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	20004260 	.word	0x20004260

080139c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80139c8:	b5b0      	push	{r4, r5, r7, lr}
 80139ca:	b08a      	sub	sp, #40	; 0x28
 80139cc:	af04      	add	r7, sp, #16
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d107      	bne.n	80139e8 <etharp_input+0x20>
 80139d8:	4b3d      	ldr	r3, [pc, #244]	; (8013ad0 <etharp_input+0x108>)
 80139da:	f44f 7222 	mov.w	r2, #648	; 0x288
 80139de:	493d      	ldr	r1, [pc, #244]	; (8013ad4 <etharp_input+0x10c>)
 80139e0:	483d      	ldr	r0, [pc, #244]	; (8013ad8 <etharp_input+0x110>)
 80139e2:	f002 f941 	bl	8015c68 <iprintf>
 80139e6:	e06f      	b.n	8013ac8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139f8:	d10c      	bne.n	8013a14 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80139fe:	2b06      	cmp	r3, #6
 8013a00:	d108      	bne.n	8013a14 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013a06:	2b04      	cmp	r3, #4
 8013a08:	d104      	bne.n	8013a14 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	885b      	ldrh	r3, [r3, #2]
 8013a0e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013a10:	2b08      	cmp	r3, #8
 8013a12:	d003      	beq.n	8013a1c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f7f9 fc47 	bl	800d2a8 <pbuf_free>
    return;
 8013a1a:	e055      	b.n	8013ac8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	330e      	adds	r3, #14
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	3318      	adds	r3, #24
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	3304      	adds	r3, #4
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d102      	bne.n	8013a3c <etharp_input+0x74>
    for_us = 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	75fb      	strb	r3, [r7, #23]
 8013a3a:	e009      	b.n	8013a50 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013a3c:	68ba      	ldr	r2, [r7, #8]
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	3304      	adds	r3, #4
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	bf0c      	ite	eq
 8013a48:	2301      	moveq	r3, #1
 8013a4a:	2300      	movne	r3, #0
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	f103 0208 	add.w	r2, r3, #8
 8013a56:	7dfb      	ldrb	r3, [r7, #23]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d001      	beq.n	8013a60 <etharp_input+0x98>
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	e000      	b.n	8013a62 <etharp_input+0x9a>
 8013a60:	2302      	movs	r3, #2
 8013a62:	f107 010c 	add.w	r1, r7, #12
 8013a66:	6838      	ldr	r0, [r7, #0]
 8013a68:	f7ff fed8 	bl	801381c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	88db      	ldrh	r3, [r3, #6]
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a76:	d003      	beq.n	8013a80 <etharp_input+0xb8>
 8013a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a7c:	d01e      	beq.n	8013abc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8013a7e:	e020      	b.n	8013ac2 <etharp_input+0xfa>
    if (for_us) {
 8013a80:	7dfb      	ldrb	r3, [r7, #23]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d01c      	beq.n	8013ac0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8013a9c:	693a      	ldr	r2, [r7, #16]
 8013a9e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8013aa0:	2102      	movs	r1, #2
 8013aa2:	9103      	str	r1, [sp, #12]
 8013aa4:	f107 010c 	add.w	r1, r7, #12
 8013aa8:	9102      	str	r1, [sp, #8]
 8013aaa:	9201      	str	r2, [sp, #4]
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	462b      	mov	r3, r5
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	4601      	mov	r1, r0
 8013ab4:	6838      	ldr	r0, [r7, #0]
 8013ab6:	f000 fae3 	bl	8014080 <etharp_raw>
    break;
 8013aba:	e001      	b.n	8013ac0 <etharp_input+0xf8>
    break;
 8013abc:	bf00      	nop
 8013abe:	e000      	b.n	8013ac2 <etharp_input+0xfa>
    break;
 8013ac0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f7f9 fbf0 	bl	800d2a8 <pbuf_free>
}
 8013ac8:	3718      	adds	r7, #24
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	08019280 	.word	0x08019280
 8013ad4:	080193d0 	.word	0x080193d0
 8013ad8:	080192f8 	.word	0x080192f8

08013adc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b086      	sub	sp, #24
 8013ae0:	af02      	add	r7, sp, #8
 8013ae2:	60f8      	str	r0, [r7, #12]
 8013ae4:	60b9      	str	r1, [r7, #8]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013aea:	79fa      	ldrb	r2, [r7, #7]
 8013aec:	4944      	ldr	r1, [pc, #272]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013aee:	4613      	mov	r3, r2
 8013af0:	005b      	lsls	r3, r3, #1
 8013af2:	4413      	add	r3, r2
 8013af4:	00db      	lsls	r3, r3, #3
 8013af6:	440b      	add	r3, r1
 8013af8:	3314      	adds	r3, #20
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d806      	bhi.n	8013b0e <etharp_output_to_arp_index+0x32>
 8013b00:	4b40      	ldr	r3, [pc, #256]	; (8013c04 <etharp_output_to_arp_index+0x128>)
 8013b02:	f240 22ed 	movw	r2, #749	; 0x2ed
 8013b06:	4940      	ldr	r1, [pc, #256]	; (8013c08 <etharp_output_to_arp_index+0x12c>)
 8013b08:	4840      	ldr	r0, [pc, #256]	; (8013c0c <etharp_output_to_arp_index+0x130>)
 8013b0a:	f002 f8ad 	bl	8015c68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013b0e:	79fa      	ldrb	r2, [r7, #7]
 8013b10:	493b      	ldr	r1, [pc, #236]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013b12:	4613      	mov	r3, r2
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	4413      	add	r3, r2
 8013b18:	00db      	lsls	r3, r3, #3
 8013b1a:	440b      	add	r3, r1
 8013b1c:	3314      	adds	r3, #20
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d153      	bne.n	8013bcc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013b24:	79fa      	ldrb	r2, [r7, #7]
 8013b26:	4936      	ldr	r1, [pc, #216]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013b28:	4613      	mov	r3, r2
 8013b2a:	005b      	lsls	r3, r3, #1
 8013b2c:	4413      	add	r3, r2
 8013b2e:	00db      	lsls	r3, r3, #3
 8013b30:	440b      	add	r3, r1
 8013b32:	3312      	adds	r3, #18
 8013b34:	881b      	ldrh	r3, [r3, #0]
 8013b36:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013b3a:	d919      	bls.n	8013b70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013b3c:	79fa      	ldrb	r2, [r7, #7]
 8013b3e:	4613      	mov	r3, r2
 8013b40:	005b      	lsls	r3, r3, #1
 8013b42:	4413      	add	r3, r2
 8013b44:	00db      	lsls	r3, r3, #3
 8013b46:	4a2e      	ldr	r2, [pc, #184]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013b48:	4413      	add	r3, r2
 8013b4a:	3304      	adds	r3, #4
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	68f8      	ldr	r0, [r7, #12]
 8013b50:	f000 fb44 	bl	80141dc <etharp_request>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d138      	bne.n	8013bcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013b5a:	79fa      	ldrb	r2, [r7, #7]
 8013b5c:	4928      	ldr	r1, [pc, #160]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013b5e:	4613      	mov	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	4413      	add	r3, r2
 8013b64:	00db      	lsls	r3, r3, #3
 8013b66:	440b      	add	r3, r1
 8013b68:	3314      	adds	r3, #20
 8013b6a:	2203      	movs	r2, #3
 8013b6c:	701a      	strb	r2, [r3, #0]
 8013b6e:	e02d      	b.n	8013bcc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013b70:	79fa      	ldrb	r2, [r7, #7]
 8013b72:	4923      	ldr	r1, [pc, #140]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013b74:	4613      	mov	r3, r2
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4413      	add	r3, r2
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	440b      	add	r3, r1
 8013b7e:	3312      	adds	r3, #18
 8013b80:	881b      	ldrh	r3, [r3, #0]
 8013b82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013b86:	d321      	bcc.n	8013bcc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013b88:	79fa      	ldrb	r2, [r7, #7]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	005b      	lsls	r3, r3, #1
 8013b8e:	4413      	add	r3, r2
 8013b90:	00db      	lsls	r3, r3, #3
 8013b92:	4a1b      	ldr	r2, [pc, #108]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013b94:	4413      	add	r3, r2
 8013b96:	1d19      	adds	r1, r3, #4
 8013b98:	79fa      	ldrb	r2, [r7, #7]
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	005b      	lsls	r3, r3, #1
 8013b9e:	4413      	add	r3, r2
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	3308      	adds	r3, #8
 8013ba4:	4a16      	ldr	r2, [pc, #88]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013ba6:	4413      	add	r3, r2
 8013ba8:	3304      	adds	r3, #4
 8013baa:	461a      	mov	r2, r3
 8013bac:	68f8      	ldr	r0, [r7, #12]
 8013bae:	f000 faf3 	bl	8014198 <etharp_request_dst>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d109      	bne.n	8013bcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013bb8:	79fa      	ldrb	r2, [r7, #7]
 8013bba:	4911      	ldr	r1, [pc, #68]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013bbc:	4613      	mov	r3, r2
 8013bbe:	005b      	lsls	r3, r3, #1
 8013bc0:	4413      	add	r3, r2
 8013bc2:	00db      	lsls	r3, r3, #3
 8013bc4:	440b      	add	r3, r1
 8013bc6:	3314      	adds	r3, #20
 8013bc8:	2203      	movs	r2, #3
 8013bca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8013bd2:	79fa      	ldrb	r2, [r7, #7]
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	005b      	lsls	r3, r3, #1
 8013bd8:	4413      	add	r3, r2
 8013bda:	00db      	lsls	r3, r3, #3
 8013bdc:	3308      	adds	r3, #8
 8013bde:	4a08      	ldr	r2, [pc, #32]	; (8013c00 <etharp_output_to_arp_index+0x124>)
 8013be0:	4413      	add	r3, r2
 8013be2:	1d1a      	adds	r2, r3, #4
 8013be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	4613      	mov	r3, r2
 8013bec:	460a      	mov	r2, r1
 8013bee:	68b9      	ldr	r1, [r7, #8]
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f001 fdaf 	bl	8015754 <ethernet_output>
 8013bf6:	4603      	mov	r3, r0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3710      	adds	r7, #16
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	20004260 	.word	0x20004260
 8013c04:	08019280 	.word	0x08019280
 8013c08:	080193f0 	.word	0x080193f0
 8013c0c:	080192f8 	.word	0x080192f8

08013c10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b08a      	sub	sp, #40	; 0x28
 8013c14:	af02      	add	r7, sp, #8
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <etharp_output+0x24>
 8013c26:	4b69      	ldr	r3, [pc, #420]	; (8013dcc <etharp_output+0x1bc>)
 8013c28:	f240 321b 	movw	r2, #795	; 0x31b
 8013c2c:	4968      	ldr	r1, [pc, #416]	; (8013dd0 <etharp_output+0x1c0>)
 8013c2e:	4869      	ldr	r0, [pc, #420]	; (8013dd4 <etharp_output+0x1c4>)
 8013c30:	f002 f81a 	bl	8015c68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d106      	bne.n	8013c48 <etharp_output+0x38>
 8013c3a:	4b64      	ldr	r3, [pc, #400]	; (8013dcc <etharp_output+0x1bc>)
 8013c3c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013c40:	4965      	ldr	r1, [pc, #404]	; (8013dd8 <etharp_output+0x1c8>)
 8013c42:	4864      	ldr	r0, [pc, #400]	; (8013dd4 <etharp_output+0x1c4>)
 8013c44:	f002 f810 	bl	8015c68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d106      	bne.n	8013c5c <etharp_output+0x4c>
 8013c4e:	4b5f      	ldr	r3, [pc, #380]	; (8013dcc <etharp_output+0x1bc>)
 8013c50:	f240 321d 	movw	r2, #797	; 0x31d
 8013c54:	4961      	ldr	r1, [pc, #388]	; (8013ddc <etharp_output+0x1cc>)
 8013c56:	485f      	ldr	r0, [pc, #380]	; (8013dd4 <etharp_output+0x1c4>)
 8013c58:	f002 f806 	bl	8015c68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	68f9      	ldr	r1, [r7, #12]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f000 fed4 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d002      	beq.n	8013c74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013c6e:	4b5c      	ldr	r3, [pc, #368]	; (8013de0 <etharp_output+0x1d0>)
 8013c70:	61fb      	str	r3, [r7, #28]
 8013c72:	e09b      	b.n	8013dac <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c7c:	2be0      	cmp	r3, #224	; 0xe0
 8013c7e:	d118      	bne.n	8013cb2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013c80:	2301      	movs	r3, #1
 8013c82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013c84:	2300      	movs	r3, #0
 8013c86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013c88:	235e      	movs	r3, #94	; 0x5e
 8013c8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c96:	b2db      	uxtb	r3, r3
 8013c98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	3302      	adds	r3, #2
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	3303      	adds	r3, #3
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013caa:	f107 0310 	add.w	r3, r7, #16
 8013cae:	61fb      	str	r3, [r7, #28]
 8013cb0:	e07c      	b.n	8013dac <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	3304      	adds	r3, #4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	405a      	eors	r2, r3
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	3308      	adds	r3, #8
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d012      	beq.n	8013cf0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013cd0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d00b      	beq.n	8013cf0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	330c      	adds	r3, #12
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d003      	beq.n	8013cea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	330c      	adds	r3, #12
 8013ce6:	61bb      	str	r3, [r7, #24]
 8013ce8:	e002      	b.n	8013cf0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013cea:	f06f 0303 	mvn.w	r3, #3
 8013cee:	e069      	b.n	8013dc4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013cf0:	4b3c      	ldr	r3, [pc, #240]	; (8013de4 <etharp_output+0x1d4>)
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4a3c      	ldr	r2, [pc, #240]	; (8013de8 <etharp_output+0x1d8>)
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	005b      	lsls	r3, r3, #1
 8013cfc:	440b      	add	r3, r1
 8013cfe:	00db      	lsls	r3, r3, #3
 8013d00:	4413      	add	r3, r2
 8013d02:	3314      	adds	r3, #20
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d917      	bls.n	8013d3a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013d0a:	69bb      	ldr	r3, [r7, #24]
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	4b35      	ldr	r3, [pc, #212]	; (8013de4 <etharp_output+0x1d4>)
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	4618      	mov	r0, r3
 8013d14:	4934      	ldr	r1, [pc, #208]	; (8013de8 <etharp_output+0x1d8>)
 8013d16:	4603      	mov	r3, r0
 8013d18:	005b      	lsls	r3, r3, #1
 8013d1a:	4403      	add	r3, r0
 8013d1c:	00db      	lsls	r3, r3, #3
 8013d1e:	440b      	add	r3, r1
 8013d20:	3304      	adds	r3, #4
 8013d22:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d108      	bne.n	8013d3a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013d28:	4b2e      	ldr	r3, [pc, #184]	; (8013de4 <etharp_output+0x1d4>)
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	68b9      	ldr	r1, [r7, #8]
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f7ff fed3 	bl	8013adc <etharp_output_to_arp_index>
 8013d36:	4603      	mov	r3, r0
 8013d38:	e044      	b.n	8013dc4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	75fb      	strb	r3, [r7, #23]
 8013d3e:	e02a      	b.n	8013d96 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013d40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013d44:	4928      	ldr	r1, [pc, #160]	; (8013de8 <etharp_output+0x1d8>)
 8013d46:	4613      	mov	r3, r2
 8013d48:	005b      	lsls	r3, r3, #1
 8013d4a:	4413      	add	r3, r2
 8013d4c:	00db      	lsls	r3, r3, #3
 8013d4e:	440b      	add	r3, r1
 8013d50:	3314      	adds	r3, #20
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d918      	bls.n	8013d8a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013d58:	69bb      	ldr	r3, [r7, #24]
 8013d5a:	6819      	ldr	r1, [r3, #0]
 8013d5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013d60:	4821      	ldr	r0, [pc, #132]	; (8013de8 <etharp_output+0x1d8>)
 8013d62:	4613      	mov	r3, r2
 8013d64:	005b      	lsls	r3, r3, #1
 8013d66:	4413      	add	r3, r2
 8013d68:	00db      	lsls	r3, r3, #3
 8013d6a:	4403      	add	r3, r0
 8013d6c:	3304      	adds	r3, #4
 8013d6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013d70:	4299      	cmp	r1, r3
 8013d72:	d10a      	bne.n	8013d8a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8013d74:	7dfa      	ldrb	r2, [r7, #23]
 8013d76:	4b1b      	ldr	r3, [pc, #108]	; (8013de4 <etharp_output+0x1d4>)
 8013d78:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013d7a:	7dfb      	ldrb	r3, [r7, #23]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	68b9      	ldr	r1, [r7, #8]
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f7ff feab 	bl	8013adc <etharp_output_to_arp_index>
 8013d86:	4603      	mov	r3, r0
 8013d88:	e01c      	b.n	8013dc4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	3301      	adds	r3, #1
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	75fb      	strb	r3, [r7, #23]
 8013d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013d9a:	2b09      	cmp	r3, #9
 8013d9c:	ddd0      	ble.n	8013d40 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013d9e:	68ba      	ldr	r2, [r7, #8]
 8013da0:	69b9      	ldr	r1, [r7, #24]
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f000 f822 	bl	8013dec <etharp_query>
 8013da8:	4603      	mov	r3, r0
 8013daa:	e00b      	b.n	8013dc4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8013db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	68b9      	ldr	r1, [r7, #8]
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f001 fcc9 	bl	8015754 <ethernet_output>
 8013dc2:	4603      	mov	r3, r0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3720      	adds	r7, #32
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	08019280 	.word	0x08019280
 8013dd0:	080193d0 	.word	0x080193d0
 8013dd4:	080192f8 	.word	0x080192f8
 8013dd8:	08019420 	.word	0x08019420
 8013ddc:	080193c0 	.word	0x080193c0
 8013de0:	0801d5e0 	.word	0x0801d5e0
 8013de4:	20004350 	.word	0x20004350
 8013de8:	20004260 	.word	0x20004260

08013dec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b08c      	sub	sp, #48	; 0x30
 8013df0:	af02      	add	r7, sp, #8
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	3325      	adds	r3, #37	; 0x25
 8013dfc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013dfe:	23ff      	movs	r3, #255	; 0xff
 8013e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013e04:	2300      	movs	r3, #0
 8013e06:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	68f9      	ldr	r1, [r7, #12]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f000 fdfe 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 8013e14:	4603      	mov	r3, r0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d10c      	bne.n	8013e34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013e22:	2be0      	cmp	r3, #224	; 0xe0
 8013e24:	d006      	beq.n	8013e34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d003      	beq.n	8013e34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d102      	bne.n	8013e3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013e34:	f06f 030f 	mvn.w	r3, #15
 8013e38:	e10f      	b.n	801405a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	68b8      	ldr	r0, [r7, #8]
 8013e40:	f7ff fba2 	bl	8013588 <etharp_find_entry>
 8013e44:	4603      	mov	r3, r0
 8013e46:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8013e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	da02      	bge.n	8013e56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8013e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e54:	e101      	b.n	801405a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013e56:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013e5a:	4982      	ldr	r1, [pc, #520]	; (8014064 <etharp_query+0x278>)
 8013e5c:	4613      	mov	r3, r2
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	4413      	add	r3, r2
 8013e62:	00db      	lsls	r3, r3, #3
 8013e64:	440b      	add	r3, r1
 8013e66:	3314      	adds	r3, #20
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d117      	bne.n	8013e9e <etharp_query+0xb2>
    is_new_entry = 1;
 8013e6e:	2301      	movs	r3, #1
 8013e70:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013e72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013e76:	497b      	ldr	r1, [pc, #492]	; (8014064 <etharp_query+0x278>)
 8013e78:	4613      	mov	r3, r2
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	4413      	add	r3, r2
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	440b      	add	r3, r1
 8013e82:	3314      	adds	r3, #20
 8013e84:	2201      	movs	r2, #1
 8013e86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013e88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013e8c:	4975      	ldr	r1, [pc, #468]	; (8014064 <etharp_query+0x278>)
 8013e8e:	4613      	mov	r3, r2
 8013e90:	005b      	lsls	r3, r3, #1
 8013e92:	4413      	add	r3, r2
 8013e94:	00db      	lsls	r3, r3, #3
 8013e96:	440b      	add	r3, r1
 8013e98:	3308      	adds	r3, #8
 8013e9a:	68fa      	ldr	r2, [r7, #12]
 8013e9c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013e9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013ea2:	4970      	ldr	r1, [pc, #448]	; (8014064 <etharp_query+0x278>)
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	4413      	add	r3, r2
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	440b      	add	r3, r1
 8013eae:	3314      	adds	r3, #20
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d012      	beq.n	8013edc <etharp_query+0xf0>
 8013eb6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013eba:	496a      	ldr	r1, [pc, #424]	; (8014064 <etharp_query+0x278>)
 8013ebc:	4613      	mov	r3, r2
 8013ebe:	005b      	lsls	r3, r3, #1
 8013ec0:	4413      	add	r3, r2
 8013ec2:	00db      	lsls	r3, r3, #3
 8013ec4:	440b      	add	r3, r1
 8013ec6:	3314      	adds	r3, #20
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	d806      	bhi.n	8013edc <etharp_query+0xf0>
 8013ece:	4b66      	ldr	r3, [pc, #408]	; (8014068 <etharp_query+0x27c>)
 8013ed0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013ed4:	4965      	ldr	r1, [pc, #404]	; (801406c <etharp_query+0x280>)
 8013ed6:	4866      	ldr	r0, [pc, #408]	; (8014070 <etharp_query+0x284>)
 8013ed8:	f001 fec6 	bl	8015c68 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013edc:	6a3b      	ldr	r3, [r7, #32]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d102      	bne.n	8013ee8 <etharp_query+0xfc>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d10c      	bne.n	8013f02 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013ee8:	68b9      	ldr	r1, [r7, #8]
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f000 f976 	bl	80141dc <etharp_request>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d102      	bne.n	8013f02 <etharp_query+0x116>
      return result;
 8013efc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013f00:	e0ab      	b.n	801405a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d106      	bne.n	8013f16 <etharp_query+0x12a>
 8013f08:	4b57      	ldr	r3, [pc, #348]	; (8014068 <etharp_query+0x27c>)
 8013f0a:	f240 32db 	movw	r2, #987	; 0x3db
 8013f0e:	4959      	ldr	r1, [pc, #356]	; (8014074 <etharp_query+0x288>)
 8013f10:	4857      	ldr	r0, [pc, #348]	; (8014070 <etharp_query+0x284>)
 8013f12:	f001 fea9 	bl	8015c68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013f16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013f1a:	4952      	ldr	r1, [pc, #328]	; (8014064 <etharp_query+0x278>)
 8013f1c:	4613      	mov	r3, r2
 8013f1e:	005b      	lsls	r3, r3, #1
 8013f20:	4413      	add	r3, r2
 8013f22:	00db      	lsls	r3, r3, #3
 8013f24:	440b      	add	r3, r1
 8013f26:	3314      	adds	r3, #20
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d919      	bls.n	8013f62 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8013f2e:	7cfa      	ldrb	r2, [r7, #19]
 8013f30:	4b51      	ldr	r3, [pc, #324]	; (8014078 <etharp_query+0x28c>)
 8013f32:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013f34:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013f38:	4613      	mov	r3, r2
 8013f3a:	005b      	lsls	r3, r3, #1
 8013f3c:	4413      	add	r3, r2
 8013f3e:	00db      	lsls	r3, r3, #3
 8013f40:	3308      	adds	r3, #8
 8013f42:	4a48      	ldr	r2, [pc, #288]	; (8014064 <etharp_query+0x278>)
 8013f44:	4413      	add	r3, r2
 8013f46:	1d1a      	adds	r2, r3, #4
 8013f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	697a      	ldr	r2, [r7, #20]
 8013f52:	6879      	ldr	r1, [r7, #4]
 8013f54:	68f8      	ldr	r0, [r7, #12]
 8013f56:	f001 fbfd 	bl	8015754 <ethernet_output>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f60:	e079      	b.n	8014056 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013f66:	493f      	ldr	r1, [pc, #252]	; (8014064 <etharp_query+0x278>)
 8013f68:	4613      	mov	r3, r2
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	4413      	add	r3, r2
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	440b      	add	r3, r1
 8013f72:	3314      	adds	r3, #20
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d16d      	bne.n	8014056 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013f82:	e01a      	b.n	8013fba <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013f84:	69fb      	ldr	r3, [r7, #28]
 8013f86:	895a      	ldrh	r2, [r3, #10]
 8013f88:	69fb      	ldr	r3, [r7, #28]
 8013f8a:	891b      	ldrh	r3, [r3, #8]
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d10a      	bne.n	8013fa6 <etharp_query+0x1ba>
 8013f90:	69fb      	ldr	r3, [r7, #28]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d006      	beq.n	8013fa6 <etharp_query+0x1ba>
 8013f98:	4b33      	ldr	r3, [pc, #204]	; (8014068 <etharp_query+0x27c>)
 8013f9a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8013f9e:	4937      	ldr	r1, [pc, #220]	; (801407c <etharp_query+0x290>)
 8013fa0:	4833      	ldr	r0, [pc, #204]	; (8014070 <etharp_query+0x284>)
 8013fa2:	f001 fe61 	bl	8015c68 <iprintf>
      if (p->type != PBUF_ROM) {
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	7b1b      	ldrb	r3, [r3, #12]
 8013faa:	2b01      	cmp	r3, #1
 8013fac:	d002      	beq.n	8013fb4 <etharp_query+0x1c8>
        copy_needed = 1;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	61bb      	str	r3, [r7, #24]
        break;
 8013fb2:	e005      	b.n	8013fc0 <etharp_query+0x1d4>
      }
      p = p->next;
 8013fb4:	69fb      	ldr	r3, [r7, #28]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d1e1      	bne.n	8013f84 <etharp_query+0x198>
    }
    if (copy_needed) {
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d017      	beq.n	8013ff6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	891b      	ldrh	r3, [r3, #8]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	4619      	mov	r1, r3
 8013fce:	2002      	movs	r0, #2
 8013fd0:	f7f8 fdf8 	bl	800cbc4 <pbuf_alloc>
 8013fd4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d011      	beq.n	8014000 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	69f8      	ldr	r0, [r7, #28]
 8013fe0:	f7f9 fa92 	bl	800d508 <pbuf_copy>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00a      	beq.n	8014000 <etharp_query+0x214>
          pbuf_free(p);
 8013fea:	69f8      	ldr	r0, [r7, #28]
 8013fec:	f7f9 f95c 	bl	800d2a8 <pbuf_free>
          p = NULL;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	61fb      	str	r3, [r7, #28]
 8013ff4:	e004      	b.n	8014000 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ffa:	69f8      	ldr	r0, [r7, #28]
 8013ffc:	f7f9 fa06 	bl	800d40c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014000:	69fb      	ldr	r3, [r7, #28]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d024      	beq.n	8014050 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014006:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801400a:	4916      	ldr	r1, [pc, #88]	; (8014064 <etharp_query+0x278>)
 801400c:	4613      	mov	r3, r2
 801400e:	005b      	lsls	r3, r3, #1
 8014010:	4413      	add	r3, r2
 8014012:	00db      	lsls	r3, r3, #3
 8014014:	440b      	add	r3, r1
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00b      	beq.n	8014034 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801401c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014020:	4910      	ldr	r1, [pc, #64]	; (8014064 <etharp_query+0x278>)
 8014022:	4613      	mov	r3, r2
 8014024:	005b      	lsls	r3, r3, #1
 8014026:	4413      	add	r3, r2
 8014028:	00db      	lsls	r3, r3, #3
 801402a:	440b      	add	r3, r1
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	4618      	mov	r0, r3
 8014030:	f7f9 f93a 	bl	800d2a8 <pbuf_free>
      }
      arp_table[i].q = p;
 8014034:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014038:	490a      	ldr	r1, [pc, #40]	; (8014064 <etharp_query+0x278>)
 801403a:	4613      	mov	r3, r2
 801403c:	005b      	lsls	r3, r3, #1
 801403e:	4413      	add	r3, r2
 8014040:	00db      	lsls	r3, r3, #3
 8014042:	440b      	add	r3, r1
 8014044:	69fa      	ldr	r2, [r7, #28]
 8014046:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014048:	2300      	movs	r3, #0
 801404a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801404e:	e002      	b.n	8014056 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014050:	23ff      	movs	r3, #255	; 0xff
 8014052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801405a:	4618      	mov	r0, r3
 801405c:	3728      	adds	r7, #40	; 0x28
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20004260 	.word	0x20004260
 8014068:	08019280 	.word	0x08019280
 801406c:	0801942c 	.word	0x0801942c
 8014070:	080192f8 	.word	0x080192f8
 8014074:	08019420 	.word	0x08019420
 8014078:	20004350 	.word	0x20004350
 801407c:	08019454 	.word	0x08019454

08014080 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b08a      	sub	sp, #40	; 0x28
 8014084:	af02      	add	r7, sp, #8
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
 801408c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801408e:	2300      	movs	r3, #0
 8014090:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d106      	bne.n	80140a6 <etharp_raw+0x26>
 8014098:	4b3a      	ldr	r3, [pc, #232]	; (8014184 <etharp_raw+0x104>)
 801409a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801409e:	493a      	ldr	r1, [pc, #232]	; (8014188 <etharp_raw+0x108>)
 80140a0:	483a      	ldr	r0, [pc, #232]	; (801418c <etharp_raw+0x10c>)
 80140a2:	f001 fde1 	bl	8015c68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80140a6:	2200      	movs	r2, #0
 80140a8:	211c      	movs	r1, #28
 80140aa:	2002      	movs	r0, #2
 80140ac:	f7f8 fd8a 	bl	800cbc4 <pbuf_alloc>
 80140b0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d102      	bne.n	80140be <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80140b8:	f04f 33ff 	mov.w	r3, #4294967295
 80140bc:	e05d      	b.n	801417a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	895b      	ldrh	r3, [r3, #10]
 80140c2:	2b1b      	cmp	r3, #27
 80140c4:	d806      	bhi.n	80140d4 <etharp_raw+0x54>
 80140c6:	4b2f      	ldr	r3, [pc, #188]	; (8014184 <etharp_raw+0x104>)
 80140c8:	f240 4264 	movw	r2, #1124	; 0x464
 80140cc:	4930      	ldr	r1, [pc, #192]	; (8014190 <etharp_raw+0x110>)
 80140ce:	482f      	ldr	r0, [pc, #188]	; (801418c <etharp_raw+0x10c>)
 80140d0:	f001 fdca 	bl	8015c68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80140da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80140dc:	4618      	mov	r0, r3
 80140de:	f7f7 ff49 	bl	800bf74 <lwip_htons>
 80140e2:	4603      	mov	r3, r0
 80140e4:	461a      	mov	r2, r3
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80140f0:	2b06      	cmp	r3, #6
 80140f2:	d006      	beq.n	8014102 <etharp_raw+0x82>
 80140f4:	4b23      	ldr	r3, [pc, #140]	; (8014184 <etharp_raw+0x104>)
 80140f6:	f240 426b 	movw	r2, #1131	; 0x46b
 80140fa:	4926      	ldr	r1, [pc, #152]	; (8014194 <etharp_raw+0x114>)
 80140fc:	4823      	ldr	r0, [pc, #140]	; (801418c <etharp_raw+0x10c>)
 80140fe:	f001 fdb3 	bl	8015c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	3308      	adds	r3, #8
 8014106:	2206      	movs	r2, #6
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	4618      	mov	r0, r3
 801410c:	f001 fd99 	bl	8015c42 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	3312      	adds	r3, #18
 8014114:	2206      	movs	r2, #6
 8014116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014118:	4618      	mov	r0, r3
 801411a:	f001 fd92 	bl	8015c42 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	330e      	adds	r3, #14
 8014122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014124:	6812      	ldr	r2, [r2, #0]
 8014126:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	3318      	adds	r3, #24
 801412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801412e:	6812      	ldr	r2, [r2, #0]
 8014130:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	2200      	movs	r2, #0
 8014136:	701a      	strb	r2, [r3, #0]
 8014138:	2200      	movs	r2, #0
 801413a:	f042 0201 	orr.w	r2, r2, #1
 801413e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2200      	movs	r2, #0
 8014144:	f042 0208 	orr.w	r2, r2, #8
 8014148:	709a      	strb	r2, [r3, #2]
 801414a:	2200      	movs	r2, #0
 801414c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	2206      	movs	r2, #6
 8014152:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	2204      	movs	r2, #4
 8014158:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801415a:	f640 0306 	movw	r3, #2054	; 0x806
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	68ba      	ldr	r2, [r7, #8]
 8014164:	69b9      	ldr	r1, [r7, #24]
 8014166:	68f8      	ldr	r0, [r7, #12]
 8014168:	f001 faf4 	bl	8015754 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801416c:	69b8      	ldr	r0, [r7, #24]
 801416e:	f7f9 f89b 	bl	800d2a8 <pbuf_free>
  p = NULL;
 8014172:	2300      	movs	r3, #0
 8014174:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014176:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801417a:	4618      	mov	r0, r3
 801417c:	3720      	adds	r7, #32
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	08019280 	.word	0x08019280
 8014188:	080193d0 	.word	0x080193d0
 801418c:	080192f8 	.word	0x080192f8
 8014190:	08019470 	.word	0x08019470
 8014194:	080194a4 	.word	0x080194a4

08014198 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b088      	sub	sp, #32
 801419c:	af04      	add	r7, sp, #16
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80141b4:	2201      	movs	r2, #1
 80141b6:	9203      	str	r2, [sp, #12]
 80141b8:	68ba      	ldr	r2, [r7, #8]
 80141ba:	9202      	str	r2, [sp, #8]
 80141bc:	4a06      	ldr	r2, [pc, #24]	; (80141d8 <etharp_request_dst+0x40>)
 80141be:	9201      	str	r2, [sp, #4]
 80141c0:	9300      	str	r3, [sp, #0]
 80141c2:	4603      	mov	r3, r0
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	68f8      	ldr	r0, [r7, #12]
 80141c8:	f7ff ff5a 	bl	8014080 <etharp_raw>
 80141cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3710      	adds	r7, #16
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	0801d5e8 	.word	0x0801d5e8

080141dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80141e6:	4a05      	ldr	r2, [pc, #20]	; (80141fc <etharp_request+0x20>)
 80141e8:	6839      	ldr	r1, [r7, #0]
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f7ff ffd4 	bl	8014198 <etharp_request_dst>
 80141f0:	4603      	mov	r3, r0
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	3708      	adds	r7, #8
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	0801d5e0 	.word	0x0801d5e0

08014200 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b08e      	sub	sp, #56	; 0x38
 8014204:	af04      	add	r7, sp, #16
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801420a:	4b7a      	ldr	r3, [pc, #488]	; (80143f4 <icmp_input+0x1f4>)
 801420c:	689b      	ldr	r3, [r3, #8]
 801420e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8014210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	b29b      	uxth	r3, r3
 8014216:	f003 030f 	and.w	r3, r3, #15
 801421a:	b29b      	uxth	r3, r3
 801421c:	009b      	lsls	r3, r3, #2
 801421e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014222:	2b13      	cmp	r3, #19
 8014224:	f240 80d1 	bls.w	80143ca <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	895b      	ldrh	r3, [r3, #10]
 801422c:	2b03      	cmp	r3, #3
 801422e:	f240 80ce 	bls.w	80143ce <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801423c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014240:	2b00      	cmp	r3, #0
 8014242:	f000 80bb 	beq.w	80143bc <icmp_input+0x1bc>
 8014246:	2b08      	cmp	r3, #8
 8014248:	f040 80bb 	bne.w	80143c2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801424c:	4b6a      	ldr	r3, [pc, #424]	; (80143f8 <icmp_input+0x1f8>)
 801424e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014250:	4b68      	ldr	r3, [pc, #416]	; (80143f4 <icmp_input+0x1f4>)
 8014252:	695b      	ldr	r3, [r3, #20]
 8014254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014258:	2be0      	cmp	r3, #224	; 0xe0
 801425a:	f000 80bf 	beq.w	80143dc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801425e:	4b65      	ldr	r3, [pc, #404]	; (80143f4 <icmp_input+0x1f4>)
 8014260:	695a      	ldr	r2, [r3, #20]
 8014262:	4b64      	ldr	r3, [pc, #400]	; (80143f4 <icmp_input+0x1f4>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	4619      	mov	r1, r3
 8014268:	4610      	mov	r0, r2
 801426a:	f000 fbd1 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	f040 80b5 	bne.w	80143e0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	891b      	ldrh	r3, [r3, #8]
 801427a:	2b07      	cmp	r3, #7
 801427c:	f240 80a9 	bls.w	80143d2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014282:	330e      	adds	r3, #14
 8014284:	b29b      	uxth	r3, r3
 8014286:	b21b      	sxth	r3, r3
 8014288:	4619      	mov	r1, r3
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7f8 ffe8 	bl	800d260 <pbuf_header>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d046      	beq.n	8014324 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	891a      	ldrh	r2, [r3, #8]
 801429a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801429c:	4413      	add	r3, r2
 801429e:	b29b      	uxth	r3, r3
 80142a0:	2200      	movs	r2, #0
 80142a2:	4619      	mov	r1, r3
 80142a4:	2002      	movs	r0, #2
 80142a6:	f7f8 fc8d 	bl	800cbc4 <pbuf_alloc>
 80142aa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f000 8098 	beq.w	80143e4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	895b      	ldrh	r3, [r3, #10]
 80142b8:	461a      	mov	r2, r3
 80142ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142bc:	3308      	adds	r3, #8
 80142be:	429a      	cmp	r2, r3
 80142c0:	d203      	bcs.n	80142ca <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80142c2:	69b8      	ldr	r0, [r7, #24]
 80142c4:	f7f8 fff0 	bl	800d2a8 <pbuf_free>
        goto icmperr;
 80142c8:	e08d      	b.n	80143e6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80142d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142d2:	4618      	mov	r0, r3
 80142d4:	f001 fcb5 	bl	8015c42 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80142d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142da:	425b      	negs	r3, r3
 80142dc:	b29b      	uxth	r3, r3
 80142de:	b21b      	sxth	r3, r3
 80142e0:	4619      	mov	r1, r3
 80142e2:	69b8      	ldr	r0, [r7, #24]
 80142e4:	f7f8 ffbc 	bl	800d260 <pbuf_header>
 80142e8:	4603      	mov	r3, r0
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d009      	beq.n	8014302 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80142ee:	4b43      	ldr	r3, [pc, #268]	; (80143fc <icmp_input+0x1fc>)
 80142f0:	22af      	movs	r2, #175	; 0xaf
 80142f2:	4943      	ldr	r1, [pc, #268]	; (8014400 <icmp_input+0x200>)
 80142f4:	4843      	ldr	r0, [pc, #268]	; (8014404 <icmp_input+0x204>)
 80142f6:	f001 fcb7 	bl	8015c68 <iprintf>
        pbuf_free(r);
 80142fa:	69b8      	ldr	r0, [r7, #24]
 80142fc:	f7f8 ffd4 	bl	800d2a8 <pbuf_free>
        goto icmperr;
 8014300:	e071      	b.n	80143e6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8014302:	6879      	ldr	r1, [r7, #4]
 8014304:	69b8      	ldr	r0, [r7, #24]
 8014306:	f7f9 f8ff 	bl	800d508 <pbuf_copy>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d003      	beq.n	8014318 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8014310:	69b8      	ldr	r0, [r7, #24]
 8014312:	f7f8 ffc9 	bl	800d2a8 <pbuf_free>
        goto icmperr;
 8014316:	e066      	b.n	80143e6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f7f8 ffc5 	bl	800d2a8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	607b      	str	r3, [r7, #4]
 8014322:	e015      	b.n	8014350 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014326:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801432a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801432e:	33f2      	adds	r3, #242	; 0xf2
 8014330:	b29b      	uxth	r3, r3
 8014332:	b21b      	sxth	r3, r3
 8014334:	4619      	mov	r1, r3
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f7f8 ff92 	bl	800d260 <pbuf_header>
 801433c:	4603      	mov	r3, r0
 801433e:	2b00      	cmp	r3, #0
 8014340:	d006      	beq.n	8014350 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014342:	4b2e      	ldr	r3, [pc, #184]	; (80143fc <icmp_input+0x1fc>)
 8014344:	22c0      	movs	r2, #192	; 0xc0
 8014346:	4930      	ldr	r1, [pc, #192]	; (8014408 <icmp_input+0x208>)
 8014348:	482e      	ldr	r0, [pc, #184]	; (8014404 <icmp_input+0x204>)
 801434a:	f001 fc8d 	bl	8015c68 <iprintf>
        goto icmperr;
 801434e:	e04a      	b.n	80143e6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	685b      	ldr	r3, [r3, #4]
 8014354:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8014356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801435a:	4619      	mov	r1, r3
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f7f8 ff7f 	bl	800d260 <pbuf_header>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d12b      	bne.n	80143c0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014376:	4b1f      	ldr	r3, [pc, #124]	; (80143f4 <icmp_input+0x1f4>)
 8014378:	691a      	ldr	r2, [r3, #16]
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	2200      	movs	r2, #0
 8014382:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	2200      	movs	r2, #0
 8014388:	709a      	strb	r2, [r3, #2]
 801438a:	2200      	movs	r2, #0
 801438c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	22ff      	movs	r2, #255	; 0xff
 8014392:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	2200      	movs	r2, #0
 8014398:	729a      	strb	r2, [r3, #10]
 801439a:	2200      	movs	r2, #0
 801439c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	9302      	str	r3, [sp, #8]
 80143a2:	2301      	movs	r3, #1
 80143a4:	9301      	str	r3, [sp, #4]
 80143a6:	2300      	movs	r3, #0
 80143a8:	9300      	str	r3, [sp, #0]
 80143aa:	23ff      	movs	r3, #255	; 0xff
 80143ac:	2200      	movs	r2, #0
 80143ae:	69f9      	ldr	r1, [r7, #28]
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 fa5b 	bl	801486c <ip4_output_if>
 80143b6:	4603      	mov	r3, r0
 80143b8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80143ba:	e001      	b.n	80143c0 <icmp_input+0x1c0>
    break;
 80143bc:	bf00      	nop
 80143be:	e000      	b.n	80143c2 <icmp_input+0x1c2>
    break;
 80143c0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7f8 ff70 	bl	800d2a8 <pbuf_free>
  return;
 80143c8:	e011      	b.n	80143ee <icmp_input+0x1ee>
    goto lenerr;
 80143ca:	bf00      	nop
 80143cc:	e002      	b.n	80143d4 <icmp_input+0x1d4>
    goto lenerr;
 80143ce:	bf00      	nop
 80143d0:	e000      	b.n	80143d4 <icmp_input+0x1d4>
      goto lenerr;
 80143d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7f8 ff67 	bl	800d2a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80143da:	e008      	b.n	80143ee <icmp_input+0x1ee>
      goto icmperr;
 80143dc:	bf00      	nop
 80143de:	e002      	b.n	80143e6 <icmp_input+0x1e6>
      goto icmperr;
 80143e0:	bf00      	nop
 80143e2:	e000      	b.n	80143e6 <icmp_input+0x1e6>
        goto icmperr;
 80143e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7f8 ff5e 	bl	800d2a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80143ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80143ee:	3728      	adds	r7, #40	; 0x28
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	200079f0 	.word	0x200079f0
 80143f8:	20007a04 	.word	0x20007a04
 80143fc:	080194e8 	.word	0x080194e8
 8014400:	08019520 	.word	0x08019520
 8014404:	08019558 	.word	0x08019558
 8014408:	08019580 	.word	0x08019580

0801440c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	460b      	mov	r3, r1
 8014416:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014418:	78fb      	ldrb	r3, [r7, #3]
 801441a:	461a      	mov	r2, r3
 801441c:	2103      	movs	r1, #3
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f000 f814 	bl	801444c <icmp_send_response>
}
 8014424:	bf00      	nop
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	460b      	mov	r3, r1
 8014436:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014438:	78fb      	ldrb	r3, [r7, #3]
 801443a:	461a      	mov	r2, r3
 801443c:	210b      	movs	r1, #11
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 f804 	bl	801444c <icmp_send_response>
}
 8014444:	bf00      	nop
 8014446:	3708      	adds	r7, #8
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b08c      	sub	sp, #48	; 0x30
 8014450:	af04      	add	r7, sp, #16
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	70fb      	strb	r3, [r7, #3]
 8014458:	4613      	mov	r3, r2
 801445a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801445c:	2200      	movs	r2, #0
 801445e:	2124      	movs	r1, #36	; 0x24
 8014460:	2001      	movs	r0, #1
 8014462:	f7f8 fbaf 	bl	800cbc4 <pbuf_alloc>
 8014466:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d04c      	beq.n	8014508 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	895b      	ldrh	r3, [r3, #10]
 8014472:	2b23      	cmp	r3, #35	; 0x23
 8014474:	d806      	bhi.n	8014484 <icmp_send_response+0x38>
 8014476:	4b26      	ldr	r3, [pc, #152]	; (8014510 <icmp_send_response+0xc4>)
 8014478:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801447c:	4925      	ldr	r1, [pc, #148]	; (8014514 <icmp_send_response+0xc8>)
 801447e:	4826      	ldr	r0, [pc, #152]	; (8014518 <icmp_send_response+0xcc>)
 8014480:	f001 fbf2 	bl	8015c68 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	78fa      	ldrb	r2, [r7, #3]
 8014494:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	78ba      	ldrb	r2, [r7, #2]
 801449a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	2200      	movs	r2, #0
 80144a0:	711a      	strb	r2, [r3, #4]
 80144a2:	2200      	movs	r2, #0
 80144a4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	2200      	movs	r2, #0
 80144aa:	719a      	strb	r2, [r3, #6]
 80144ac:	2200      	movs	r2, #0
 80144ae:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	f103 0008 	add.w	r0, r3, #8
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	221c      	movs	r2, #28
 80144be:	4619      	mov	r1, r3
 80144c0:	f001 fbbf 	bl	8015c42 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80144ca:	f107 030c 	add.w	r3, r7, #12
 80144ce:	4618      	mov	r0, r3
 80144d0:	f000 f824 	bl	801451c <ip4_route>
 80144d4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d011      	beq.n	8014500 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	2200      	movs	r2, #0
 80144e0:	709a      	strb	r2, [r3, #2]
 80144e2:	2200      	movs	r2, #0
 80144e4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80144e6:	f107 020c 	add.w	r2, r7, #12
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	9302      	str	r3, [sp, #8]
 80144ee:	2301      	movs	r3, #1
 80144f0:	9301      	str	r3, [sp, #4]
 80144f2:	2300      	movs	r3, #0
 80144f4:	9300      	str	r3, [sp, #0]
 80144f6:	23ff      	movs	r3, #255	; 0xff
 80144f8:	2100      	movs	r1, #0
 80144fa:	69f8      	ldr	r0, [r7, #28]
 80144fc:	f000 f9b6 	bl	801486c <ip4_output_if>
  }
  pbuf_free(q);
 8014500:	69f8      	ldr	r0, [r7, #28]
 8014502:	f7f8 fed1 	bl	800d2a8 <pbuf_free>
 8014506:	e000      	b.n	801450a <icmp_send_response+0xbe>
    return;
 8014508:	bf00      	nop
}
 801450a:	3720      	adds	r7, #32
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	080194e8 	.word	0x080194e8
 8014514:	080195b4 	.word	0x080195b4
 8014518:	08019558 	.word	0x08019558

0801451c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801451c:	b480      	push	{r7}
 801451e:	b085      	sub	sp, #20
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8014524:	4b30      	ldr	r3, [pc, #192]	; (80145e8 <ip4_route+0xcc>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	60fb      	str	r3, [r7, #12]
 801452a:	e036      	b.n	801459a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014532:	f003 0301 	and.w	r3, r3, #1
 8014536:	b2db      	uxtb	r3, r3
 8014538:	2b00      	cmp	r3, #0
 801453a:	d02b      	beq.n	8014594 <ip4_route+0x78>
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014542:	089b      	lsrs	r3, r3, #2
 8014544:	f003 0301 	and.w	r3, r3, #1
 8014548:	b2db      	uxtb	r3, r3
 801454a:	2b00      	cmp	r3, #0
 801454c:	d022      	beq.n	8014594 <ip4_route+0x78>
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	3304      	adds	r3, #4
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d01d      	beq.n	8014594 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	3304      	adds	r3, #4
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	405a      	eors	r2, r3
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	3308      	adds	r3, #8
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4013      	ands	r3, r2
 801456c:	2b00      	cmp	r3, #0
 801456e:	d101      	bne.n	8014574 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	e033      	b.n	80145dc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801457a:	f003 0302 	and.w	r3, r3, #2
 801457e:	2b00      	cmp	r3, #0
 8014580:	d108      	bne.n	8014594 <ip4_route+0x78>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	330c      	adds	r3, #12
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	429a      	cmp	r2, r3
 801458e:	d101      	bne.n	8014594 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	e023      	b.n	80145dc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	60fb      	str	r3, [r7, #12]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d1c5      	bne.n	801452c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80145a0:	4b12      	ldr	r3, [pc, #72]	; (80145ec <ip4_route+0xd0>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d015      	beq.n	80145d4 <ip4_route+0xb8>
 80145a8:	4b10      	ldr	r3, [pc, #64]	; (80145ec <ip4_route+0xd0>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80145b0:	f003 0301 	and.w	r3, r3, #1
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00d      	beq.n	80145d4 <ip4_route+0xb8>
 80145b8:	4b0c      	ldr	r3, [pc, #48]	; (80145ec <ip4_route+0xd0>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80145c0:	f003 0304 	and.w	r3, r3, #4
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d005      	beq.n	80145d4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80145c8:	4b08      	ldr	r3, [pc, #32]	; (80145ec <ip4_route+0xd0>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	3304      	adds	r3, #4
 80145ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d101      	bne.n	80145d8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80145d4:	2300      	movs	r3, #0
 80145d6:	e001      	b.n	80145dc <ip4_route+0xc0>
  }

  return netif_default;
 80145d8:	4b04      	ldr	r3, [pc, #16]	; (80145ec <ip4_route+0xd0>)
 80145da:	681b      	ldr	r3, [r3, #0]
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3714      	adds	r7, #20
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr
 80145e8:	2000b0f0 	.word	0x2000b0f0
 80145ec:	2000b0f4 	.word	0x2000b0f4

080145f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b086      	sub	sp, #24
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	685b      	ldr	r3, [r3, #4]
 80145fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	091b      	lsrs	r3, r3, #4
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b04      	cmp	r3, #4
 801460a:	d004      	beq.n	8014616 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f7f8 fe4b 	bl	800d2a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014612:	2300      	movs	r3, #0
 8014614:	e122      	b.n	801485c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	b29b      	uxth	r3, r3
 801461c:	f003 030f 	and.w	r3, r3, #15
 8014620:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8014622:	897b      	ldrh	r3, [r7, #10]
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	885b      	ldrh	r3, [r3, #2]
 801462c:	b29b      	uxth	r3, r3
 801462e:	4618      	mov	r0, r3
 8014630:	f7f7 fca0 	bl	800bf74 <lwip_htons>
 8014634:	4603      	mov	r3, r0
 8014636:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	891b      	ldrh	r3, [r3, #8]
 801463c:	893a      	ldrh	r2, [r7, #8]
 801463e:	429a      	cmp	r2, r3
 8014640:	d204      	bcs.n	801464c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8014642:	893b      	ldrh	r3, [r7, #8]
 8014644:	4619      	mov	r1, r3
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f7f8 fcba 	bl	800cfc0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	895b      	ldrh	r3, [r3, #10]
 8014650:	897a      	ldrh	r2, [r7, #10]
 8014652:	429a      	cmp	r2, r3
 8014654:	d807      	bhi.n	8014666 <ip4_input+0x76>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	891b      	ldrh	r3, [r3, #8]
 801465a:	893a      	ldrh	r2, [r7, #8]
 801465c:	429a      	cmp	r2, r3
 801465e:	d802      	bhi.n	8014666 <ip4_input+0x76>
 8014660:	897b      	ldrh	r3, [r7, #10]
 8014662:	2b13      	cmp	r3, #19
 8014664:	d804      	bhi.n	8014670 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f7f8 fe1e 	bl	800d2a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801466c:	2300      	movs	r3, #0
 801466e:	e0f5      	b.n	801485c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	691b      	ldr	r3, [r3, #16]
 8014674:	4a7b      	ldr	r2, [pc, #492]	; (8014864 <ip4_input+0x274>)
 8014676:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	4a79      	ldr	r2, [pc, #484]	; (8014864 <ip4_input+0x274>)
 801467e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014680:	4b78      	ldr	r3, [pc, #480]	; (8014864 <ip4_input+0x274>)
 8014682:	695b      	ldr	r3, [r3, #20]
 8014684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014688:	2be0      	cmp	r3, #224	; 0xe0
 801468a:	d112      	bne.n	80146b2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014692:	f003 0301 	and.w	r3, r3, #1
 8014696:	b2db      	uxtb	r3, r3
 8014698:	2b00      	cmp	r3, #0
 801469a:	d007      	beq.n	80146ac <ip4_input+0xbc>
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	3304      	adds	r3, #4
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d002      	beq.n	80146ac <ip4_input+0xbc>
      netif = inp;
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	613b      	str	r3, [r7, #16]
 80146aa:	e041      	b.n	8014730 <ip4_input+0x140>
    } else {
      netif = NULL;
 80146ac:	2300      	movs	r3, #0
 80146ae:	613b      	str	r3, [r7, #16]
 80146b0:	e03e      	b.n	8014730 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80146b2:	2301      	movs	r3, #1
 80146b4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80146c0:	f003 0301 	and.w	r3, r3, #1
 80146c4:	b2db      	uxtb	r3, r3
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d014      	beq.n	80146f4 <ip4_input+0x104>
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	3304      	adds	r3, #4
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00f      	beq.n	80146f4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80146d4:	4b63      	ldr	r3, [pc, #396]	; (8014864 <ip4_input+0x274>)
 80146d6:	695a      	ldr	r2, [r3, #20]
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	3304      	adds	r3, #4
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d026      	beq.n	8014730 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80146e2:	4b60      	ldr	r3, [pc, #384]	; (8014864 <ip4_input+0x274>)
 80146e4:	695b      	ldr	r3, [r3, #20]
 80146e6:	6939      	ldr	r1, [r7, #16]
 80146e8:	4618      	mov	r0, r3
 80146ea:	f000 f991 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 80146ee:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d11d      	bne.n	8014730 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00d      	beq.n	8014716 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80146fa:	4b5a      	ldr	r3, [pc, #360]	; (8014864 <ip4_input+0x274>)
 80146fc:	695b      	ldr	r3, [r3, #20]
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	2b7f      	cmp	r3, #127	; 0x7f
 8014702:	d102      	bne.n	801470a <ip4_input+0x11a>
          netif = NULL;
 8014704:	2300      	movs	r3, #0
 8014706:	613b      	str	r3, [r7, #16]
          break;
 8014708:	e012      	b.n	8014730 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801470a:	2300      	movs	r3, #0
 801470c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801470e:	4b56      	ldr	r3, [pc, #344]	; (8014868 <ip4_input+0x278>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	613b      	str	r3, [r7, #16]
 8014714:	e002      	b.n	801471c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801471c:	693a      	ldr	r2, [r7, #16]
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	429a      	cmp	r2, r3
 8014722:	d102      	bne.n	801472a <ip4_input+0x13a>
        netif = netif->next;
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d1c4      	bne.n	80146ba <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014730:	4b4c      	ldr	r3, [pc, #304]	; (8014864 <ip4_input+0x274>)
 8014732:	691b      	ldr	r3, [r3, #16]
 8014734:	6839      	ldr	r1, [r7, #0]
 8014736:	4618      	mov	r0, r3
 8014738:	f000 f96a 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d105      	bne.n	801474e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014742:	4b48      	ldr	r3, [pc, #288]	; (8014864 <ip4_input+0x274>)
 8014744:	691b      	ldr	r3, [r3, #16]
 8014746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801474a:	2be0      	cmp	r3, #224	; 0xe0
 801474c:	d104      	bne.n	8014758 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f7f8 fdaa 	bl	800d2a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014754:	2300      	movs	r3, #0
 8014756:	e081      	b.n	801485c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d104      	bne.n	8014768 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7f8 fda2 	bl	800d2a8 <pbuf_free>
    return ERR_OK;
 8014764:	2300      	movs	r3, #0
 8014766:	e079      	b.n	801485c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	88db      	ldrh	r3, [r3, #6]
 801476c:	b29b      	uxth	r3, r3
 801476e:	461a      	mov	r2, r3
 8014770:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014774:	4013      	ands	r3, r2
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00b      	beq.n	8014792 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f000 fc8e 	bl	801509c <ip4_reass>
 8014780:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d101      	bne.n	801478c <ip4_input+0x19c>
      return ERR_OK;
 8014788:	2300      	movs	r3, #0
 801478a:	e067      	b.n	801485c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014792:	4a34      	ldr	r2, [pc, #208]	; (8014864 <ip4_input+0x274>)
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014798:	4a32      	ldr	r2, [pc, #200]	; (8014864 <ip4_input+0x274>)
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801479e:	4a31      	ldr	r2, [pc, #196]	; (8014864 <ip4_input+0x274>)
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	f003 030f 	and.w	r3, r3, #15
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	009b      	lsls	r3, r3, #2
 80147b2:	b29a      	uxth	r2, r3
 80147b4:	4b2b      	ldr	r3, [pc, #172]	; (8014864 <ip4_input+0x274>)
 80147b6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80147b8:	897b      	ldrh	r3, [r7, #10]
 80147ba:	425b      	negs	r3, r3
 80147bc:	b29b      	uxth	r3, r3
 80147be:	b21b      	sxth	r3, r3
 80147c0:	4619      	mov	r1, r3
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7f8 fd4c 	bl	800d260 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	7a5b      	ldrb	r3, [r3, #9]
 80147cc:	2b06      	cmp	r3, #6
 80147ce:	d009      	beq.n	80147e4 <ip4_input+0x1f4>
 80147d0:	2b11      	cmp	r3, #17
 80147d2:	d002      	beq.n	80147da <ip4_input+0x1ea>
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d00a      	beq.n	80147ee <ip4_input+0x1fe>
 80147d8:	e00e      	b.n	80147f8 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80147da:	6839      	ldr	r1, [r7, #0]
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7fe fc0b 	bl	8012ff8 <udp_input>
      break;
 80147e2:	e028      	b.n	8014836 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80147e4:	6839      	ldr	r1, [r7, #0]
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7fa fc28 	bl	800f03c <tcp_input>
      break;
 80147ec:	e023      	b.n	8014836 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80147ee:	6839      	ldr	r1, [r7, #0]
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7ff fd05 	bl	8014200 <icmp_input>
      break;
 80147f6:	e01e      	b.n	8014836 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80147f8:	4b1a      	ldr	r3, [pc, #104]	; (8014864 <ip4_input+0x274>)
 80147fa:	695b      	ldr	r3, [r3, #20]
 80147fc:	6939      	ldr	r1, [r7, #16]
 80147fe:	4618      	mov	r0, r3
 8014800:	f000 f906 	bl	8014a10 <ip4_addr_isbroadcast_u32>
 8014804:	4603      	mov	r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	d112      	bne.n	8014830 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801480a:	4b16      	ldr	r3, [pc, #88]	; (8014864 <ip4_input+0x274>)
 801480c:	695b      	ldr	r3, [r3, #20]
 801480e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014812:	2be0      	cmp	r3, #224	; 0xe0
 8014814:	d00c      	beq.n	8014830 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8014816:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801481a:	4619      	mov	r1, r3
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f7f8 fd31 	bl	800d284 <pbuf_header_force>
        p->payload = iphdr;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	697a      	ldr	r2, [r7, #20]
 8014826:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014828:	2102      	movs	r1, #2
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff fdee 	bl	801440c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7f8 fd39 	bl	800d2a8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014836:	4b0b      	ldr	r3, [pc, #44]	; (8014864 <ip4_input+0x274>)
 8014838:	2200      	movs	r2, #0
 801483a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801483c:	4b09      	ldr	r3, [pc, #36]	; (8014864 <ip4_input+0x274>)
 801483e:	2200      	movs	r2, #0
 8014840:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014842:	4b08      	ldr	r3, [pc, #32]	; (8014864 <ip4_input+0x274>)
 8014844:	2200      	movs	r2, #0
 8014846:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014848:	4b06      	ldr	r3, [pc, #24]	; (8014864 <ip4_input+0x274>)
 801484a:	2200      	movs	r2, #0
 801484c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801484e:	4b05      	ldr	r3, [pc, #20]	; (8014864 <ip4_input+0x274>)
 8014850:	2200      	movs	r2, #0
 8014852:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014854:	4b03      	ldr	r3, [pc, #12]	; (8014864 <ip4_input+0x274>)
 8014856:	2200      	movs	r2, #0
 8014858:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801485a:	2300      	movs	r3, #0
}
 801485c:	4618      	mov	r0, r3
 801485e:	3718      	adds	r7, #24
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	200079f0 	.word	0x200079f0
 8014868:	2000b0f0 	.word	0x2000b0f0

0801486c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b08a      	sub	sp, #40	; 0x28
 8014870:	af04      	add	r7, sp, #16
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d009      	beq.n	8014898 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d003      	beq.n	8014892 <ip4_output_if+0x26>
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d102      	bne.n	8014898 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	3304      	adds	r3, #4
 8014896:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014898:	78fa      	ldrb	r2, [r7, #3]
 801489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489c:	9302      	str	r3, [sp, #8]
 801489e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80148a2:	9301      	str	r3, [sp, #4]
 80148a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	4613      	mov	r3, r2
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	6979      	ldr	r1, [r7, #20]
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f000 f805 	bl	80148c0 <ip4_output_if_src>
 80148b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3718      	adds	r7, #24
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b088      	sub	sp, #32
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	607a      	str	r2, [r7, #4]
 80148cc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	89db      	ldrh	r3, [r3, #14]
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	d006      	beq.n	80148e4 <ip4_output_if_src+0x24>
 80148d6:	4b48      	ldr	r3, [pc, #288]	; (80149f8 <ip4_output_if_src+0x138>)
 80148d8:	f240 3233 	movw	r2, #819	; 0x333
 80148dc:	4947      	ldr	r1, [pc, #284]	; (80149fc <ip4_output_if_src+0x13c>)
 80148de:	4848      	ldr	r0, [pc, #288]	; (8014a00 <ip4_output_if_src+0x140>)
 80148e0:	f001 f9c2 	bl	8015c68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d060      	beq.n	80149ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80148ea:	2314      	movs	r3, #20
 80148ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80148ee:	2114      	movs	r1, #20
 80148f0:	68f8      	ldr	r0, [r7, #12]
 80148f2:	f7f8 fcb5 	bl	800d260 <pbuf_header>
 80148f6:	4603      	mov	r3, r0
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d002      	beq.n	8014902 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80148fc:	f06f 0301 	mvn.w	r3, #1
 8014900:	e075      	b.n	80149ee <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	895b      	ldrh	r3, [r3, #10]
 801490c:	2b13      	cmp	r3, #19
 801490e:	d806      	bhi.n	801491e <ip4_output_if_src+0x5e>
 8014910:	4b39      	ldr	r3, [pc, #228]	; (80149f8 <ip4_output_if_src+0x138>)
 8014912:	f240 3261 	movw	r2, #865	; 0x361
 8014916:	493b      	ldr	r1, [pc, #236]	; (8014a04 <ip4_output_if_src+0x144>)
 8014918:	4839      	ldr	r0, [pc, #228]	; (8014a00 <ip4_output_if_src+0x140>)
 801491a:	f001 f9a5 	bl	8015c68 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	78fa      	ldrb	r2, [r7, #3]
 8014922:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801492a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014934:	8b7b      	ldrh	r3, [r7, #26]
 8014936:	089b      	lsrs	r3, r3, #2
 8014938:	b29b      	uxth	r3, r3
 801493a:	b2db      	uxtb	r3, r3
 801493c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014940:	b2da      	uxtb	r2, r3
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801494c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	891b      	ldrh	r3, [r3, #8]
 8014952:	4618      	mov	r0, r3
 8014954:	f7f7 fb0e 	bl	800bf74 <lwip_htons>
 8014958:	4603      	mov	r3, r0
 801495a:	461a      	mov	r2, r3
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014960:	69fb      	ldr	r3, [r7, #28]
 8014962:	2200      	movs	r2, #0
 8014964:	719a      	strb	r2, [r3, #6]
 8014966:	2200      	movs	r2, #0
 8014968:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801496a:	4b27      	ldr	r3, [pc, #156]	; (8014a08 <ip4_output_if_src+0x148>)
 801496c:	881b      	ldrh	r3, [r3, #0]
 801496e:	4618      	mov	r0, r3
 8014970:	f7f7 fb00 	bl	800bf74 <lwip_htons>
 8014974:	4603      	mov	r3, r0
 8014976:	461a      	mov	r2, r3
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801497c:	4b22      	ldr	r3, [pc, #136]	; (8014a08 <ip4_output_if_src+0x148>)
 801497e:	881b      	ldrh	r3, [r3, #0]
 8014980:	3301      	adds	r3, #1
 8014982:	b29a      	uxth	r2, r3
 8014984:	4b20      	ldr	r3, [pc, #128]	; (8014a08 <ip4_output_if_src+0x148>)
 8014986:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d104      	bne.n	8014998 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801498e:	4b1f      	ldr	r3, [pc, #124]	; (8014a0c <ip4_output_if_src+0x14c>)
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	60da      	str	r2, [r3, #12]
 8014996:	e003      	b.n	80149a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	2200      	movs	r2, #0
 80149a4:	729a      	strb	r2, [r3, #10]
 80149a6:	2200      	movs	r2, #0
 80149a8:	72da      	strb	r2, [r3, #11]
 80149aa:	e008      	b.n	80149be <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80149b2:	69fb      	ldr	r3, [r7, #28]
 80149b4:	691b      	ldr	r3, [r3, #16]
 80149b6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80149b8:	f107 0314 	add.w	r3, r7, #20
 80149bc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80149be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00c      	beq.n	80149e0 <ip4_output_if_src+0x120>
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	891a      	ldrh	r2, [r3, #8]
 80149ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d906      	bls.n	80149e0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f000 fd0a 	bl	80153f0 <ip4_frag>
 80149dc:	4603      	mov	r3, r0
 80149de:	e006      	b.n	80149ee <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80149e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e2:	695b      	ldr	r3, [r3, #20]
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	68f9      	ldr	r1, [r7, #12]
 80149e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149ea:	4798      	blx	r3
 80149ec:	4603      	mov	r3, r0
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3720      	adds	r7, #32
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	080195e0 	.word	0x080195e0
 80149fc:	08019614 	.word	0x08019614
 8014a00:	08019620 	.word	0x08019620
 8014a04:	08019648 	.word	0x08019648
 8014a08:	20004352 	.word	0x20004352
 8014a0c:	0801d5dc 	.word	0x0801d5dc

08014a10 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014a10:	b480      	push	{r7}
 8014a12:	b085      	sub	sp, #20
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a24:	d002      	beq.n	8014a2c <ip4_addr_isbroadcast_u32+0x1c>
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d101      	bne.n	8014a30 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e02a      	b.n	8014a86 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014a36:	f003 0302 	and.w	r3, r3, #2
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d101      	bne.n	8014a42 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e021      	b.n	8014a86 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	3304      	adds	r3, #4
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d101      	bne.n	8014a52 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	e019      	b.n	8014a86 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	3304      	adds	r3, #4
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	405a      	eors	r2, r3
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	3308      	adds	r3, #8
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	4013      	ands	r3, r2
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d10d      	bne.n	8014a84 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	3308      	adds	r3, #8
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	43da      	mvns	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	3308      	adds	r3, #8
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d101      	bne.n	8014a84 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014a80:	2301      	movs	r3, #1
 8014a82:	e000      	b.n	8014a86 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014a84:	2300      	movs	r3, #0
  }
}
 8014a86:	4618      	mov	r0, r3
 8014a88:	3714      	adds	r7, #20
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a90:	4770      	bx	lr
	...

08014a94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014a9e:	4b12      	ldr	r3, [pc, #72]	; (8014ae8 <ip_reass_tmr+0x54>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014aa4:	e018      	b.n	8014ad8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	7fdb      	ldrb	r3, [r3, #31]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d00b      	beq.n	8014ac6 <ip_reass_tmr+0x32>
      r->timer--;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	7fdb      	ldrb	r3, [r3, #31]
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	b2da      	uxtb	r2, r3
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	60fb      	str	r3, [r7, #12]
 8014ac4:	e008      	b.n	8014ad8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014ad0:	68b9      	ldr	r1, [r7, #8]
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f000 f80a 	bl	8014aec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1e3      	bne.n	8014aa6 <ip_reass_tmr+0x12>
     }
   }
}
 8014ade:	bf00      	nop
 8014ae0:	3710      	adds	r7, #16
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	20004354 	.word	0x20004354

08014aec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b088      	sub	sp, #32
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014af6:	2300      	movs	r3, #0
 8014af8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014afa:	683a      	ldr	r2, [r7, #0]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d105      	bne.n	8014b0e <ip_reass_free_complete_datagram+0x22>
 8014b02:	4b45      	ldr	r3, [pc, #276]	; (8014c18 <ip_reass_free_complete_datagram+0x12c>)
 8014b04:	22ab      	movs	r2, #171	; 0xab
 8014b06:	4945      	ldr	r1, [pc, #276]	; (8014c1c <ip_reass_free_complete_datagram+0x130>)
 8014b08:	4845      	ldr	r0, [pc, #276]	; (8014c20 <ip_reass_free_complete_datagram+0x134>)
 8014b0a:	f001 f8ad 	bl	8015c68 <iprintf>
  if (prev != NULL) {
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d00a      	beq.n	8014b2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d005      	beq.n	8014b2a <ip_reass_free_complete_datagram+0x3e>
 8014b1e:	4b3e      	ldr	r3, [pc, #248]	; (8014c18 <ip_reass_free_complete_datagram+0x12c>)
 8014b20:	22ad      	movs	r2, #173	; 0xad
 8014b22:	4940      	ldr	r1, [pc, #256]	; (8014c24 <ip_reass_free_complete_datagram+0x138>)
 8014b24:	483e      	ldr	r0, [pc, #248]	; (8014c20 <ip_reass_free_complete_datagram+0x134>)
 8014b26:	f001 f89f 	bl	8015c68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	889b      	ldrh	r3, [r3, #4]
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d12a      	bne.n	8014b92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	6858      	ldr	r0, [r3, #4]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	3308      	adds	r3, #8
 8014b52:	2214      	movs	r2, #20
 8014b54:	4619      	mov	r1, r3
 8014b56:	f001 f874 	bl	8015c42 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	69b8      	ldr	r0, [r7, #24]
 8014b5e:	f7ff fc65 	bl	801442c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014b62:	69b8      	ldr	r0, [r7, #24]
 8014b64:	f7f8 fc3a 	bl	800d3dc <pbuf_clen>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b6c:	8bfa      	ldrh	r2, [r7, #30]
 8014b6e:	8a7b      	ldrh	r3, [r7, #18]
 8014b70:	4413      	add	r3, r2
 8014b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b76:	db05      	blt.n	8014b84 <ip_reass_free_complete_datagram+0x98>
 8014b78:	4b27      	ldr	r3, [pc, #156]	; (8014c18 <ip_reass_free_complete_datagram+0x12c>)
 8014b7a:	22bc      	movs	r2, #188	; 0xbc
 8014b7c:	492a      	ldr	r1, [pc, #168]	; (8014c28 <ip_reass_free_complete_datagram+0x13c>)
 8014b7e:	4828      	ldr	r0, [pc, #160]	; (8014c20 <ip_reass_free_complete_datagram+0x134>)
 8014b80:	f001 f872 	bl	8015c68 <iprintf>
    pbufs_freed += clen;
 8014b84:	8bfa      	ldrh	r2, [r7, #30]
 8014b86:	8a7b      	ldrh	r3, [r7, #18]
 8014b88:	4413      	add	r3, r2
 8014b8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014b8c:	69b8      	ldr	r0, [r7, #24]
 8014b8e:	f7f8 fb8b 	bl	800d2a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014b98:	e01f      	b.n	8014bda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014baa:	68f8      	ldr	r0, [r7, #12]
 8014bac:	f7f8 fc16 	bl	800d3dc <pbuf_clen>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014bb4:	8bfa      	ldrh	r2, [r7, #30]
 8014bb6:	8a7b      	ldrh	r3, [r7, #18]
 8014bb8:	4413      	add	r3, r2
 8014bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014bbe:	db05      	blt.n	8014bcc <ip_reass_free_complete_datagram+0xe0>
 8014bc0:	4b15      	ldr	r3, [pc, #84]	; (8014c18 <ip_reass_free_complete_datagram+0x12c>)
 8014bc2:	22cc      	movs	r2, #204	; 0xcc
 8014bc4:	4918      	ldr	r1, [pc, #96]	; (8014c28 <ip_reass_free_complete_datagram+0x13c>)
 8014bc6:	4816      	ldr	r0, [pc, #88]	; (8014c20 <ip_reass_free_complete_datagram+0x134>)
 8014bc8:	f001 f84e 	bl	8015c68 <iprintf>
    pbufs_freed += clen;
 8014bcc:	8bfa      	ldrh	r2, [r7, #30]
 8014bce:	8a7b      	ldrh	r3, [r7, #18]
 8014bd0:	4413      	add	r3, r2
 8014bd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	f7f8 fb67 	bl	800d2a8 <pbuf_free>
  while (p != NULL) {
 8014bda:	69bb      	ldr	r3, [r7, #24]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d1dc      	bne.n	8014b9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014be0:	6839      	ldr	r1, [r7, #0]
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 f8c2 	bl	8014d6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8014be8:	4b10      	ldr	r3, [pc, #64]	; (8014c2c <ip_reass_free_complete_datagram+0x140>)
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	8bfa      	ldrh	r2, [r7, #30]
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d905      	bls.n	8014bfe <ip_reass_free_complete_datagram+0x112>
 8014bf2:	4b09      	ldr	r3, [pc, #36]	; (8014c18 <ip_reass_free_complete_datagram+0x12c>)
 8014bf4:	22d2      	movs	r2, #210	; 0xd2
 8014bf6:	490e      	ldr	r1, [pc, #56]	; (8014c30 <ip_reass_free_complete_datagram+0x144>)
 8014bf8:	4809      	ldr	r0, [pc, #36]	; (8014c20 <ip_reass_free_complete_datagram+0x134>)
 8014bfa:	f001 f835 	bl	8015c68 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8014bfe:	4b0b      	ldr	r3, [pc, #44]	; (8014c2c <ip_reass_free_complete_datagram+0x140>)
 8014c00:	881a      	ldrh	r2, [r3, #0]
 8014c02:	8bfb      	ldrh	r3, [r7, #30]
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	4b08      	ldr	r3, [pc, #32]	; (8014c2c <ip_reass_free_complete_datagram+0x140>)
 8014c0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014c0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3720      	adds	r7, #32
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	08019678 	.word	0x08019678
 8014c1c:	080196b4 	.word	0x080196b4
 8014c20:	080196c0 	.word	0x080196c0
 8014c24:	080196e8 	.word	0x080196e8
 8014c28:	080196fc 	.word	0x080196fc
 8014c2c:	20004358 	.word	0x20004358
 8014c30:	0801971c 	.word	0x0801971c

08014c34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b08a      	sub	sp, #40	; 0x28
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014c42:	2300      	movs	r3, #0
 8014c44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014c46:	2300      	movs	r3, #0
 8014c48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014c52:	4b28      	ldr	r3, [pc, #160]	; (8014cf4 <ip_reass_remove_oldest_datagram+0xc0>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014c58:	e030      	b.n	8014cbc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	695a      	ldr	r2, [r3, #20]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d10c      	bne.n	8014c80 <ip_reass_remove_oldest_datagram+0x4c>
 8014c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c68:	699a      	ldr	r2, [r3, #24]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	691b      	ldr	r3, [r3, #16]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d106      	bne.n	8014c80 <ip_reass_remove_oldest_datagram+0x4c>
 8014c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c74:	899a      	ldrh	r2, [r3, #12]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	889b      	ldrh	r3, [r3, #4]
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d014      	beq.n	8014caa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	3301      	adds	r3, #1
 8014c84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014c86:	6a3b      	ldr	r3, [r7, #32]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d104      	bne.n	8014c96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	61bb      	str	r3, [r7, #24]
 8014c94:	e009      	b.n	8014caa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c98:	7fda      	ldrb	r2, [r3, #31]
 8014c9a:	6a3b      	ldr	r3, [r7, #32]
 8014c9c:	7fdb      	ldrb	r3, [r3, #31]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d803      	bhi.n	8014caa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d001      	beq.n	8014cb6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d1cb      	bne.n	8014c5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014cc2:	6a3b      	ldr	r3, [r7, #32]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d008      	beq.n	8014cda <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014cc8:	69b9      	ldr	r1, [r7, #24]
 8014cca:	6a38      	ldr	r0, [r7, #32]
 8014ccc:	f7ff ff0e 	bl	8014aec <ip_reass_free_complete_datagram>
 8014cd0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014cd2:	697a      	ldr	r2, [r7, #20]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014cda:	697a      	ldr	r2, [r7, #20]
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	da02      	bge.n	8014ce8 <ip_reass_remove_oldest_datagram+0xb4>
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	dcac      	bgt.n	8014c42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014ce8:	697b      	ldr	r3, [r7, #20]
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3728      	adds	r7, #40	; 0x28
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	20004354 	.word	0x20004354

08014cf8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014d02:	2004      	movs	r0, #4
 8014d04:	f7f7 fd24 	bl	800c750 <memp_malloc>
 8014d08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d110      	bne.n	8014d32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014d10:	6839      	ldr	r1, [r7, #0]
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f7ff ff8e 	bl	8014c34 <ip_reass_remove_oldest_datagram>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	dc03      	bgt.n	8014d28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014d20:	2004      	movs	r0, #4
 8014d22:	f7f7 fd15 	bl	800c750 <memp_malloc>
 8014d26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d101      	bne.n	8014d32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	e016      	b.n	8014d60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014d32:	2220      	movs	r2, #32
 8014d34:	2100      	movs	r1, #0
 8014d36:	68f8      	ldr	r0, [r7, #12]
 8014d38:	f000 ff8e 	bl	8015c58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2203      	movs	r2, #3
 8014d40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014d42:	4b09      	ldr	r3, [pc, #36]	; (8014d68 <ip_reass_enqueue_new_datagram+0x70>)
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014d4a:	4a07      	ldr	r2, [pc, #28]	; (8014d68 <ip_reass_enqueue_new_datagram+0x70>)
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	3308      	adds	r3, #8
 8014d54:	2214      	movs	r2, #20
 8014d56:	6879      	ldr	r1, [r7, #4]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f000 ff72 	bl	8015c42 <memcpy>
  return ipr;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	20004354 	.word	0x20004354

08014d6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014d76:	4b10      	ldr	r3, [pc, #64]	; (8014db8 <ip_reass_dequeue_datagram+0x4c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d104      	bne.n	8014d8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4a0c      	ldr	r2, [pc, #48]	; (8014db8 <ip_reass_dequeue_datagram+0x4c>)
 8014d86:	6013      	str	r3, [r2, #0]
 8014d88:	e00d      	b.n	8014da6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d106      	bne.n	8014d9e <ip_reass_dequeue_datagram+0x32>
 8014d90:	4b0a      	ldr	r3, [pc, #40]	; (8014dbc <ip_reass_dequeue_datagram+0x50>)
 8014d92:	f240 1245 	movw	r2, #325	; 0x145
 8014d96:	490a      	ldr	r1, [pc, #40]	; (8014dc0 <ip_reass_dequeue_datagram+0x54>)
 8014d98:	480a      	ldr	r0, [pc, #40]	; (8014dc4 <ip_reass_dequeue_datagram+0x58>)
 8014d9a:	f000 ff65 	bl	8015c68 <iprintf>
    prev->next = ipr->next;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014da6:	6879      	ldr	r1, [r7, #4]
 8014da8:	2004      	movs	r0, #4
 8014daa:	f7f7 fd23 	bl	800c7f4 <memp_free>
}
 8014dae:	bf00      	nop
 8014db0:	3708      	adds	r7, #8
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	20004354 	.word	0x20004354
 8014dbc:	08019678 	.word	0x08019678
 8014dc0:	08019738 	.word	0x08019738
 8014dc4:	080196c0 	.word	0x080196c0

08014dc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08c      	sub	sp, #48	; 0x30
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014dd8:	2301      	movs	r3, #1
 8014dda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	885b      	ldrh	r3, [r3, #2]
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7f7 f8c3 	bl	800bf74 <lwip_htons>
 8014dee:	4603      	mov	r3, r0
 8014df0:	461a      	mov	r2, r3
 8014df2:	69fb      	ldr	r3, [r7, #28]
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	f003 030f 	and.w	r3, r3, #15
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	88db      	ldrh	r3, [r3, #6]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7f7 f8b1 	bl	800bf74 <lwip_htons>
 8014e12:	4603      	mov	r3, r0
 8014e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	00db      	lsls	r3, r3, #3
 8014e1c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e26:	2200      	movs	r2, #0
 8014e28:	701a      	strb	r2, [r3, #0]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	705a      	strb	r2, [r3, #1]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	709a      	strb	r2, [r3, #2]
 8014e32:	2200      	movs	r2, #0
 8014e34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e38:	8b3a      	ldrh	r2, [r7, #24]
 8014e3a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8014e3c:	8b3a      	ldrh	r2, [r7, #24]
 8014e3e:	8b7b      	ldrh	r3, [r7, #26]
 8014e40:	4413      	add	r3, r2
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e46:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8014e4e:	e061      	b.n	8014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8014e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8014e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e58:	889b      	ldrh	r3, [r3, #4]
 8014e5a:	b29a      	uxth	r2, r3
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	889b      	ldrh	r3, [r3, #4]
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d232      	bcs.n	8014ecc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e6a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d01f      	beq.n	8014eb2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e74:	889b      	ldrh	r3, [r3, #4]
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e7a:	88db      	ldrh	r3, [r3, #6]
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	f0c0 80e3 	bcc.w	801504a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8014e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e86:	88db      	ldrh	r3, [r3, #6]
 8014e88:	b29a      	uxth	r2, r3
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	889b      	ldrh	r3, [r3, #4]
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	429a      	cmp	r2, r3
 8014e92:	f200 80da 	bhi.w	801504a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e98:	68ba      	ldr	r2, [r7, #8]
 8014e9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e9e:	88db      	ldrh	r3, [r3, #6]
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea4:	889b      	ldrh	r3, [r3, #4]
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d037      	beq.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014eac:	2300      	movs	r3, #0
 8014eae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014eb0:	e034      	b.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8014eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb4:	88db      	ldrh	r3, [r3, #6]
 8014eb6:	b29a      	uxth	r2, r3
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	889b      	ldrh	r3, [r3, #4]
 8014ebc:	b29b      	uxth	r3, r3
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	f200 80c5 	bhi.w	801504e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	68ba      	ldr	r2, [r7, #8]
 8014ec8:	605a      	str	r2, [r3, #4]
      break;
 8014eca:	e027      	b.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8014ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ece:	889b      	ldrh	r3, [r3, #4]
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	889b      	ldrh	r3, [r3, #4]
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	f000 80ba 	beq.w	8015052 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee0:	889b      	ldrh	r3, [r3, #4]
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	88db      	ldrh	r3, [r3, #6]
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	429a      	cmp	r2, r3
 8014eec:	f0c0 80b3 	bcc.w	8015056 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d009      	beq.n	8014f0a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8014ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef8:	88db      	ldrh	r3, [r3, #6]
 8014efa:	b29a      	uxth	r2, r3
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	889b      	ldrh	r3, [r3, #4]
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d001      	beq.n	8014f0a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d19a      	bne.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8014f1a:	e000      	b.n	8014f1e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8014f1c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d12d      	bne.n	8014f80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8014f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d01c      	beq.n	8014f64 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2c:	88db      	ldrh	r3, [r3, #6]
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f32:	889b      	ldrh	r3, [r3, #4]
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d906      	bls.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8014f3a:	4b51      	ldr	r3, [pc, #324]	; (8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8014f3c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014f40:	4950      	ldr	r1, [pc, #320]	; (8015084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f42:	4851      	ldr	r0, [pc, #324]	; (8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014f44:	f000 fe90 	bl	8015c68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4a:	68ba      	ldr	r2, [r7, #8]
 8014f4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f50:	88db      	ldrh	r3, [r3, #6]
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f56:	889b      	ldrh	r3, [r3, #4]
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d010      	beq.n	8014f80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	623b      	str	r3, [r7, #32]
 8014f62:	e00d      	b.n	8014f80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d006      	beq.n	8014f7a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8014f6c:	4b44      	ldr	r3, [pc, #272]	; (8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8014f6e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8014f72:	4946      	ldr	r1, [pc, #280]	; (801508c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f74:	4844      	ldr	r0, [pc, #272]	; (8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014f76:	f000 fe77 	bl	8015c68 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	68ba      	ldr	r2, [r7, #8]
 8014f7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d105      	bne.n	8014f92 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	7f9b      	ldrb	r3, [r3, #30]
 8014f8a:	f003 0301 	and.w	r3, r3, #1
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d059      	beq.n	8015046 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8014f92:	6a3b      	ldr	r3, [r7, #32]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d04f      	beq.n	8015038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d006      	beq.n	8014fae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	889b      	ldrh	r3, [r3, #4]
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d002      	beq.n	8014fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	623b      	str	r3, [r7, #32]
 8014fb2:	e041      	b.n	8015038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014fbe:	e012      	b.n	8014fe6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8014fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc8:	88db      	ldrh	r3, [r3, #6]
 8014fca:	b29a      	uxth	r2, r3
 8014fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fce:	889b      	ldrh	r3, [r3, #4]
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d002      	beq.n	8014fdc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	623b      	str	r3, [r7, #32]
            break;
 8014fda:	e007      	b.n	8014fec <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8014fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fde:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d1e9      	bne.n	8014fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014fec:	6a3b      	ldr	r3, [r7, #32]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d022      	beq.n	8015038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d106      	bne.n	8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8014ffa:	4b21      	ldr	r3, [pc, #132]	; (8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8014ffc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8015000:	4923      	ldr	r1, [pc, #140]	; (8015090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015002:	4821      	ldr	r0, [pc, #132]	; (8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015004:	f000 fe30 	bl	8015c68 <iprintf>
          LWIP_ASSERT("sanity check",
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015010:	429a      	cmp	r2, r3
 8015012:	d106      	bne.n	8015022 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8015014:	4b1a      	ldr	r3, [pc, #104]	; (8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015016:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801501a:	491d      	ldr	r1, [pc, #116]	; (8015090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801501c:	481a      	ldr	r0, [pc, #104]	; (8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801501e:	f000 fe23 	bl	8015c68 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d006      	beq.n	8015038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801502a:	4b15      	ldr	r3, [pc, #84]	; (8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801502c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015030:	4918      	ldr	r1, [pc, #96]	; (8015094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015032:	4815      	ldr	r0, [pc, #84]	; (8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015034:	f000 fe18 	bl	8015c68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015038:	6a3b      	ldr	r3, [r7, #32]
 801503a:	2b00      	cmp	r3, #0
 801503c:	bf14      	ite	ne
 801503e:	2301      	movne	r3, #1
 8015040:	2300      	moveq	r3, #0
 8015042:	b2db      	uxtb	r3, r3
 8015044:	e018      	b.n	8015078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015046:	2300      	movs	r3, #0
 8015048:	e016      	b.n	8015078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 801504a:	bf00      	nop
 801504c:	e004      	b.n	8015058 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801504e:	bf00      	nop
 8015050:	e002      	b.n	8015058 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015052:	bf00      	nop
 8015054:	e000      	b.n	8015058 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015056:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8015058:	68b8      	ldr	r0, [r7, #8]
 801505a:	f7f8 f9bf 	bl	800d3dc <pbuf_clen>
 801505e:	4603      	mov	r3, r0
 8015060:	461a      	mov	r2, r3
 8015062:	4b0d      	ldr	r3, [pc, #52]	; (8015098 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015064:	881b      	ldrh	r3, [r3, #0]
 8015066:	1a9b      	subs	r3, r3, r2
 8015068:	b29a      	uxth	r2, r3
 801506a:	4b0b      	ldr	r3, [pc, #44]	; (8015098 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801506c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801506e:	68b8      	ldr	r0, [r7, #8]
 8015070:	f7f8 f91a 	bl	800d2a8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015074:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8015078:	4618      	mov	r0, r3
 801507a:	3730      	adds	r7, #48	; 0x30
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	08019678 	.word	0x08019678
 8015084:	08019754 	.word	0x08019754
 8015088:	080196c0 	.word	0x080196c0
 801508c:	08019774 	.word	0x08019774
 8015090:	080197ac 	.word	0x080197ac
 8015094:	080197bc 	.word	0x080197bc
 8015098:	20004358 	.word	0x20004358

0801509c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b08e      	sub	sp, #56	; 0x38
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80150aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ac:	781b      	ldrb	r3, [r3, #0]
 80150ae:	f003 030f 	and.w	r3, r3, #15
 80150b2:	009b      	lsls	r3, r3, #2
 80150b4:	2b14      	cmp	r3, #20
 80150b6:	f040 8131 	bne.w	801531c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80150ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150bc:	88db      	ldrh	r3, [r3, #6]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f6 ff57 	bl	800bf74 <lwip_htons>
 80150c6:	4603      	mov	r3, r0
 80150c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	00db      	lsls	r3, r3, #3
 80150d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80150d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d4:	885b      	ldrh	r3, [r3, #2]
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	4618      	mov	r0, r3
 80150da:	f7f6 ff4b 	bl	800bf74 <lwip_htons>
 80150de:	4603      	mov	r3, r0
 80150e0:	461a      	mov	r2, r3
 80150e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	f003 030f 	and.w	r3, r3, #15
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	009b      	lsls	r3, r3, #2
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f7f8 f970 	bl	800d3dc <pbuf_clen>
 80150fc:	4603      	mov	r3, r0
 80150fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015100:	4b8d      	ldr	r3, [pc, #564]	; (8015338 <ip4_reass+0x29c>)
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	461a      	mov	r2, r3
 8015106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015108:	4413      	add	r3, r2
 801510a:	2b0a      	cmp	r3, #10
 801510c:	dd10      	ble.n	8015130 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801510e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015110:	4619      	mov	r1, r3
 8015112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015114:	f7ff fd8e 	bl	8014c34 <ip_reass_remove_oldest_datagram>
 8015118:	4603      	mov	r3, r0
 801511a:	2b00      	cmp	r3, #0
 801511c:	f000 8100 	beq.w	8015320 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015120:	4b85      	ldr	r3, [pc, #532]	; (8015338 <ip4_reass+0x29c>)
 8015122:	881b      	ldrh	r3, [r3, #0]
 8015124:	461a      	mov	r2, r3
 8015126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015128:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801512a:	2b0a      	cmp	r3, #10
 801512c:	f300 80f8 	bgt.w	8015320 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015130:	4b82      	ldr	r3, [pc, #520]	; (801533c <ip4_reass+0x2a0>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	633b      	str	r3, [r7, #48]	; 0x30
 8015136:	e015      	b.n	8015164 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513a:	695a      	ldr	r2, [r3, #20]
 801513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	429a      	cmp	r2, r3
 8015142:	d10c      	bne.n	801515e <ip4_reass+0xc2>
 8015144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015146:	699a      	ldr	r2, [r3, #24]
 8015148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514a:	691b      	ldr	r3, [r3, #16]
 801514c:	429a      	cmp	r2, r3
 801514e:	d106      	bne.n	801515e <ip4_reass+0xc2>
 8015150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015152:	899a      	ldrh	r2, [r3, #12]
 8015154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015156:	889b      	ldrh	r3, [r3, #4]
 8015158:	b29b      	uxth	r3, r3
 801515a:	429a      	cmp	r2, r3
 801515c:	d006      	beq.n	801516c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	633b      	str	r3, [r7, #48]	; 0x30
 8015164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1e6      	bne.n	8015138 <ip4_reass+0x9c>
 801516a:	e000      	b.n	801516e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801516c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015170:	2b00      	cmp	r3, #0
 8015172:	d109      	bne.n	8015188 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015176:	4619      	mov	r1, r3
 8015178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801517a:	f7ff fdbd 	bl	8014cf8 <ip_reass_enqueue_new_datagram>
 801517e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015182:	2b00      	cmp	r3, #0
 8015184:	d11c      	bne.n	80151c0 <ip4_reass+0x124>
      goto nullreturn;
 8015186:	e0ce      	b.n	8015326 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518a:	88db      	ldrh	r3, [r3, #6]
 801518c:	b29b      	uxth	r3, r3
 801518e:	4618      	mov	r0, r3
 8015190:	f7f6 fef0 	bl	800bf74 <lwip_htons>
 8015194:	4603      	mov	r3, r0
 8015196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801519a:	2b00      	cmp	r3, #0
 801519c:	d110      	bne.n	80151c0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a0:	89db      	ldrh	r3, [r3, #14]
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7f6 fee6 	bl	800bf74 <lwip_htons>
 80151a8:	4603      	mov	r3, r0
 80151aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d006      	beq.n	80151c0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80151b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b4:	3308      	adds	r3, #8
 80151b6:	2214      	movs	r2, #20
 80151b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80151ba:	4618      	mov	r0, r3
 80151bc:	f000 fd41 	bl	8015c42 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80151c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c2:	88db      	ldrh	r3, [r3, #6]
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	f003 0320 	and.w	r3, r3, #32
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	bf0c      	ite	eq
 80151ce:	2301      	moveq	r3, #1
 80151d0:	2300      	movne	r3, #0
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d00e      	beq.n	80151fa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80151dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80151de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151e0:	4413      	add	r3, r2
 80151e2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80151e4:	8b7a      	ldrh	r2, [r7, #26]
 80151e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80151e8:	429a      	cmp	r2, r3
 80151ea:	f0c0 8099 	bcc.w	8015320 <ip4_reass+0x284>
 80151ee:	8b7b      	ldrh	r3, [r7, #26]
 80151f0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80151f4:	4293      	cmp	r3, r2
 80151f6:	f200 8093 	bhi.w	8015320 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80151fa:	69fa      	ldr	r2, [r7, #28]
 80151fc:	6879      	ldr	r1, [r7, #4]
 80151fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015200:	f7ff fde2 	bl	8014dc8 <ip_reass_chain_frag_into_datagram_and_validate>
 8015204:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801520c:	f000 808a 	beq.w	8015324 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015210:	4b49      	ldr	r3, [pc, #292]	; (8015338 <ip4_reass+0x29c>)
 8015212:	881a      	ldrh	r2, [r3, #0]
 8015214:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015216:	4413      	add	r3, r2
 8015218:	b29a      	uxth	r2, r3
 801521a:	4b47      	ldr	r3, [pc, #284]	; (8015338 <ip4_reass+0x29c>)
 801521c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801521e:	69fb      	ldr	r3, [r7, #28]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d00d      	beq.n	8015240 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8015224:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015228:	4413      	add	r3, r2
 801522a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522e:	8a7a      	ldrh	r2, [r7, #18]
 8015230:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015234:	7f9b      	ldrb	r3, [r3, #30]
 8015236:	f043 0301 	orr.w	r3, r3, #1
 801523a:	b2da      	uxtb	r2, r3
 801523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	2b01      	cmp	r3, #1
 8015244:	d168      	bne.n	8015318 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8015246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015248:	8b9b      	ldrh	r3, [r3, #28]
 801524a:	3314      	adds	r3, #20
 801524c:	b29a      	uxth	r2, r3
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8015252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015266:	3308      	adds	r3, #8
 8015268:	2214      	movs	r2, #20
 801526a:	4619      	mov	r1, r3
 801526c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801526e:	f000 fce8 	bl	8015c42 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8015272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015274:	8b9b      	ldrh	r3, [r3, #28]
 8015276:	4618      	mov	r0, r3
 8015278:	f7f6 fe7c 	bl	800bf74 <lwip_htons>
 801527c:	4603      	mov	r3, r0
 801527e:	461a      	mov	r2, r3
 8015280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015282:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015286:	2200      	movs	r2, #0
 8015288:	719a      	strb	r2, [r3, #6]
 801528a:	2200      	movs	r2, #0
 801528c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015290:	2200      	movs	r2, #0
 8015292:	729a      	strb	r2, [r3, #10]
 8015294:	2200      	movs	r2, #0
 8015296:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801529e:	e00e      	b.n	80152be <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80152a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80152a6:	f06f 0113 	mvn.w	r1, #19
 80152aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80152ac:	f7f7 ffd8 	bl	800d260 <pbuf_header>
      pbuf_cat(p, r);
 80152b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f7f8 f8d2 	bl	800d45c <pbuf_cat>
      r = iprh->next_pbuf;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80152be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d1ed      	bne.n	80152a0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80152c4:	4b1d      	ldr	r3, [pc, #116]	; (801533c <ip4_reass+0x2a0>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d102      	bne.n	80152d4 <ip4_reass+0x238>
      ipr_prev = NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152d2:	e010      	b.n	80152f6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80152d4:	4b19      	ldr	r3, [pc, #100]	; (801533c <ip4_reass+0x2a0>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152da:	e007      	b.n	80152ec <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80152dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d006      	beq.n	80152f4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80152e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d1f4      	bne.n	80152dc <ip4_reass+0x240>
 80152f2:	e000      	b.n	80152f6 <ip4_reass+0x25a>
          break;
 80152f4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80152f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152fa:	f7ff fd37 	bl	8014d6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f7f8 f86c 	bl	800d3dc <pbuf_clen>
 8015304:	4603      	mov	r3, r0
 8015306:	461a      	mov	r2, r3
 8015308:	4b0b      	ldr	r3, [pc, #44]	; (8015338 <ip4_reass+0x29c>)
 801530a:	881b      	ldrh	r3, [r3, #0]
 801530c:	1a9b      	subs	r3, r3, r2
 801530e:	b29a      	uxth	r2, r3
 8015310:	4b09      	ldr	r3, [pc, #36]	; (8015338 <ip4_reass+0x29c>)
 8015312:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	e00a      	b.n	801532e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015318:	2300      	movs	r3, #0
 801531a:	e008      	b.n	801532e <ip4_reass+0x292>
    goto nullreturn;
 801531c:	bf00      	nop
 801531e:	e002      	b.n	8015326 <ip4_reass+0x28a>

nullreturn:
 8015320:	bf00      	nop
 8015322:	e000      	b.n	8015326 <ip4_reass+0x28a>
    goto nullreturn;
 8015324:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7f7 ffbe 	bl	800d2a8 <pbuf_free>
  return NULL;
 801532c:	2300      	movs	r3, #0
}
 801532e:	4618      	mov	r0, r3
 8015330:	3738      	adds	r7, #56	; 0x38
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	20004358 	.word	0x20004358
 801533c:	20004354 	.word	0x20004354

08015340 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8015344:	2005      	movs	r0, #5
 8015346:	f7f7 fa03 	bl	800c750 <memp_malloc>
 801534a:	4603      	mov	r3, r0
}
 801534c:	4618      	mov	r0, r3
 801534e:	bd80      	pop	{r7, pc}

08015350 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d106      	bne.n	801536c <ip_frag_free_pbuf_custom_ref+0x1c>
 801535e:	4b07      	ldr	r3, [pc, #28]	; (801537c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015360:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015364:	4906      	ldr	r1, [pc, #24]	; (8015380 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015366:	4807      	ldr	r0, [pc, #28]	; (8015384 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015368:	f000 fc7e 	bl	8015c68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801536c:	6879      	ldr	r1, [r7, #4]
 801536e:	2005      	movs	r0, #5
 8015370:	f7f7 fa40 	bl	800c7f4 <memp_free>
}
 8015374:	bf00      	nop
 8015376:	3708      	adds	r7, #8
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}
 801537c:	08019678 	.word	0x08019678
 8015380:	080197e0 	.word	0x080197e0
 8015384:	080196c0 	.word	0x080196c0

08015388 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d106      	bne.n	80153a8 <ipfrag_free_pbuf_custom+0x20>
 801539a:	4b11      	ldr	r3, [pc, #68]	; (80153e0 <ipfrag_free_pbuf_custom+0x58>)
 801539c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80153a0:	4910      	ldr	r1, [pc, #64]	; (80153e4 <ipfrag_free_pbuf_custom+0x5c>)
 80153a2:	4811      	ldr	r0, [pc, #68]	; (80153e8 <ipfrag_free_pbuf_custom+0x60>)
 80153a4:	f000 fc60 	bl	8015c68 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80153a8:	68fa      	ldr	r2, [r7, #12]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d006      	beq.n	80153be <ipfrag_free_pbuf_custom+0x36>
 80153b0:	4b0b      	ldr	r3, [pc, #44]	; (80153e0 <ipfrag_free_pbuf_custom+0x58>)
 80153b2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80153b6:	490d      	ldr	r1, [pc, #52]	; (80153ec <ipfrag_free_pbuf_custom+0x64>)
 80153b8:	480b      	ldr	r0, [pc, #44]	; (80153e8 <ipfrag_free_pbuf_custom+0x60>)
 80153ba:	f000 fc55 	bl	8015c68 <iprintf>
  if (pcr->original != NULL) {
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	695b      	ldr	r3, [r3, #20]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d004      	beq.n	80153d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	695b      	ldr	r3, [r3, #20]
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7f7 ff6c 	bl	800d2a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80153d0:	68f8      	ldr	r0, [r7, #12]
 80153d2:	f7ff ffbd 	bl	8015350 <ip_frag_free_pbuf_custom_ref>
}
 80153d6:	bf00      	nop
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	08019678 	.word	0x08019678
 80153e4:	080197ec 	.word	0x080197ec
 80153e8:	080196c0 	.word	0x080196c0
 80153ec:	080197f8 	.word	0x080197f8

080153f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b092      	sub	sp, #72	; 0x48
 80153f4:	af02      	add	r7, sp, #8
 80153f6:	60f8      	str	r0, [r7, #12]
 80153f8:	60b9      	str	r1, [r7, #8]
 80153fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015404:	3b14      	subs	r3, #20
 8015406:	2b00      	cmp	r3, #0
 8015408:	da00      	bge.n	801540c <ip4_frag+0x1c>
 801540a:	3307      	adds	r3, #7
 801540c:	10db      	asrs	r3, r3, #3
 801540e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015410:	2314      	movs	r3, #20
 8015412:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	f003 030f 	and.w	r3, r3, #15
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	2b14      	cmp	r3, #20
 801542a:	d009      	beq.n	8015440 <ip4_frag+0x50>
 801542c:	4b79      	ldr	r3, [pc, #484]	; (8015614 <ip4_frag+0x224>)
 801542e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8015432:	4979      	ldr	r1, [pc, #484]	; (8015618 <ip4_frag+0x228>)
 8015434:	4879      	ldr	r0, [pc, #484]	; (801561c <ip4_frag+0x22c>)
 8015436:	f000 fc17 	bl	8015c68 <iprintf>
 801543a:	f06f 0305 	mvn.w	r3, #5
 801543e:	e0e5      	b.n	801560c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015442:	88db      	ldrh	r3, [r3, #6]
 8015444:	b29b      	uxth	r3, r3
 8015446:	4618      	mov	r0, r3
 8015448:	f7f6 fd94 	bl	800bf74 <lwip_htons>
 801544c:	4603      	mov	r3, r0
 801544e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8015450:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015456:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8015458:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801545a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801545e:	2b00      	cmp	r3, #0
 8015460:	d009      	beq.n	8015476 <ip4_frag+0x86>
 8015462:	4b6c      	ldr	r3, [pc, #432]	; (8015614 <ip4_frag+0x224>)
 8015464:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015468:	496d      	ldr	r1, [pc, #436]	; (8015620 <ip4_frag+0x230>)
 801546a:	486c      	ldr	r0, [pc, #432]	; (801561c <ip4_frag+0x22c>)
 801546c:	f000 fbfc 	bl	8015c68 <iprintf>
 8015470:	f06f 0305 	mvn.w	r3, #5
 8015474:	e0ca      	b.n	801560c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	891b      	ldrh	r3, [r3, #8]
 801547a:	3b14      	subs	r3, #20
 801547c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801547e:	e0bc      	b.n	80155fa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8015480:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015482:	00da      	lsls	r2, r3, #3
 8015484:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015486:	4293      	cmp	r3, r2
 8015488:	bfa8      	it	ge
 801548a:	4613      	movge	r3, r2
 801548c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801548e:	2200      	movs	r2, #0
 8015490:	2114      	movs	r1, #20
 8015492:	2002      	movs	r0, #2
 8015494:	f7f7 fb96 	bl	800cbc4 <pbuf_alloc>
 8015498:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	2b00      	cmp	r3, #0
 801549e:	f000 80b2 	beq.w	8015606 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	895b      	ldrh	r3, [r3, #10]
 80154a6:	2b13      	cmp	r3, #19
 80154a8:	d806      	bhi.n	80154b8 <ip4_frag+0xc8>
 80154aa:	4b5a      	ldr	r3, [pc, #360]	; (8015614 <ip4_frag+0x224>)
 80154ac:	f240 3209 	movw	r2, #777	; 0x309
 80154b0:	495c      	ldr	r1, [pc, #368]	; (8015624 <ip4_frag+0x234>)
 80154b2:	485a      	ldr	r0, [pc, #360]	; (801561c <ip4_frag+0x22c>)
 80154b4:	f000 fbd8 	bl	8015c68 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80154b8:	6a3b      	ldr	r3, [r7, #32]
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	2214      	movs	r2, #20
 80154be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80154c0:	4618      	mov	r0, r3
 80154c2:	f000 fbbe 	bl	8015c42 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80154c6:	6a3b      	ldr	r3, [r7, #32]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80154cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80154d0:	e04f      	b.n	8015572 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	895a      	ldrh	r2, [r3, #10]
 80154d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80154d8:	1ad3      	subs	r3, r2, r3
 80154da:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80154dc:	8b7a      	ldrh	r2, [r7, #26]
 80154de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80154e0:	4293      	cmp	r3, r2
 80154e2:	bf28      	it	cs
 80154e4:	4613      	movcs	r3, r2
 80154e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80154e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d105      	bne.n	80154fa <ip4_frag+0x10a>
        poff = 0;
 80154ee:	2300      	movs	r3, #0
 80154f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	60fb      	str	r3, [r7, #12]
        continue;
 80154f8:	e03b      	b.n	8015572 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80154fa:	f7ff ff21 	bl	8015340 <ip_frag_alloc_pbuf_custom_ref>
 80154fe:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d103      	bne.n	801550e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8015506:	6a38      	ldr	r0, [r7, #32]
 8015508:	f7f7 fece 	bl	800d2a8 <pbuf_free>
        goto memerr;
 801550c:	e07c      	b.n	8015608 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801550e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015516:	4413      	add	r3, r2
 8015518:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801551a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801551c:	9201      	str	r2, [sp, #4]
 801551e:	9300      	str	r3, [sp, #0]
 8015520:	4603      	mov	r3, r0
 8015522:	2202      	movs	r2, #2
 8015524:	2004      	movs	r0, #4
 8015526:	f7f7 fce1 	bl	800ceec <pbuf_alloced_custom>
 801552a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d106      	bne.n	8015540 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015532:	6978      	ldr	r0, [r7, #20]
 8015534:	f7ff ff0c 	bl	8015350 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015538:	6a38      	ldr	r0, [r7, #32]
 801553a:	f7f7 feb5 	bl	800d2a8 <pbuf_free>
        goto memerr;
 801553e:	e063      	b.n	8015608 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8015540:	68f8      	ldr	r0, [r7, #12]
 8015542:	f7f7 ff63 	bl	800d40c <pbuf_ref>
      pcr->original = p;
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	68fa      	ldr	r2, [r7, #12]
 801554a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	4a36      	ldr	r2, [pc, #216]	; (8015628 <ip4_frag+0x238>)
 8015550:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015552:	6939      	ldr	r1, [r7, #16]
 8015554:	6a38      	ldr	r0, [r7, #32]
 8015556:	f7f7 ff81 	bl	800d45c <pbuf_cat>
      left_to_copy -= newpbuflen;
 801555a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801555c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801555e:	1ad3      	subs	r3, r2, r3
 8015560:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8015562:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015564:	2b00      	cmp	r3, #0
 8015566:	d004      	beq.n	8015572 <ip4_frag+0x182>
        poff = 0;
 8015568:	2300      	movs	r3, #0
 801556a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015574:	2b00      	cmp	r3, #0
 8015576:	d1ac      	bne.n	80154d2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8015578:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801557a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801557c:	4413      	add	r3, r2
 801557e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015580:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015586:	3b14      	subs	r3, #20
 8015588:	429a      	cmp	r2, r3
 801558a:	bfd4      	ite	le
 801558c:	2301      	movle	r3, #1
 801558e:	2300      	movgt	r3, #0
 8015590:	b2db      	uxtb	r3, r3
 8015592:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015594:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801559a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d103      	bne.n	80155aa <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80155a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80155a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80155a8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80155aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7f6 fce1 	bl	800bf74 <lwip_htons>
 80155b2:	4603      	mov	r3, r0
 80155b4:	461a      	mov	r2, r3
 80155b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80155ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80155bc:	3314      	adds	r3, #20
 80155be:	b29b      	uxth	r3, r3
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7f6 fcd7 	bl	800bf74 <lwip_htons>
 80155c6:	4603      	mov	r3, r0
 80155c8:	461a      	mov	r2, r3
 80155ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80155ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d0:	2200      	movs	r2, #0
 80155d2:	729a      	strb	r2, [r3, #10]
 80155d4:	2200      	movs	r2, #0
 80155d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	695b      	ldr	r3, [r3, #20]
 80155dc:	687a      	ldr	r2, [r7, #4]
 80155de:	6a39      	ldr	r1, [r7, #32]
 80155e0:	68b8      	ldr	r0, [r7, #8]
 80155e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80155e4:	6a38      	ldr	r0, [r7, #32]
 80155e6:	f7f7 fe5f 	bl	800d2a8 <pbuf_free>
    left -= fragsize;
 80155ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80155ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80155ee:	1ad3      	subs	r3, r2, r3
 80155f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80155f2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80155f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80155f6:	4413      	add	r3, r2
 80155f8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80155fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	f47f af3f 	bne.w	8015480 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	e002      	b.n	801560c <ip4_frag+0x21c>
      goto memerr;
 8015606:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015608:	f04f 33ff 	mov.w	r3, #4294967295
}
 801560c:	4618      	mov	r0, r3
 801560e:	3740      	adds	r7, #64	; 0x40
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}
 8015614:	08019678 	.word	0x08019678
 8015618:	08019804 	.word	0x08019804
 801561c:	080196c0 	.word	0x080196c0
 8015620:	0801982c 	.word	0x0801982c
 8015624:	08019848 	.word	0x08019848
 8015628:	08015389 	.word	0x08015389

0801562c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b086      	sub	sp, #24
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8015636:	230e      	movs	r3, #14
 8015638:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	895b      	ldrh	r3, [r3, #10]
 801563e:	2b0e      	cmp	r3, #14
 8015640:	d977      	bls.n	8015732 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	7b1a      	ldrb	r2, [r3, #12]
 801564c:	7b5b      	ldrb	r3, [r3, #13]
 801564e:	021b      	lsls	r3, r3, #8
 8015650:	4313      	orrs	r3, r2
 8015652:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f003 0301 	and.w	r3, r3, #1
 801565c:	2b00      	cmp	r3, #0
 801565e:	d023      	beq.n	80156a8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	2b01      	cmp	r3, #1
 8015666:	d10f      	bne.n	8015688 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	785b      	ldrb	r3, [r3, #1]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d11b      	bne.n	80156a8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015674:	2b5e      	cmp	r3, #94	; 0x5e
 8015676:	d117      	bne.n	80156a8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	7b5b      	ldrb	r3, [r3, #13]
 801567c:	f043 0310 	orr.w	r3, r3, #16
 8015680:	b2da      	uxtb	r2, r3
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	735a      	strb	r2, [r3, #13]
 8015686:	e00f      	b.n	80156a8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	2206      	movs	r2, #6
 801568c:	4930      	ldr	r1, [pc, #192]	; (8015750 <ethernet_input+0x124>)
 801568e:	4618      	mov	r0, r3
 8015690:	f000 fac8 	bl	8015c24 <memcmp>
 8015694:	4603      	mov	r3, r0
 8015696:	2b00      	cmp	r3, #0
 8015698:	d106      	bne.n	80156a8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	7b5b      	ldrb	r3, [r3, #13]
 801569e:	f043 0308 	orr.w	r3, r3, #8
 80156a2:	b2da      	uxtb	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80156a8:	89fb      	ldrh	r3, [r7, #14]
 80156aa:	2b08      	cmp	r3, #8
 80156ac:	d003      	beq.n	80156b6 <ethernet_input+0x8a>
 80156ae:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80156b2:	d01e      	beq.n	80156f2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80156b4:	e044      	b.n	8015740 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80156bc:	f003 0308 	and.w	r3, r3, #8
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d038      	beq.n	8015736 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	895b      	ldrh	r3, [r3, #10]
 80156c8:	461a      	mov	r2, r3
 80156ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	db33      	blt.n	801573a <ethernet_input+0x10e>
 80156d2:	8afb      	ldrh	r3, [r7, #22]
 80156d4:	425b      	negs	r3, r3
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	b21b      	sxth	r3, r3
 80156da:	4619      	mov	r1, r3
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f7f7 fdbf 	bl	800d260 <pbuf_header>
 80156e2:	4603      	mov	r3, r0
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d128      	bne.n	801573a <ethernet_input+0x10e>
        ip4_input(p, netif);
 80156e8:	6839      	ldr	r1, [r7, #0]
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7fe ff80 	bl	80145f0 <ip4_input>
      break;
 80156f0:	e01d      	b.n	801572e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80156f8:	f003 0308 	and.w	r3, r3, #8
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d01e      	beq.n	801573e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	895b      	ldrh	r3, [r3, #10]
 8015704:	461a      	mov	r2, r3
 8015706:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801570a:	429a      	cmp	r2, r3
 801570c:	db15      	blt.n	801573a <ethernet_input+0x10e>
 801570e:	8afb      	ldrh	r3, [r7, #22]
 8015710:	425b      	negs	r3, r3
 8015712:	b29b      	uxth	r3, r3
 8015714:	b21b      	sxth	r3, r3
 8015716:	4619      	mov	r1, r3
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f7f7 fda1 	bl	800d260 <pbuf_header>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d10a      	bne.n	801573a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8015724:	6839      	ldr	r1, [r7, #0]
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f7fe f94e 	bl	80139c8 <etharp_input>
      break;
 801572c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	e00a      	b.n	8015748 <ethernet_input+0x11c>
    goto free_and_return;
 8015732:	bf00      	nop
 8015734:	e004      	b.n	8015740 <ethernet_input+0x114>
        goto free_and_return;
 8015736:	bf00      	nop
 8015738:	e002      	b.n	8015740 <ethernet_input+0x114>

free_and_return:
 801573a:	bf00      	nop
 801573c:	e000      	b.n	8015740 <ethernet_input+0x114>
        goto free_and_return;
 801573e:	bf00      	nop
  pbuf_free(p);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7f7 fdb1 	bl	800d2a8 <pbuf_free>
  return ERR_OK;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3718      	adds	r7, #24
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	0801d5e0 	.word	0x0801d5e0

08015754 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b086      	sub	sp, #24
 8015758:	af00      	add	r7, sp, #0
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	60b9      	str	r1, [r7, #8]
 801575e:	607a      	str	r2, [r7, #4]
 8015760:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015762:	8c3b      	ldrh	r3, [r7, #32]
 8015764:	4618      	mov	r0, r3
 8015766:	f7f6 fc05 	bl	800bf74 <lwip_htons>
 801576a:	4603      	mov	r3, r0
 801576c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801576e:	210e      	movs	r1, #14
 8015770:	68b8      	ldr	r0, [r7, #8]
 8015772:	f7f7 fd75 	bl	800d260 <pbuf_header>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d125      	bne.n	80157c8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	8afa      	ldrh	r2, [r7, #22]
 8015786:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	2206      	movs	r2, #6
 801578c:	6839      	ldr	r1, [r7, #0]
 801578e:	4618      	mov	r0, r3
 8015790:	f000 fa57 	bl	8015c42 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	3306      	adds	r3, #6
 8015798:	2206      	movs	r2, #6
 801579a:	6879      	ldr	r1, [r7, #4]
 801579c:	4618      	mov	r0, r3
 801579e:	f000 fa50 	bl	8015c42 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80157a8:	2b06      	cmp	r3, #6
 80157aa:	d006      	beq.n	80157ba <ethernet_output+0x66>
 80157ac:	4b0a      	ldr	r3, [pc, #40]	; (80157d8 <ethernet_output+0x84>)
 80157ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80157b2:	490a      	ldr	r1, [pc, #40]	; (80157dc <ethernet_output+0x88>)
 80157b4:	480a      	ldr	r0, [pc, #40]	; (80157e0 <ethernet_output+0x8c>)
 80157b6:	f000 fa57 	bl	8015c68 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	699b      	ldr	r3, [r3, #24]
 80157be:	68b9      	ldr	r1, [r7, #8]
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	4798      	blx	r3
 80157c4:	4603      	mov	r3, r0
 80157c6:	e002      	b.n	80157ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80157c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80157ca:	f06f 0301 	mvn.w	r3, #1
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3718      	adds	r7, #24
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	08019868 	.word	0x08019868
 80157dc:	080198a0 	.word	0x080198a0
 80157e0:	080198d4 	.word	0x080198d4

080157e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b086      	sub	sp, #24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	60bb      	str	r3, [r7, #8]
 80157f2:	2304      	movs	r3, #4
 80157f4:	60fb      	str	r3, [r7, #12]
 80157f6:	2300      	movs	r3, #0
 80157f8:	613b      	str	r3, [r7, #16]
 80157fa:	2300      	movs	r3, #0
 80157fc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80157fe:	f107 0308 	add.w	r3, r7, #8
 8015802:	2100      	movs	r1, #0
 8015804:	4618      	mov	r0, r3
 8015806:	f7f1 fc06 	bl	8007016 <osMessageCreate>
 801580a:	4602      	mov	r2, r0
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d102      	bne.n	801581e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015818:	f04f 33ff 	mov.w	r3, #4294967295
 801581c:	e000      	b.n	8015820 <sys_mbox_new+0x3c>

  return ERR_OK;
 801581e:	2300      	movs	r3, #0
}
 8015820:	4618      	mov	r0, r3
 8015822:	3718      	adds	r7, #24
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	4618      	mov	r0, r3
 8015836:	f7f1 fccb 	bl	80071d0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	4618      	mov	r0, r3
 8015840:	f7f1 fcdc 	bl	80071fc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015844:	bf00      	nop
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8015856:	bf00      	nop
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	6839      	ldr	r1, [r7, #0]
 801585e:	f04f 32ff 	mov.w	r2, #4294967295
 8015862:	4618      	mov	r0, r3
 8015864:	f7f1 fc00 	bl	8007068 <osMessagePut>
 8015868:	4603      	mov	r3, r0
 801586a:	2b00      	cmp	r3, #0
 801586c:	d1f4      	bne.n	8015858 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801586e:	bf00      	nop
 8015870:	3708      	adds	r7, #8
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}

08015876 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015876:	b580      	push	{r7, lr}
 8015878:	b084      	sub	sp, #16
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
 801587e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	6839      	ldr	r1, [r7, #0]
 8015886:	2200      	movs	r2, #0
 8015888:	4618      	mov	r0, r3
 801588a:	f7f1 fbed 	bl	8007068 <osMessagePut>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d102      	bne.n	801589a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015894:	2300      	movs	r3, #0
 8015896:	73fb      	strb	r3, [r7, #15]
 8015898:	e001      	b.n	801589e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801589a:	23ff      	movs	r3, #255	; 0xff
 801589c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801589e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3710      	adds	r7, #16
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}

080158aa <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80158aa:	b580      	push	{r7, lr}
 80158ac:	b08c      	sub	sp, #48	; 0x30
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	61f8      	str	r0, [r7, #28]
 80158b2:	61b9      	str	r1, [r7, #24]
 80158b4:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80158b6:	f7f1 f9eb 	bl	8006c90 <osKernelSysTick>
 80158ba:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d017      	beq.n	80158f2 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80158c2:	69fb      	ldr	r3, [r7, #28]
 80158c4:	6819      	ldr	r1, [r3, #0]
 80158c6:	f107 0320 	add.w	r3, r7, #32
 80158ca:	697a      	ldr	r2, [r7, #20]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7f1 fc0b 	bl	80070e8 <osMessageGet>

    if(event.status == osEventMessage)
 80158d2:	6a3b      	ldr	r3, [r7, #32]
 80158d4:	2b10      	cmp	r3, #16
 80158d6:	d109      	bne.n	80158ec <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80158d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158da:	461a      	mov	r2, r3
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80158e0:	f7f1 f9d6 	bl	8006c90 <osKernelSysTick>
 80158e4:	4602      	mov	r2, r0
 80158e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	e019      	b.n	8015920 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80158ec:	f04f 33ff 	mov.w	r3, #4294967295
 80158f0:	e016      	b.n	8015920 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	6819      	ldr	r1, [r3, #0]
 80158f6:	463b      	mov	r3, r7
 80158f8:	f04f 32ff 	mov.w	r2, #4294967295
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f1 fbf3 	bl	80070e8 <osMessageGet>
 8015902:	f107 0320 	add.w	r3, r7, #32
 8015906:	463a      	mov	r2, r7
 8015908:	ca07      	ldmia	r2, {r0, r1, r2}
 801590a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015910:	461a      	mov	r2, r3
 8015912:	69bb      	ldr	r3, [r7, #24]
 8015914:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015916:	f7f1 f9bb 	bl	8006c90 <osKernelSysTick>
 801591a:	4602      	mov	r2, r0
 801591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591e:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015920:	4618      	mov	r0, r3
 8015922:	3730      	adds	r7, #48	; 0x30
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}

08015928 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6819      	ldr	r1, [r3, #0]
 8015936:	f107 030c 	add.w	r3, r7, #12
 801593a:	2200      	movs	r2, #0
 801593c:	4618      	mov	r0, r3
 801593e:	f7f1 fbd3 	bl	80070e8 <osMessageGet>

  if(event.status == osEventMessage)
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	2b10      	cmp	r3, #16
 8015946:	d105      	bne.n	8015954 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	461a      	mov	r2, r3
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	e001      	b.n	8015958 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015954:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015958:	4618      	mov	r0, r3
 801595a:	3718      	adds	r7, #24
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d101      	bne.n	8015974 <sys_mbox_valid+0x14>
    return 0;
 8015970:	2300      	movs	r3, #0
 8015972:	e000      	b.n	8015976 <sys_mbox_valid+0x16>
  else
    return 1;
 8015974:	2301      	movs	r3, #1
}
 8015976:	4618      	mov	r0, r3
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015980:	4770      	bx	lr

08015982 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015982:	b480      	push	{r7}
 8015984:	b083      	sub	sp, #12
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2200      	movs	r2, #0
 801598e:	601a      	str	r2, [r3, #0]
}
 8015990:	bf00      	nop
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr

0801599c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	460b      	mov	r3, r1
 80159a6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80159a8:	2300      	movs	r3, #0
 80159aa:	60bb      	str	r3, [r7, #8]
 80159ac:	2300      	movs	r3, #0
 80159ae:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80159b0:	f107 0308 	add.w	r3, r7, #8
 80159b4:	2101      	movs	r1, #1
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7f1 fa62 	bl	8006e80 <osSemaphoreCreate>
 80159bc:	4602      	mov	r2, r0
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d102      	bne.n	80159d0 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80159ca:	f04f 33ff 	mov.w	r3, #4294967295
 80159ce:	e009      	b.n	80159e4 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80159d0:	78fb      	ldrb	r3, [r7, #3]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d105      	bne.n	80159e2 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2100      	movs	r1, #0
 80159dc:	4618      	mov	r0, r3
 80159de:	f7f1 fa83 	bl	8006ee8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80159e2:	2300      	movs	r3, #0
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3710      	adds	r7, #16
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}

080159ec <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b084      	sub	sp, #16
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80159f6:	f7f1 f94b 	bl	8006c90 <osKernelSysTick>
 80159fa:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d011      	beq.n	8015a26 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	6839      	ldr	r1, [r7, #0]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f1 fa6d 	bl	8006ee8 <osSemaphoreWait>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d105      	bne.n	8015a20 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015a14:	f7f1 f93c 	bl	8006c90 <osKernelSysTick>
 8015a18:	4602      	mov	r2, r0
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	1ad3      	subs	r3, r2, r3
 8015a1e:	e012      	b.n	8015a46 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015a20:	f04f 33ff 	mov.w	r3, #4294967295
 8015a24:	e00f      	b.n	8015a46 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015a26:	bf00      	nop
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7f1 fa59 	bl	8006ee8 <osSemaphoreWait>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d1f5      	bne.n	8015a28 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015a3c:	f7f1 f928 	bl	8006c90 <osKernelSysTick>
 8015a40:	4602      	mov	r2, r0
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}

08015a4e <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015a4e:	b580      	push	{r7, lr}
 8015a50:	b082      	sub	sp, #8
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7f1 fa92 	bl	8006f84 <osSemaphoreRelease>
}
 8015a60:	bf00      	nop
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7f1 fabb 	bl	8006ff0 <osSemaphoreDelete>
}
 8015a7a:	bf00      	nop
 8015a7c:	3708      	adds	r7, #8
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	bd80      	pop	{r7, pc}

08015a82 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015a82:	b480      	push	{r7}
 8015a84:	b083      	sub	sp, #12
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d101      	bne.n	8015a96 <sys_sem_valid+0x14>
    return 0;
 8015a92:	2300      	movs	r3, #0
 8015a94:	e000      	b.n	8015a98 <sys_sem_valid+0x16>
  else
    return 1;
 8015a96:	2301      	movs	r3, #1
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr

08015aa4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b083      	sub	sp, #12
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	601a      	str	r2, [r3, #0]
}
 8015ab2:	bf00      	nop
 8015ab4:	370c      	adds	r7, #12
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abc:	4770      	bx	lr
	...

08015ac0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015ac4:	4803      	ldr	r0, [pc, #12]	; (8015ad4 <sys_init+0x14>)
 8015ac6:	f7f1 f93f 	bl	8006d48 <osMutexCreate>
 8015aca:	4602      	mov	r2, r0
 8015acc:	4b02      	ldr	r3, [pc, #8]	; (8015ad8 <sys_init+0x18>)
 8015ace:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015ad0:	bf00      	nop
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	0801d5f0 	.word	0x0801d5f0
 8015ad8:	2000b120 	.word	0x2000b120

08015adc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	60bb      	str	r3, [r7, #8]
 8015ae8:	2300      	movs	r3, #0
 8015aea:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015aec:	f107 0308 	add.w	r3, r7, #8
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7f1 f929 	bl	8006d48 <osMutexCreate>
 8015af6:	4602      	mov	r2, r0
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d102      	bne.n	8015b0a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015b04:	f04f 33ff 	mov.w	r3, #4294967295
 8015b08:	e000      	b.n	8015b0c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015b0a:	2300      	movs	r3, #0
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3710      	adds	r7, #16
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	f04f 31ff 	mov.w	r1, #4294967295
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7f1 f927 	bl	8006d78 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015b2a:	bf00      	nop
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}

08015b32 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015b32:	b580      	push	{r7, lr}
 8015b34:	b082      	sub	sp, #8
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f1 f968 	bl	8006e14 <osMutexRelease>
}
 8015b44:	bf00      	nop
 8015b46:	3708      	adds	r7, #8
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b08c      	sub	sp, #48	; 0x30
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	607a      	str	r2, [r7, #4]
 8015b58:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015b5a:	f107 0314 	add.w	r3, r7, #20
 8015b5e:	2200      	movs	r2, #0
 8015b60:	601a      	str	r2, [r3, #0]
 8015b62:	605a      	str	r2, [r3, #4]
 8015b64:	609a      	str	r2, [r3, #8]
 8015b66:	60da      	str	r2, [r3, #12]
 8015b68:	611a      	str	r2, [r3, #16]
 8015b6a:	615a      	str	r2, [r3, #20]
 8015b6c:	619a      	str	r2, [r3, #24]
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	617b      	str	r3, [r7, #20]
 8015b72:	68bb      	ldr	r3, [r7, #8]
 8015b74:	61bb      	str	r3, [r7, #24]
 8015b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b78:	b21b      	sxth	r3, r3
 8015b7a:	83bb      	strh	r3, [r7, #28]
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015b80:	f107 0314 	add.w	r3, r7, #20
 8015b84:	6879      	ldr	r1, [r7, #4]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7f1 f892 	bl	8006cb0 <osThreadCreate>
 8015b8c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3730      	adds	r7, #48	; 0x30
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
	...

08015b98 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015b9c:	4b04      	ldr	r3, [pc, #16]	; (8015bb0 <sys_arch_protect+0x18>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f1 f8e7 	bl	8006d78 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015baa:	2301      	movs	r3, #1
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	2000b120 	.word	0x2000b120

08015bb4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015bbc:	4b04      	ldr	r3, [pc, #16]	; (8015bd0 <sys_arch_unprotect+0x1c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7f1 f927 	bl	8006e14 <osMutexRelease>
}
 8015bc6:	bf00      	nop
 8015bc8:	3708      	adds	r7, #8
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	2000b120 	.word	0x2000b120

08015bd4 <atoi>:
 8015bd4:	220a      	movs	r2, #10
 8015bd6:	2100      	movs	r1, #0
 8015bd8:	f000 b938 	b.w	8015e4c <strtol>

08015bdc <__libc_init_array>:
 8015bdc:	b570      	push	{r4, r5, r6, lr}
 8015bde:	4e0d      	ldr	r6, [pc, #52]	; (8015c14 <__libc_init_array+0x38>)
 8015be0:	4c0d      	ldr	r4, [pc, #52]	; (8015c18 <__libc_init_array+0x3c>)
 8015be2:	1ba4      	subs	r4, r4, r6
 8015be4:	10a4      	asrs	r4, r4, #2
 8015be6:	2500      	movs	r5, #0
 8015be8:	42a5      	cmp	r5, r4
 8015bea:	d109      	bne.n	8015c00 <__libc_init_array+0x24>
 8015bec:	4e0b      	ldr	r6, [pc, #44]	; (8015c1c <__libc_init_array+0x40>)
 8015bee:	4c0c      	ldr	r4, [pc, #48]	; (8015c20 <__libc_init_array+0x44>)
 8015bf0:	f001 f9cc 	bl	8016f8c <_init>
 8015bf4:	1ba4      	subs	r4, r4, r6
 8015bf6:	10a4      	asrs	r4, r4, #2
 8015bf8:	2500      	movs	r5, #0
 8015bfa:	42a5      	cmp	r5, r4
 8015bfc:	d105      	bne.n	8015c0a <__libc_init_array+0x2e>
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c04:	4798      	blx	r3
 8015c06:	3501      	adds	r5, #1
 8015c08:	e7ee      	b.n	8015be8 <__libc_init_array+0xc>
 8015c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c0e:	4798      	blx	r3
 8015c10:	3501      	adds	r5, #1
 8015c12:	e7f2      	b.n	8015bfa <__libc_init_array+0x1e>
 8015c14:	0801d7a4 	.word	0x0801d7a4
 8015c18:	0801d7a4 	.word	0x0801d7a4
 8015c1c:	0801d7a4 	.word	0x0801d7a4
 8015c20:	0801d7a8 	.word	0x0801d7a8

08015c24 <memcmp>:
 8015c24:	b530      	push	{r4, r5, lr}
 8015c26:	2400      	movs	r4, #0
 8015c28:	42a2      	cmp	r2, r4
 8015c2a:	d101      	bne.n	8015c30 <memcmp+0xc>
 8015c2c:	2000      	movs	r0, #0
 8015c2e:	e007      	b.n	8015c40 <memcmp+0x1c>
 8015c30:	5d03      	ldrb	r3, [r0, r4]
 8015c32:	3401      	adds	r4, #1
 8015c34:	190d      	adds	r5, r1, r4
 8015c36:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015c3a:	42ab      	cmp	r3, r5
 8015c3c:	d0f4      	beq.n	8015c28 <memcmp+0x4>
 8015c3e:	1b58      	subs	r0, r3, r5
 8015c40:	bd30      	pop	{r4, r5, pc}

08015c42 <memcpy>:
 8015c42:	b510      	push	{r4, lr}
 8015c44:	1e43      	subs	r3, r0, #1
 8015c46:	440a      	add	r2, r1
 8015c48:	4291      	cmp	r1, r2
 8015c4a:	d100      	bne.n	8015c4e <memcpy+0xc>
 8015c4c:	bd10      	pop	{r4, pc}
 8015c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c56:	e7f7      	b.n	8015c48 <memcpy+0x6>

08015c58 <memset>:
 8015c58:	4402      	add	r2, r0
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	4293      	cmp	r3, r2
 8015c5e:	d100      	bne.n	8015c62 <memset+0xa>
 8015c60:	4770      	bx	lr
 8015c62:	f803 1b01 	strb.w	r1, [r3], #1
 8015c66:	e7f9      	b.n	8015c5c <memset+0x4>

08015c68 <iprintf>:
 8015c68:	b40f      	push	{r0, r1, r2, r3}
 8015c6a:	4b0a      	ldr	r3, [pc, #40]	; (8015c94 <iprintf+0x2c>)
 8015c6c:	b513      	push	{r0, r1, r4, lr}
 8015c6e:	681c      	ldr	r4, [r3, #0]
 8015c70:	b124      	cbz	r4, 8015c7c <iprintf+0x14>
 8015c72:	69a3      	ldr	r3, [r4, #24]
 8015c74:	b913      	cbnz	r3, 8015c7c <iprintf+0x14>
 8015c76:	4620      	mov	r0, r4
 8015c78:	f000 f93e 	bl	8015ef8 <__sinit>
 8015c7c:	ab05      	add	r3, sp, #20
 8015c7e:	9a04      	ldr	r2, [sp, #16]
 8015c80:	68a1      	ldr	r1, [r4, #8]
 8015c82:	9301      	str	r3, [sp, #4]
 8015c84:	4620      	mov	r0, r4
 8015c86:	f000 fbad 	bl	80163e4 <_vfiprintf_r>
 8015c8a:	b002      	add	sp, #8
 8015c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c90:	b004      	add	sp, #16
 8015c92:	4770      	bx	lr
 8015c94:	20000034 	.word	0x20000034

08015c98 <siprintf>:
 8015c98:	b40e      	push	{r1, r2, r3}
 8015c9a:	b500      	push	{lr}
 8015c9c:	b09c      	sub	sp, #112	; 0x70
 8015c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8015ca0:	9002      	str	r0, [sp, #8]
 8015ca2:	9006      	str	r0, [sp, #24]
 8015ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ca8:	4809      	ldr	r0, [pc, #36]	; (8015cd0 <siprintf+0x38>)
 8015caa:	9107      	str	r1, [sp, #28]
 8015cac:	9104      	str	r1, [sp, #16]
 8015cae:	4909      	ldr	r1, [pc, #36]	; (8015cd4 <siprintf+0x3c>)
 8015cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cb4:	9105      	str	r1, [sp, #20]
 8015cb6:	6800      	ldr	r0, [r0, #0]
 8015cb8:	9301      	str	r3, [sp, #4]
 8015cba:	a902      	add	r1, sp, #8
 8015cbc:	f000 fa70 	bl	80161a0 <_svfiprintf_r>
 8015cc0:	9b02      	ldr	r3, [sp, #8]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	701a      	strb	r2, [r3, #0]
 8015cc6:	b01c      	add	sp, #112	; 0x70
 8015cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ccc:	b003      	add	sp, #12
 8015cce:	4770      	bx	lr
 8015cd0:	20000034 	.word	0x20000034
 8015cd4:	ffff0208 	.word	0xffff0208

08015cd8 <strncmp>:
 8015cd8:	b510      	push	{r4, lr}
 8015cda:	b16a      	cbz	r2, 8015cf8 <strncmp+0x20>
 8015cdc:	3901      	subs	r1, #1
 8015cde:	1884      	adds	r4, r0, r2
 8015ce0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015ce4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015ce8:	4293      	cmp	r3, r2
 8015cea:	d103      	bne.n	8015cf4 <strncmp+0x1c>
 8015cec:	42a0      	cmp	r0, r4
 8015cee:	d001      	beq.n	8015cf4 <strncmp+0x1c>
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d1f5      	bne.n	8015ce0 <strncmp+0x8>
 8015cf4:	1a98      	subs	r0, r3, r2
 8015cf6:	bd10      	pop	{r4, pc}
 8015cf8:	4610      	mov	r0, r2
 8015cfa:	e7fc      	b.n	8015cf6 <strncmp+0x1e>

08015cfc <__strtok_r>:
 8015cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cfe:	b918      	cbnz	r0, 8015d08 <__strtok_r+0xc>
 8015d00:	6810      	ldr	r0, [r2, #0]
 8015d02:	b908      	cbnz	r0, 8015d08 <__strtok_r+0xc>
 8015d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d06:	4620      	mov	r0, r4
 8015d08:	4604      	mov	r4, r0
 8015d0a:	460f      	mov	r7, r1
 8015d0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015d10:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015d14:	b91e      	cbnz	r6, 8015d1e <__strtok_r+0x22>
 8015d16:	b96d      	cbnz	r5, 8015d34 <__strtok_r+0x38>
 8015d18:	6015      	str	r5, [r2, #0]
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	e7f2      	b.n	8015d04 <__strtok_r+0x8>
 8015d1e:	42b5      	cmp	r5, r6
 8015d20:	d1f6      	bne.n	8015d10 <__strtok_r+0x14>
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d1ef      	bne.n	8015d06 <__strtok_r+0xa>
 8015d26:	6014      	str	r4, [r2, #0]
 8015d28:	7003      	strb	r3, [r0, #0]
 8015d2a:	e7eb      	b.n	8015d04 <__strtok_r+0x8>
 8015d2c:	462b      	mov	r3, r5
 8015d2e:	e00d      	b.n	8015d4c <__strtok_r+0x50>
 8015d30:	b926      	cbnz	r6, 8015d3c <__strtok_r+0x40>
 8015d32:	461c      	mov	r4, r3
 8015d34:	4623      	mov	r3, r4
 8015d36:	460f      	mov	r7, r1
 8015d38:	f813 5b01 	ldrb.w	r5, [r3], #1
 8015d3c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015d40:	42b5      	cmp	r5, r6
 8015d42:	d1f5      	bne.n	8015d30 <__strtok_r+0x34>
 8015d44:	2d00      	cmp	r5, #0
 8015d46:	d0f1      	beq.n	8015d2c <__strtok_r+0x30>
 8015d48:	2100      	movs	r1, #0
 8015d4a:	7021      	strb	r1, [r4, #0]
 8015d4c:	6013      	str	r3, [r2, #0]
 8015d4e:	e7d9      	b.n	8015d04 <__strtok_r+0x8>

08015d50 <strtok_r>:
 8015d50:	2301      	movs	r3, #1
 8015d52:	f7ff bfd3 	b.w	8015cfc <__strtok_r>

08015d56 <_strtol_l.isra.0>:
 8015d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d5a:	4680      	mov	r8, r0
 8015d5c:	4689      	mov	r9, r1
 8015d5e:	4692      	mov	sl, r2
 8015d60:	461e      	mov	r6, r3
 8015d62:	460f      	mov	r7, r1
 8015d64:	463d      	mov	r5, r7
 8015d66:	9808      	ldr	r0, [sp, #32]
 8015d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d6c:	f000 f94e 	bl	801600c <__locale_ctype_ptr_l>
 8015d70:	4420      	add	r0, r4
 8015d72:	7843      	ldrb	r3, [r0, #1]
 8015d74:	f013 0308 	ands.w	r3, r3, #8
 8015d78:	d132      	bne.n	8015de0 <_strtol_l.isra.0+0x8a>
 8015d7a:	2c2d      	cmp	r4, #45	; 0x2d
 8015d7c:	d132      	bne.n	8015de4 <_strtol_l.isra.0+0x8e>
 8015d7e:	787c      	ldrb	r4, [r7, #1]
 8015d80:	1cbd      	adds	r5, r7, #2
 8015d82:	2201      	movs	r2, #1
 8015d84:	2e00      	cmp	r6, #0
 8015d86:	d05d      	beq.n	8015e44 <_strtol_l.isra.0+0xee>
 8015d88:	2e10      	cmp	r6, #16
 8015d8a:	d109      	bne.n	8015da0 <_strtol_l.isra.0+0x4a>
 8015d8c:	2c30      	cmp	r4, #48	; 0x30
 8015d8e:	d107      	bne.n	8015da0 <_strtol_l.isra.0+0x4a>
 8015d90:	782b      	ldrb	r3, [r5, #0]
 8015d92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015d96:	2b58      	cmp	r3, #88	; 0x58
 8015d98:	d14f      	bne.n	8015e3a <_strtol_l.isra.0+0xe4>
 8015d9a:	786c      	ldrb	r4, [r5, #1]
 8015d9c:	2610      	movs	r6, #16
 8015d9e:	3502      	adds	r5, #2
 8015da0:	2a00      	cmp	r2, #0
 8015da2:	bf14      	ite	ne
 8015da4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015da8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015dac:	2700      	movs	r7, #0
 8015dae:	fbb1 fcf6 	udiv	ip, r1, r6
 8015db2:	4638      	mov	r0, r7
 8015db4:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015db8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015dbc:	2b09      	cmp	r3, #9
 8015dbe:	d817      	bhi.n	8015df0 <_strtol_l.isra.0+0x9a>
 8015dc0:	461c      	mov	r4, r3
 8015dc2:	42a6      	cmp	r6, r4
 8015dc4:	dd23      	ble.n	8015e0e <_strtol_l.isra.0+0xb8>
 8015dc6:	1c7b      	adds	r3, r7, #1
 8015dc8:	d007      	beq.n	8015dda <_strtol_l.isra.0+0x84>
 8015dca:	4584      	cmp	ip, r0
 8015dcc:	d31c      	bcc.n	8015e08 <_strtol_l.isra.0+0xb2>
 8015dce:	d101      	bne.n	8015dd4 <_strtol_l.isra.0+0x7e>
 8015dd0:	45a6      	cmp	lr, r4
 8015dd2:	db19      	blt.n	8015e08 <_strtol_l.isra.0+0xb2>
 8015dd4:	fb00 4006 	mla	r0, r0, r6, r4
 8015dd8:	2701      	movs	r7, #1
 8015dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015dde:	e7eb      	b.n	8015db8 <_strtol_l.isra.0+0x62>
 8015de0:	462f      	mov	r7, r5
 8015de2:	e7bf      	b.n	8015d64 <_strtol_l.isra.0+0xe>
 8015de4:	2c2b      	cmp	r4, #43	; 0x2b
 8015de6:	bf04      	itt	eq
 8015de8:	1cbd      	addeq	r5, r7, #2
 8015dea:	787c      	ldrbeq	r4, [r7, #1]
 8015dec:	461a      	mov	r2, r3
 8015dee:	e7c9      	b.n	8015d84 <_strtol_l.isra.0+0x2e>
 8015df0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015df4:	2b19      	cmp	r3, #25
 8015df6:	d801      	bhi.n	8015dfc <_strtol_l.isra.0+0xa6>
 8015df8:	3c37      	subs	r4, #55	; 0x37
 8015dfa:	e7e2      	b.n	8015dc2 <_strtol_l.isra.0+0x6c>
 8015dfc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015e00:	2b19      	cmp	r3, #25
 8015e02:	d804      	bhi.n	8015e0e <_strtol_l.isra.0+0xb8>
 8015e04:	3c57      	subs	r4, #87	; 0x57
 8015e06:	e7dc      	b.n	8015dc2 <_strtol_l.isra.0+0x6c>
 8015e08:	f04f 37ff 	mov.w	r7, #4294967295
 8015e0c:	e7e5      	b.n	8015dda <_strtol_l.isra.0+0x84>
 8015e0e:	1c7b      	adds	r3, r7, #1
 8015e10:	d108      	bne.n	8015e24 <_strtol_l.isra.0+0xce>
 8015e12:	2322      	movs	r3, #34	; 0x22
 8015e14:	f8c8 3000 	str.w	r3, [r8]
 8015e18:	4608      	mov	r0, r1
 8015e1a:	f1ba 0f00 	cmp.w	sl, #0
 8015e1e:	d107      	bne.n	8015e30 <_strtol_l.isra.0+0xda>
 8015e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e24:	b102      	cbz	r2, 8015e28 <_strtol_l.isra.0+0xd2>
 8015e26:	4240      	negs	r0, r0
 8015e28:	f1ba 0f00 	cmp.w	sl, #0
 8015e2c:	d0f8      	beq.n	8015e20 <_strtol_l.isra.0+0xca>
 8015e2e:	b10f      	cbz	r7, 8015e34 <_strtol_l.isra.0+0xde>
 8015e30:	f105 39ff 	add.w	r9, r5, #4294967295
 8015e34:	f8ca 9000 	str.w	r9, [sl]
 8015e38:	e7f2      	b.n	8015e20 <_strtol_l.isra.0+0xca>
 8015e3a:	2430      	movs	r4, #48	; 0x30
 8015e3c:	2e00      	cmp	r6, #0
 8015e3e:	d1af      	bne.n	8015da0 <_strtol_l.isra.0+0x4a>
 8015e40:	2608      	movs	r6, #8
 8015e42:	e7ad      	b.n	8015da0 <_strtol_l.isra.0+0x4a>
 8015e44:	2c30      	cmp	r4, #48	; 0x30
 8015e46:	d0a3      	beq.n	8015d90 <_strtol_l.isra.0+0x3a>
 8015e48:	260a      	movs	r6, #10
 8015e4a:	e7a9      	b.n	8015da0 <_strtol_l.isra.0+0x4a>

08015e4c <strtol>:
 8015e4c:	4b08      	ldr	r3, [pc, #32]	; (8015e70 <strtol+0x24>)
 8015e4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e50:	681c      	ldr	r4, [r3, #0]
 8015e52:	4d08      	ldr	r5, [pc, #32]	; (8015e74 <strtol+0x28>)
 8015e54:	6a23      	ldr	r3, [r4, #32]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bf08      	it	eq
 8015e5a:	462b      	moveq	r3, r5
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	4613      	mov	r3, r2
 8015e60:	460a      	mov	r2, r1
 8015e62:	4601      	mov	r1, r0
 8015e64:	4620      	mov	r0, r4
 8015e66:	f7ff ff76 	bl	8015d56 <_strtol_l.isra.0>
 8015e6a:	b003      	add	sp, #12
 8015e6c:	bd30      	pop	{r4, r5, pc}
 8015e6e:	bf00      	nop
 8015e70:	20000034 	.word	0x20000034
 8015e74:	20000098 	.word	0x20000098

08015e78 <std>:
 8015e78:	2300      	movs	r3, #0
 8015e7a:	b510      	push	{r4, lr}
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8015e82:	6083      	str	r3, [r0, #8]
 8015e84:	8181      	strh	r1, [r0, #12]
 8015e86:	6643      	str	r3, [r0, #100]	; 0x64
 8015e88:	81c2      	strh	r2, [r0, #14]
 8015e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e8e:	6183      	str	r3, [r0, #24]
 8015e90:	4619      	mov	r1, r3
 8015e92:	2208      	movs	r2, #8
 8015e94:	305c      	adds	r0, #92	; 0x5c
 8015e96:	f7ff fedf 	bl	8015c58 <memset>
 8015e9a:	4b05      	ldr	r3, [pc, #20]	; (8015eb0 <std+0x38>)
 8015e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8015e9e:	4b05      	ldr	r3, [pc, #20]	; (8015eb4 <std+0x3c>)
 8015ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8015ea2:	4b05      	ldr	r3, [pc, #20]	; (8015eb8 <std+0x40>)
 8015ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015ea6:	4b05      	ldr	r3, [pc, #20]	; (8015ebc <std+0x44>)
 8015ea8:	6224      	str	r4, [r4, #32]
 8015eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8015eac:	bd10      	pop	{r4, pc}
 8015eae:	bf00      	nop
 8015eb0:	08016941 	.word	0x08016941
 8015eb4:	08016963 	.word	0x08016963
 8015eb8:	0801699b 	.word	0x0801699b
 8015ebc:	080169bf 	.word	0x080169bf

08015ec0 <_cleanup_r>:
 8015ec0:	4901      	ldr	r1, [pc, #4]	; (8015ec8 <_cleanup_r+0x8>)
 8015ec2:	f000 b885 	b.w	8015fd0 <_fwalk_reent>
 8015ec6:	bf00      	nop
 8015ec8:	08016cb5 	.word	0x08016cb5

08015ecc <__sfmoreglue>:
 8015ecc:	b570      	push	{r4, r5, r6, lr}
 8015ece:	1e4a      	subs	r2, r1, #1
 8015ed0:	2568      	movs	r5, #104	; 0x68
 8015ed2:	4355      	muls	r5, r2
 8015ed4:	460e      	mov	r6, r1
 8015ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015eda:	f000 f8ad 	bl	8016038 <_malloc_r>
 8015ede:	4604      	mov	r4, r0
 8015ee0:	b140      	cbz	r0, 8015ef4 <__sfmoreglue+0x28>
 8015ee2:	2100      	movs	r1, #0
 8015ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8015ee8:	300c      	adds	r0, #12
 8015eea:	60a0      	str	r0, [r4, #8]
 8015eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ef0:	f7ff feb2 	bl	8015c58 <memset>
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	bd70      	pop	{r4, r5, r6, pc}

08015ef8 <__sinit>:
 8015ef8:	6983      	ldr	r3, [r0, #24]
 8015efa:	b510      	push	{r4, lr}
 8015efc:	4604      	mov	r4, r0
 8015efe:	bb33      	cbnz	r3, 8015f4e <__sinit+0x56>
 8015f00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015f04:	6503      	str	r3, [r0, #80]	; 0x50
 8015f06:	4b12      	ldr	r3, [pc, #72]	; (8015f50 <__sinit+0x58>)
 8015f08:	4a12      	ldr	r2, [pc, #72]	; (8015f54 <__sinit+0x5c>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	6282      	str	r2, [r0, #40]	; 0x28
 8015f0e:	4298      	cmp	r0, r3
 8015f10:	bf04      	itt	eq
 8015f12:	2301      	moveq	r3, #1
 8015f14:	6183      	streq	r3, [r0, #24]
 8015f16:	f000 f81f 	bl	8015f58 <__sfp>
 8015f1a:	6060      	str	r0, [r4, #4]
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f000 f81b 	bl	8015f58 <__sfp>
 8015f22:	60a0      	str	r0, [r4, #8]
 8015f24:	4620      	mov	r0, r4
 8015f26:	f000 f817 	bl	8015f58 <__sfp>
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	60e0      	str	r0, [r4, #12]
 8015f2e:	2104      	movs	r1, #4
 8015f30:	6860      	ldr	r0, [r4, #4]
 8015f32:	f7ff ffa1 	bl	8015e78 <std>
 8015f36:	2201      	movs	r2, #1
 8015f38:	2109      	movs	r1, #9
 8015f3a:	68a0      	ldr	r0, [r4, #8]
 8015f3c:	f7ff ff9c 	bl	8015e78 <std>
 8015f40:	2202      	movs	r2, #2
 8015f42:	2112      	movs	r1, #18
 8015f44:	68e0      	ldr	r0, [r4, #12]
 8015f46:	f7ff ff97 	bl	8015e78 <std>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	61a3      	str	r3, [r4, #24]
 8015f4e:	bd10      	pop	{r4, pc}
 8015f50:	0801d5f8 	.word	0x0801d5f8
 8015f54:	08015ec1 	.word	0x08015ec1

08015f58 <__sfp>:
 8015f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f5a:	4b1b      	ldr	r3, [pc, #108]	; (8015fc8 <__sfp+0x70>)
 8015f5c:	681e      	ldr	r6, [r3, #0]
 8015f5e:	69b3      	ldr	r3, [r6, #24]
 8015f60:	4607      	mov	r7, r0
 8015f62:	b913      	cbnz	r3, 8015f6a <__sfp+0x12>
 8015f64:	4630      	mov	r0, r6
 8015f66:	f7ff ffc7 	bl	8015ef8 <__sinit>
 8015f6a:	3648      	adds	r6, #72	; 0x48
 8015f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015f70:	3b01      	subs	r3, #1
 8015f72:	d503      	bpl.n	8015f7c <__sfp+0x24>
 8015f74:	6833      	ldr	r3, [r6, #0]
 8015f76:	b133      	cbz	r3, 8015f86 <__sfp+0x2e>
 8015f78:	6836      	ldr	r6, [r6, #0]
 8015f7a:	e7f7      	b.n	8015f6c <__sfp+0x14>
 8015f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f80:	b16d      	cbz	r5, 8015f9e <__sfp+0x46>
 8015f82:	3468      	adds	r4, #104	; 0x68
 8015f84:	e7f4      	b.n	8015f70 <__sfp+0x18>
 8015f86:	2104      	movs	r1, #4
 8015f88:	4638      	mov	r0, r7
 8015f8a:	f7ff ff9f 	bl	8015ecc <__sfmoreglue>
 8015f8e:	6030      	str	r0, [r6, #0]
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1f1      	bne.n	8015f78 <__sfp+0x20>
 8015f94:	230c      	movs	r3, #12
 8015f96:	603b      	str	r3, [r7, #0]
 8015f98:	4604      	mov	r4, r0
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f9e:	4b0b      	ldr	r3, [pc, #44]	; (8015fcc <__sfp+0x74>)
 8015fa0:	6665      	str	r5, [r4, #100]	; 0x64
 8015fa2:	e9c4 5500 	strd	r5, r5, [r4]
 8015fa6:	60a5      	str	r5, [r4, #8]
 8015fa8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015fac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015fb0:	2208      	movs	r2, #8
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015fb8:	f7ff fe4e 	bl	8015c58 <memset>
 8015fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015fc4:	e7e9      	b.n	8015f9a <__sfp+0x42>
 8015fc6:	bf00      	nop
 8015fc8:	0801d5f8 	.word	0x0801d5f8
 8015fcc:	ffff0001 	.word	0xffff0001

08015fd0 <_fwalk_reent>:
 8015fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fd4:	4680      	mov	r8, r0
 8015fd6:	4689      	mov	r9, r1
 8015fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015fdc:	2600      	movs	r6, #0
 8015fde:	b914      	cbnz	r4, 8015fe6 <_fwalk_reent+0x16>
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fe6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015fea:	3f01      	subs	r7, #1
 8015fec:	d501      	bpl.n	8015ff2 <_fwalk_reent+0x22>
 8015fee:	6824      	ldr	r4, [r4, #0]
 8015ff0:	e7f5      	b.n	8015fde <_fwalk_reent+0xe>
 8015ff2:	89ab      	ldrh	r3, [r5, #12]
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d907      	bls.n	8016008 <_fwalk_reent+0x38>
 8015ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	d003      	beq.n	8016008 <_fwalk_reent+0x38>
 8016000:	4629      	mov	r1, r5
 8016002:	4640      	mov	r0, r8
 8016004:	47c8      	blx	r9
 8016006:	4306      	orrs	r6, r0
 8016008:	3568      	adds	r5, #104	; 0x68
 801600a:	e7ee      	b.n	8015fea <_fwalk_reent+0x1a>

0801600c <__locale_ctype_ptr_l>:
 801600c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016010:	4770      	bx	lr

08016012 <__ascii_mbtowc>:
 8016012:	b082      	sub	sp, #8
 8016014:	b901      	cbnz	r1, 8016018 <__ascii_mbtowc+0x6>
 8016016:	a901      	add	r1, sp, #4
 8016018:	b142      	cbz	r2, 801602c <__ascii_mbtowc+0x1a>
 801601a:	b14b      	cbz	r3, 8016030 <__ascii_mbtowc+0x1e>
 801601c:	7813      	ldrb	r3, [r2, #0]
 801601e:	600b      	str	r3, [r1, #0]
 8016020:	7812      	ldrb	r2, [r2, #0]
 8016022:	1c10      	adds	r0, r2, #0
 8016024:	bf18      	it	ne
 8016026:	2001      	movne	r0, #1
 8016028:	b002      	add	sp, #8
 801602a:	4770      	bx	lr
 801602c:	4610      	mov	r0, r2
 801602e:	e7fb      	b.n	8016028 <__ascii_mbtowc+0x16>
 8016030:	f06f 0001 	mvn.w	r0, #1
 8016034:	e7f8      	b.n	8016028 <__ascii_mbtowc+0x16>
	...

08016038 <_malloc_r>:
 8016038:	b570      	push	{r4, r5, r6, lr}
 801603a:	1ccd      	adds	r5, r1, #3
 801603c:	f025 0503 	bic.w	r5, r5, #3
 8016040:	3508      	adds	r5, #8
 8016042:	2d0c      	cmp	r5, #12
 8016044:	bf38      	it	cc
 8016046:	250c      	movcc	r5, #12
 8016048:	2d00      	cmp	r5, #0
 801604a:	4606      	mov	r6, r0
 801604c:	db01      	blt.n	8016052 <_malloc_r+0x1a>
 801604e:	42a9      	cmp	r1, r5
 8016050:	d903      	bls.n	801605a <_malloc_r+0x22>
 8016052:	230c      	movs	r3, #12
 8016054:	6033      	str	r3, [r6, #0]
 8016056:	2000      	movs	r0, #0
 8016058:	bd70      	pop	{r4, r5, r6, pc}
 801605a:	f000 fee4 	bl	8016e26 <__malloc_lock>
 801605e:	4a21      	ldr	r2, [pc, #132]	; (80160e4 <_malloc_r+0xac>)
 8016060:	6814      	ldr	r4, [r2, #0]
 8016062:	4621      	mov	r1, r4
 8016064:	b991      	cbnz	r1, 801608c <_malloc_r+0x54>
 8016066:	4c20      	ldr	r4, [pc, #128]	; (80160e8 <_malloc_r+0xb0>)
 8016068:	6823      	ldr	r3, [r4, #0]
 801606a:	b91b      	cbnz	r3, 8016074 <_malloc_r+0x3c>
 801606c:	4630      	mov	r0, r6
 801606e:	f000 fc57 	bl	8016920 <_sbrk_r>
 8016072:	6020      	str	r0, [r4, #0]
 8016074:	4629      	mov	r1, r5
 8016076:	4630      	mov	r0, r6
 8016078:	f000 fc52 	bl	8016920 <_sbrk_r>
 801607c:	1c43      	adds	r3, r0, #1
 801607e:	d124      	bne.n	80160ca <_malloc_r+0x92>
 8016080:	230c      	movs	r3, #12
 8016082:	6033      	str	r3, [r6, #0]
 8016084:	4630      	mov	r0, r6
 8016086:	f000 fecf 	bl	8016e28 <__malloc_unlock>
 801608a:	e7e4      	b.n	8016056 <_malloc_r+0x1e>
 801608c:	680b      	ldr	r3, [r1, #0]
 801608e:	1b5b      	subs	r3, r3, r5
 8016090:	d418      	bmi.n	80160c4 <_malloc_r+0x8c>
 8016092:	2b0b      	cmp	r3, #11
 8016094:	d90f      	bls.n	80160b6 <_malloc_r+0x7e>
 8016096:	600b      	str	r3, [r1, #0]
 8016098:	50cd      	str	r5, [r1, r3]
 801609a:	18cc      	adds	r4, r1, r3
 801609c:	4630      	mov	r0, r6
 801609e:	f000 fec3 	bl	8016e28 <__malloc_unlock>
 80160a2:	f104 000b 	add.w	r0, r4, #11
 80160a6:	1d23      	adds	r3, r4, #4
 80160a8:	f020 0007 	bic.w	r0, r0, #7
 80160ac:	1ac3      	subs	r3, r0, r3
 80160ae:	d0d3      	beq.n	8016058 <_malloc_r+0x20>
 80160b0:	425a      	negs	r2, r3
 80160b2:	50e2      	str	r2, [r4, r3]
 80160b4:	e7d0      	b.n	8016058 <_malloc_r+0x20>
 80160b6:	428c      	cmp	r4, r1
 80160b8:	684b      	ldr	r3, [r1, #4]
 80160ba:	bf16      	itet	ne
 80160bc:	6063      	strne	r3, [r4, #4]
 80160be:	6013      	streq	r3, [r2, #0]
 80160c0:	460c      	movne	r4, r1
 80160c2:	e7eb      	b.n	801609c <_malloc_r+0x64>
 80160c4:	460c      	mov	r4, r1
 80160c6:	6849      	ldr	r1, [r1, #4]
 80160c8:	e7cc      	b.n	8016064 <_malloc_r+0x2c>
 80160ca:	1cc4      	adds	r4, r0, #3
 80160cc:	f024 0403 	bic.w	r4, r4, #3
 80160d0:	42a0      	cmp	r0, r4
 80160d2:	d005      	beq.n	80160e0 <_malloc_r+0xa8>
 80160d4:	1a21      	subs	r1, r4, r0
 80160d6:	4630      	mov	r0, r6
 80160d8:	f000 fc22 	bl	8016920 <_sbrk_r>
 80160dc:	3001      	adds	r0, #1
 80160de:	d0cf      	beq.n	8016080 <_malloc_r+0x48>
 80160e0:	6025      	str	r5, [r4, #0]
 80160e2:	e7db      	b.n	801609c <_malloc_r+0x64>
 80160e4:	2000435c 	.word	0x2000435c
 80160e8:	20004360 	.word	0x20004360

080160ec <__ssputs_r>:
 80160ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160f0:	688e      	ldr	r6, [r1, #8]
 80160f2:	429e      	cmp	r6, r3
 80160f4:	4682      	mov	sl, r0
 80160f6:	460c      	mov	r4, r1
 80160f8:	4690      	mov	r8, r2
 80160fa:	4699      	mov	r9, r3
 80160fc:	d837      	bhi.n	801616e <__ssputs_r+0x82>
 80160fe:	898a      	ldrh	r2, [r1, #12]
 8016100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016104:	d031      	beq.n	801616a <__ssputs_r+0x7e>
 8016106:	6825      	ldr	r5, [r4, #0]
 8016108:	6909      	ldr	r1, [r1, #16]
 801610a:	1a6f      	subs	r7, r5, r1
 801610c:	6965      	ldr	r5, [r4, #20]
 801610e:	2302      	movs	r3, #2
 8016110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016114:	fb95 f5f3 	sdiv	r5, r5, r3
 8016118:	f109 0301 	add.w	r3, r9, #1
 801611c:	443b      	add	r3, r7
 801611e:	429d      	cmp	r5, r3
 8016120:	bf38      	it	cc
 8016122:	461d      	movcc	r5, r3
 8016124:	0553      	lsls	r3, r2, #21
 8016126:	d530      	bpl.n	801618a <__ssputs_r+0x9e>
 8016128:	4629      	mov	r1, r5
 801612a:	f7ff ff85 	bl	8016038 <_malloc_r>
 801612e:	4606      	mov	r6, r0
 8016130:	b950      	cbnz	r0, 8016148 <__ssputs_r+0x5c>
 8016132:	230c      	movs	r3, #12
 8016134:	f8ca 3000 	str.w	r3, [sl]
 8016138:	89a3      	ldrh	r3, [r4, #12]
 801613a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801613e:	81a3      	strh	r3, [r4, #12]
 8016140:	f04f 30ff 	mov.w	r0, #4294967295
 8016144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016148:	463a      	mov	r2, r7
 801614a:	6921      	ldr	r1, [r4, #16]
 801614c:	f7ff fd79 	bl	8015c42 <memcpy>
 8016150:	89a3      	ldrh	r3, [r4, #12]
 8016152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801615a:	81a3      	strh	r3, [r4, #12]
 801615c:	6126      	str	r6, [r4, #16]
 801615e:	6165      	str	r5, [r4, #20]
 8016160:	443e      	add	r6, r7
 8016162:	1bed      	subs	r5, r5, r7
 8016164:	6026      	str	r6, [r4, #0]
 8016166:	60a5      	str	r5, [r4, #8]
 8016168:	464e      	mov	r6, r9
 801616a:	454e      	cmp	r6, r9
 801616c:	d900      	bls.n	8016170 <__ssputs_r+0x84>
 801616e:	464e      	mov	r6, r9
 8016170:	4632      	mov	r2, r6
 8016172:	4641      	mov	r1, r8
 8016174:	6820      	ldr	r0, [r4, #0]
 8016176:	f000 fe3d 	bl	8016df4 <memmove>
 801617a:	68a3      	ldr	r3, [r4, #8]
 801617c:	1b9b      	subs	r3, r3, r6
 801617e:	60a3      	str	r3, [r4, #8]
 8016180:	6823      	ldr	r3, [r4, #0]
 8016182:	441e      	add	r6, r3
 8016184:	6026      	str	r6, [r4, #0]
 8016186:	2000      	movs	r0, #0
 8016188:	e7dc      	b.n	8016144 <__ssputs_r+0x58>
 801618a:	462a      	mov	r2, r5
 801618c:	f000 fe9c 	bl	8016ec8 <_realloc_r>
 8016190:	4606      	mov	r6, r0
 8016192:	2800      	cmp	r0, #0
 8016194:	d1e2      	bne.n	801615c <__ssputs_r+0x70>
 8016196:	6921      	ldr	r1, [r4, #16]
 8016198:	4650      	mov	r0, sl
 801619a:	f000 fe47 	bl	8016e2c <_free_r>
 801619e:	e7c8      	b.n	8016132 <__ssputs_r+0x46>

080161a0 <_svfiprintf_r>:
 80161a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	461d      	mov	r5, r3
 80161a6:	898b      	ldrh	r3, [r1, #12]
 80161a8:	061f      	lsls	r7, r3, #24
 80161aa:	b09d      	sub	sp, #116	; 0x74
 80161ac:	4680      	mov	r8, r0
 80161ae:	460c      	mov	r4, r1
 80161b0:	4616      	mov	r6, r2
 80161b2:	d50f      	bpl.n	80161d4 <_svfiprintf_r+0x34>
 80161b4:	690b      	ldr	r3, [r1, #16]
 80161b6:	b96b      	cbnz	r3, 80161d4 <_svfiprintf_r+0x34>
 80161b8:	2140      	movs	r1, #64	; 0x40
 80161ba:	f7ff ff3d 	bl	8016038 <_malloc_r>
 80161be:	6020      	str	r0, [r4, #0]
 80161c0:	6120      	str	r0, [r4, #16]
 80161c2:	b928      	cbnz	r0, 80161d0 <_svfiprintf_r+0x30>
 80161c4:	230c      	movs	r3, #12
 80161c6:	f8c8 3000 	str.w	r3, [r8]
 80161ca:	f04f 30ff 	mov.w	r0, #4294967295
 80161ce:	e0c8      	b.n	8016362 <_svfiprintf_r+0x1c2>
 80161d0:	2340      	movs	r3, #64	; 0x40
 80161d2:	6163      	str	r3, [r4, #20]
 80161d4:	2300      	movs	r3, #0
 80161d6:	9309      	str	r3, [sp, #36]	; 0x24
 80161d8:	2320      	movs	r3, #32
 80161da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80161de:	2330      	movs	r3, #48	; 0x30
 80161e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80161e4:	9503      	str	r5, [sp, #12]
 80161e6:	f04f 0b01 	mov.w	fp, #1
 80161ea:	4637      	mov	r7, r6
 80161ec:	463d      	mov	r5, r7
 80161ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80161f2:	b10b      	cbz	r3, 80161f8 <_svfiprintf_r+0x58>
 80161f4:	2b25      	cmp	r3, #37	; 0x25
 80161f6:	d13e      	bne.n	8016276 <_svfiprintf_r+0xd6>
 80161f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80161fc:	d00b      	beq.n	8016216 <_svfiprintf_r+0x76>
 80161fe:	4653      	mov	r3, sl
 8016200:	4632      	mov	r2, r6
 8016202:	4621      	mov	r1, r4
 8016204:	4640      	mov	r0, r8
 8016206:	f7ff ff71 	bl	80160ec <__ssputs_r>
 801620a:	3001      	adds	r0, #1
 801620c:	f000 80a4 	beq.w	8016358 <_svfiprintf_r+0x1b8>
 8016210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016212:	4453      	add	r3, sl
 8016214:	9309      	str	r3, [sp, #36]	; 0x24
 8016216:	783b      	ldrb	r3, [r7, #0]
 8016218:	2b00      	cmp	r3, #0
 801621a:	f000 809d 	beq.w	8016358 <_svfiprintf_r+0x1b8>
 801621e:	2300      	movs	r3, #0
 8016220:	f04f 32ff 	mov.w	r2, #4294967295
 8016224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016228:	9304      	str	r3, [sp, #16]
 801622a:	9307      	str	r3, [sp, #28]
 801622c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016230:	931a      	str	r3, [sp, #104]	; 0x68
 8016232:	462f      	mov	r7, r5
 8016234:	2205      	movs	r2, #5
 8016236:	f817 1b01 	ldrb.w	r1, [r7], #1
 801623a:	4850      	ldr	r0, [pc, #320]	; (801637c <_svfiprintf_r+0x1dc>)
 801623c:	f7e9 fff8 	bl	8000230 <memchr>
 8016240:	9b04      	ldr	r3, [sp, #16]
 8016242:	b9d0      	cbnz	r0, 801627a <_svfiprintf_r+0xda>
 8016244:	06d9      	lsls	r1, r3, #27
 8016246:	bf44      	itt	mi
 8016248:	2220      	movmi	r2, #32
 801624a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801624e:	071a      	lsls	r2, r3, #28
 8016250:	bf44      	itt	mi
 8016252:	222b      	movmi	r2, #43	; 0x2b
 8016254:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016258:	782a      	ldrb	r2, [r5, #0]
 801625a:	2a2a      	cmp	r2, #42	; 0x2a
 801625c:	d015      	beq.n	801628a <_svfiprintf_r+0xea>
 801625e:	9a07      	ldr	r2, [sp, #28]
 8016260:	462f      	mov	r7, r5
 8016262:	2000      	movs	r0, #0
 8016264:	250a      	movs	r5, #10
 8016266:	4639      	mov	r1, r7
 8016268:	f811 3b01 	ldrb.w	r3, [r1], #1
 801626c:	3b30      	subs	r3, #48	; 0x30
 801626e:	2b09      	cmp	r3, #9
 8016270:	d94d      	bls.n	801630e <_svfiprintf_r+0x16e>
 8016272:	b1b8      	cbz	r0, 80162a4 <_svfiprintf_r+0x104>
 8016274:	e00f      	b.n	8016296 <_svfiprintf_r+0xf6>
 8016276:	462f      	mov	r7, r5
 8016278:	e7b8      	b.n	80161ec <_svfiprintf_r+0x4c>
 801627a:	4a40      	ldr	r2, [pc, #256]	; (801637c <_svfiprintf_r+0x1dc>)
 801627c:	1a80      	subs	r0, r0, r2
 801627e:	fa0b f000 	lsl.w	r0, fp, r0
 8016282:	4318      	orrs	r0, r3
 8016284:	9004      	str	r0, [sp, #16]
 8016286:	463d      	mov	r5, r7
 8016288:	e7d3      	b.n	8016232 <_svfiprintf_r+0x92>
 801628a:	9a03      	ldr	r2, [sp, #12]
 801628c:	1d11      	adds	r1, r2, #4
 801628e:	6812      	ldr	r2, [r2, #0]
 8016290:	9103      	str	r1, [sp, #12]
 8016292:	2a00      	cmp	r2, #0
 8016294:	db01      	blt.n	801629a <_svfiprintf_r+0xfa>
 8016296:	9207      	str	r2, [sp, #28]
 8016298:	e004      	b.n	80162a4 <_svfiprintf_r+0x104>
 801629a:	4252      	negs	r2, r2
 801629c:	f043 0302 	orr.w	r3, r3, #2
 80162a0:	9207      	str	r2, [sp, #28]
 80162a2:	9304      	str	r3, [sp, #16]
 80162a4:	783b      	ldrb	r3, [r7, #0]
 80162a6:	2b2e      	cmp	r3, #46	; 0x2e
 80162a8:	d10c      	bne.n	80162c4 <_svfiprintf_r+0x124>
 80162aa:	787b      	ldrb	r3, [r7, #1]
 80162ac:	2b2a      	cmp	r3, #42	; 0x2a
 80162ae:	d133      	bne.n	8016318 <_svfiprintf_r+0x178>
 80162b0:	9b03      	ldr	r3, [sp, #12]
 80162b2:	1d1a      	adds	r2, r3, #4
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	9203      	str	r2, [sp, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	bfb8      	it	lt
 80162bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80162c0:	3702      	adds	r7, #2
 80162c2:	9305      	str	r3, [sp, #20]
 80162c4:	4d2e      	ldr	r5, [pc, #184]	; (8016380 <_svfiprintf_r+0x1e0>)
 80162c6:	7839      	ldrb	r1, [r7, #0]
 80162c8:	2203      	movs	r2, #3
 80162ca:	4628      	mov	r0, r5
 80162cc:	f7e9 ffb0 	bl	8000230 <memchr>
 80162d0:	b138      	cbz	r0, 80162e2 <_svfiprintf_r+0x142>
 80162d2:	2340      	movs	r3, #64	; 0x40
 80162d4:	1b40      	subs	r0, r0, r5
 80162d6:	fa03 f000 	lsl.w	r0, r3, r0
 80162da:	9b04      	ldr	r3, [sp, #16]
 80162dc:	4303      	orrs	r3, r0
 80162de:	3701      	adds	r7, #1
 80162e0:	9304      	str	r3, [sp, #16]
 80162e2:	7839      	ldrb	r1, [r7, #0]
 80162e4:	4827      	ldr	r0, [pc, #156]	; (8016384 <_svfiprintf_r+0x1e4>)
 80162e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80162ea:	2206      	movs	r2, #6
 80162ec:	1c7e      	adds	r6, r7, #1
 80162ee:	f7e9 ff9f 	bl	8000230 <memchr>
 80162f2:	2800      	cmp	r0, #0
 80162f4:	d038      	beq.n	8016368 <_svfiprintf_r+0x1c8>
 80162f6:	4b24      	ldr	r3, [pc, #144]	; (8016388 <_svfiprintf_r+0x1e8>)
 80162f8:	bb13      	cbnz	r3, 8016340 <_svfiprintf_r+0x1a0>
 80162fa:	9b03      	ldr	r3, [sp, #12]
 80162fc:	3307      	adds	r3, #7
 80162fe:	f023 0307 	bic.w	r3, r3, #7
 8016302:	3308      	adds	r3, #8
 8016304:	9303      	str	r3, [sp, #12]
 8016306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016308:	444b      	add	r3, r9
 801630a:	9309      	str	r3, [sp, #36]	; 0x24
 801630c:	e76d      	b.n	80161ea <_svfiprintf_r+0x4a>
 801630e:	fb05 3202 	mla	r2, r5, r2, r3
 8016312:	2001      	movs	r0, #1
 8016314:	460f      	mov	r7, r1
 8016316:	e7a6      	b.n	8016266 <_svfiprintf_r+0xc6>
 8016318:	2300      	movs	r3, #0
 801631a:	3701      	adds	r7, #1
 801631c:	9305      	str	r3, [sp, #20]
 801631e:	4619      	mov	r1, r3
 8016320:	250a      	movs	r5, #10
 8016322:	4638      	mov	r0, r7
 8016324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016328:	3a30      	subs	r2, #48	; 0x30
 801632a:	2a09      	cmp	r2, #9
 801632c:	d903      	bls.n	8016336 <_svfiprintf_r+0x196>
 801632e:	2b00      	cmp	r3, #0
 8016330:	d0c8      	beq.n	80162c4 <_svfiprintf_r+0x124>
 8016332:	9105      	str	r1, [sp, #20]
 8016334:	e7c6      	b.n	80162c4 <_svfiprintf_r+0x124>
 8016336:	fb05 2101 	mla	r1, r5, r1, r2
 801633a:	2301      	movs	r3, #1
 801633c:	4607      	mov	r7, r0
 801633e:	e7f0      	b.n	8016322 <_svfiprintf_r+0x182>
 8016340:	ab03      	add	r3, sp, #12
 8016342:	9300      	str	r3, [sp, #0]
 8016344:	4622      	mov	r2, r4
 8016346:	4b11      	ldr	r3, [pc, #68]	; (801638c <_svfiprintf_r+0x1ec>)
 8016348:	a904      	add	r1, sp, #16
 801634a:	4640      	mov	r0, r8
 801634c:	f3af 8000 	nop.w
 8016350:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016354:	4681      	mov	r9, r0
 8016356:	d1d6      	bne.n	8016306 <_svfiprintf_r+0x166>
 8016358:	89a3      	ldrh	r3, [r4, #12]
 801635a:	065b      	lsls	r3, r3, #25
 801635c:	f53f af35 	bmi.w	80161ca <_svfiprintf_r+0x2a>
 8016360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016362:	b01d      	add	sp, #116	; 0x74
 8016364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016368:	ab03      	add	r3, sp, #12
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	4622      	mov	r2, r4
 801636e:	4b07      	ldr	r3, [pc, #28]	; (801638c <_svfiprintf_r+0x1ec>)
 8016370:	a904      	add	r1, sp, #16
 8016372:	4640      	mov	r0, r8
 8016374:	f000 f9c2 	bl	80166fc <_printf_i>
 8016378:	e7ea      	b.n	8016350 <_svfiprintf_r+0x1b0>
 801637a:	bf00      	nop
 801637c:	0801d666 	.word	0x0801d666
 8016380:	0801d66c 	.word	0x0801d66c
 8016384:	0801d670 	.word	0x0801d670
 8016388:	00000000 	.word	0x00000000
 801638c:	080160ed 	.word	0x080160ed

08016390 <__sfputc_r>:
 8016390:	6893      	ldr	r3, [r2, #8]
 8016392:	3b01      	subs	r3, #1
 8016394:	2b00      	cmp	r3, #0
 8016396:	b410      	push	{r4}
 8016398:	6093      	str	r3, [r2, #8]
 801639a:	da08      	bge.n	80163ae <__sfputc_r+0x1e>
 801639c:	6994      	ldr	r4, [r2, #24]
 801639e:	42a3      	cmp	r3, r4
 80163a0:	db01      	blt.n	80163a6 <__sfputc_r+0x16>
 80163a2:	290a      	cmp	r1, #10
 80163a4:	d103      	bne.n	80163ae <__sfputc_r+0x1e>
 80163a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163aa:	f000 bb0d 	b.w	80169c8 <__swbuf_r>
 80163ae:	6813      	ldr	r3, [r2, #0]
 80163b0:	1c58      	adds	r0, r3, #1
 80163b2:	6010      	str	r0, [r2, #0]
 80163b4:	7019      	strb	r1, [r3, #0]
 80163b6:	4608      	mov	r0, r1
 80163b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163bc:	4770      	bx	lr

080163be <__sfputs_r>:
 80163be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163c0:	4606      	mov	r6, r0
 80163c2:	460f      	mov	r7, r1
 80163c4:	4614      	mov	r4, r2
 80163c6:	18d5      	adds	r5, r2, r3
 80163c8:	42ac      	cmp	r4, r5
 80163ca:	d101      	bne.n	80163d0 <__sfputs_r+0x12>
 80163cc:	2000      	movs	r0, #0
 80163ce:	e007      	b.n	80163e0 <__sfputs_r+0x22>
 80163d0:	463a      	mov	r2, r7
 80163d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163d6:	4630      	mov	r0, r6
 80163d8:	f7ff ffda 	bl	8016390 <__sfputc_r>
 80163dc:	1c43      	adds	r3, r0, #1
 80163de:	d1f3      	bne.n	80163c8 <__sfputs_r+0xa>
 80163e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080163e4 <_vfiprintf_r>:
 80163e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163e8:	460c      	mov	r4, r1
 80163ea:	b09d      	sub	sp, #116	; 0x74
 80163ec:	4617      	mov	r7, r2
 80163ee:	461d      	mov	r5, r3
 80163f0:	4606      	mov	r6, r0
 80163f2:	b118      	cbz	r0, 80163fc <_vfiprintf_r+0x18>
 80163f4:	6983      	ldr	r3, [r0, #24]
 80163f6:	b90b      	cbnz	r3, 80163fc <_vfiprintf_r+0x18>
 80163f8:	f7ff fd7e 	bl	8015ef8 <__sinit>
 80163fc:	4b7c      	ldr	r3, [pc, #496]	; (80165f0 <_vfiprintf_r+0x20c>)
 80163fe:	429c      	cmp	r4, r3
 8016400:	d158      	bne.n	80164b4 <_vfiprintf_r+0xd0>
 8016402:	6874      	ldr	r4, [r6, #4]
 8016404:	89a3      	ldrh	r3, [r4, #12]
 8016406:	0718      	lsls	r0, r3, #28
 8016408:	d55e      	bpl.n	80164c8 <_vfiprintf_r+0xe4>
 801640a:	6923      	ldr	r3, [r4, #16]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d05b      	beq.n	80164c8 <_vfiprintf_r+0xe4>
 8016410:	2300      	movs	r3, #0
 8016412:	9309      	str	r3, [sp, #36]	; 0x24
 8016414:	2320      	movs	r3, #32
 8016416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801641a:	2330      	movs	r3, #48	; 0x30
 801641c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016420:	9503      	str	r5, [sp, #12]
 8016422:	f04f 0b01 	mov.w	fp, #1
 8016426:	46b8      	mov	r8, r7
 8016428:	4645      	mov	r5, r8
 801642a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801642e:	b10b      	cbz	r3, 8016434 <_vfiprintf_r+0x50>
 8016430:	2b25      	cmp	r3, #37	; 0x25
 8016432:	d154      	bne.n	80164de <_vfiprintf_r+0xfa>
 8016434:	ebb8 0a07 	subs.w	sl, r8, r7
 8016438:	d00b      	beq.n	8016452 <_vfiprintf_r+0x6e>
 801643a:	4653      	mov	r3, sl
 801643c:	463a      	mov	r2, r7
 801643e:	4621      	mov	r1, r4
 8016440:	4630      	mov	r0, r6
 8016442:	f7ff ffbc 	bl	80163be <__sfputs_r>
 8016446:	3001      	adds	r0, #1
 8016448:	f000 80c2 	beq.w	80165d0 <_vfiprintf_r+0x1ec>
 801644c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801644e:	4453      	add	r3, sl
 8016450:	9309      	str	r3, [sp, #36]	; 0x24
 8016452:	f898 3000 	ldrb.w	r3, [r8]
 8016456:	2b00      	cmp	r3, #0
 8016458:	f000 80ba 	beq.w	80165d0 <_vfiprintf_r+0x1ec>
 801645c:	2300      	movs	r3, #0
 801645e:	f04f 32ff 	mov.w	r2, #4294967295
 8016462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016466:	9304      	str	r3, [sp, #16]
 8016468:	9307      	str	r3, [sp, #28]
 801646a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801646e:	931a      	str	r3, [sp, #104]	; 0x68
 8016470:	46a8      	mov	r8, r5
 8016472:	2205      	movs	r2, #5
 8016474:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016478:	485e      	ldr	r0, [pc, #376]	; (80165f4 <_vfiprintf_r+0x210>)
 801647a:	f7e9 fed9 	bl	8000230 <memchr>
 801647e:	9b04      	ldr	r3, [sp, #16]
 8016480:	bb78      	cbnz	r0, 80164e2 <_vfiprintf_r+0xfe>
 8016482:	06d9      	lsls	r1, r3, #27
 8016484:	bf44      	itt	mi
 8016486:	2220      	movmi	r2, #32
 8016488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801648c:	071a      	lsls	r2, r3, #28
 801648e:	bf44      	itt	mi
 8016490:	222b      	movmi	r2, #43	; 0x2b
 8016492:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016496:	782a      	ldrb	r2, [r5, #0]
 8016498:	2a2a      	cmp	r2, #42	; 0x2a
 801649a:	d02a      	beq.n	80164f2 <_vfiprintf_r+0x10e>
 801649c:	9a07      	ldr	r2, [sp, #28]
 801649e:	46a8      	mov	r8, r5
 80164a0:	2000      	movs	r0, #0
 80164a2:	250a      	movs	r5, #10
 80164a4:	4641      	mov	r1, r8
 80164a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164aa:	3b30      	subs	r3, #48	; 0x30
 80164ac:	2b09      	cmp	r3, #9
 80164ae:	d969      	bls.n	8016584 <_vfiprintf_r+0x1a0>
 80164b0:	b360      	cbz	r0, 801650c <_vfiprintf_r+0x128>
 80164b2:	e024      	b.n	80164fe <_vfiprintf_r+0x11a>
 80164b4:	4b50      	ldr	r3, [pc, #320]	; (80165f8 <_vfiprintf_r+0x214>)
 80164b6:	429c      	cmp	r4, r3
 80164b8:	d101      	bne.n	80164be <_vfiprintf_r+0xda>
 80164ba:	68b4      	ldr	r4, [r6, #8]
 80164bc:	e7a2      	b.n	8016404 <_vfiprintf_r+0x20>
 80164be:	4b4f      	ldr	r3, [pc, #316]	; (80165fc <_vfiprintf_r+0x218>)
 80164c0:	429c      	cmp	r4, r3
 80164c2:	bf08      	it	eq
 80164c4:	68f4      	ldreq	r4, [r6, #12]
 80164c6:	e79d      	b.n	8016404 <_vfiprintf_r+0x20>
 80164c8:	4621      	mov	r1, r4
 80164ca:	4630      	mov	r0, r6
 80164cc:	f000 faee 	bl	8016aac <__swsetup_r>
 80164d0:	2800      	cmp	r0, #0
 80164d2:	d09d      	beq.n	8016410 <_vfiprintf_r+0x2c>
 80164d4:	f04f 30ff 	mov.w	r0, #4294967295
 80164d8:	b01d      	add	sp, #116	; 0x74
 80164da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164de:	46a8      	mov	r8, r5
 80164e0:	e7a2      	b.n	8016428 <_vfiprintf_r+0x44>
 80164e2:	4a44      	ldr	r2, [pc, #272]	; (80165f4 <_vfiprintf_r+0x210>)
 80164e4:	1a80      	subs	r0, r0, r2
 80164e6:	fa0b f000 	lsl.w	r0, fp, r0
 80164ea:	4318      	orrs	r0, r3
 80164ec:	9004      	str	r0, [sp, #16]
 80164ee:	4645      	mov	r5, r8
 80164f0:	e7be      	b.n	8016470 <_vfiprintf_r+0x8c>
 80164f2:	9a03      	ldr	r2, [sp, #12]
 80164f4:	1d11      	adds	r1, r2, #4
 80164f6:	6812      	ldr	r2, [r2, #0]
 80164f8:	9103      	str	r1, [sp, #12]
 80164fa:	2a00      	cmp	r2, #0
 80164fc:	db01      	blt.n	8016502 <_vfiprintf_r+0x11e>
 80164fe:	9207      	str	r2, [sp, #28]
 8016500:	e004      	b.n	801650c <_vfiprintf_r+0x128>
 8016502:	4252      	negs	r2, r2
 8016504:	f043 0302 	orr.w	r3, r3, #2
 8016508:	9207      	str	r2, [sp, #28]
 801650a:	9304      	str	r3, [sp, #16]
 801650c:	f898 3000 	ldrb.w	r3, [r8]
 8016510:	2b2e      	cmp	r3, #46	; 0x2e
 8016512:	d10e      	bne.n	8016532 <_vfiprintf_r+0x14e>
 8016514:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016518:	2b2a      	cmp	r3, #42	; 0x2a
 801651a:	d138      	bne.n	801658e <_vfiprintf_r+0x1aa>
 801651c:	9b03      	ldr	r3, [sp, #12]
 801651e:	1d1a      	adds	r2, r3, #4
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	9203      	str	r2, [sp, #12]
 8016524:	2b00      	cmp	r3, #0
 8016526:	bfb8      	it	lt
 8016528:	f04f 33ff 	movlt.w	r3, #4294967295
 801652c:	f108 0802 	add.w	r8, r8, #2
 8016530:	9305      	str	r3, [sp, #20]
 8016532:	4d33      	ldr	r5, [pc, #204]	; (8016600 <_vfiprintf_r+0x21c>)
 8016534:	f898 1000 	ldrb.w	r1, [r8]
 8016538:	2203      	movs	r2, #3
 801653a:	4628      	mov	r0, r5
 801653c:	f7e9 fe78 	bl	8000230 <memchr>
 8016540:	b140      	cbz	r0, 8016554 <_vfiprintf_r+0x170>
 8016542:	2340      	movs	r3, #64	; 0x40
 8016544:	1b40      	subs	r0, r0, r5
 8016546:	fa03 f000 	lsl.w	r0, r3, r0
 801654a:	9b04      	ldr	r3, [sp, #16]
 801654c:	4303      	orrs	r3, r0
 801654e:	f108 0801 	add.w	r8, r8, #1
 8016552:	9304      	str	r3, [sp, #16]
 8016554:	f898 1000 	ldrb.w	r1, [r8]
 8016558:	482a      	ldr	r0, [pc, #168]	; (8016604 <_vfiprintf_r+0x220>)
 801655a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801655e:	2206      	movs	r2, #6
 8016560:	f108 0701 	add.w	r7, r8, #1
 8016564:	f7e9 fe64 	bl	8000230 <memchr>
 8016568:	2800      	cmp	r0, #0
 801656a:	d037      	beq.n	80165dc <_vfiprintf_r+0x1f8>
 801656c:	4b26      	ldr	r3, [pc, #152]	; (8016608 <_vfiprintf_r+0x224>)
 801656e:	bb1b      	cbnz	r3, 80165b8 <_vfiprintf_r+0x1d4>
 8016570:	9b03      	ldr	r3, [sp, #12]
 8016572:	3307      	adds	r3, #7
 8016574:	f023 0307 	bic.w	r3, r3, #7
 8016578:	3308      	adds	r3, #8
 801657a:	9303      	str	r3, [sp, #12]
 801657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801657e:	444b      	add	r3, r9
 8016580:	9309      	str	r3, [sp, #36]	; 0x24
 8016582:	e750      	b.n	8016426 <_vfiprintf_r+0x42>
 8016584:	fb05 3202 	mla	r2, r5, r2, r3
 8016588:	2001      	movs	r0, #1
 801658a:	4688      	mov	r8, r1
 801658c:	e78a      	b.n	80164a4 <_vfiprintf_r+0xc0>
 801658e:	2300      	movs	r3, #0
 8016590:	f108 0801 	add.w	r8, r8, #1
 8016594:	9305      	str	r3, [sp, #20]
 8016596:	4619      	mov	r1, r3
 8016598:	250a      	movs	r5, #10
 801659a:	4640      	mov	r0, r8
 801659c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165a0:	3a30      	subs	r2, #48	; 0x30
 80165a2:	2a09      	cmp	r2, #9
 80165a4:	d903      	bls.n	80165ae <_vfiprintf_r+0x1ca>
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d0c3      	beq.n	8016532 <_vfiprintf_r+0x14e>
 80165aa:	9105      	str	r1, [sp, #20]
 80165ac:	e7c1      	b.n	8016532 <_vfiprintf_r+0x14e>
 80165ae:	fb05 2101 	mla	r1, r5, r1, r2
 80165b2:	2301      	movs	r3, #1
 80165b4:	4680      	mov	r8, r0
 80165b6:	e7f0      	b.n	801659a <_vfiprintf_r+0x1b6>
 80165b8:	ab03      	add	r3, sp, #12
 80165ba:	9300      	str	r3, [sp, #0]
 80165bc:	4622      	mov	r2, r4
 80165be:	4b13      	ldr	r3, [pc, #76]	; (801660c <_vfiprintf_r+0x228>)
 80165c0:	a904      	add	r1, sp, #16
 80165c2:	4630      	mov	r0, r6
 80165c4:	f3af 8000 	nop.w
 80165c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80165cc:	4681      	mov	r9, r0
 80165ce:	d1d5      	bne.n	801657c <_vfiprintf_r+0x198>
 80165d0:	89a3      	ldrh	r3, [r4, #12]
 80165d2:	065b      	lsls	r3, r3, #25
 80165d4:	f53f af7e 	bmi.w	80164d4 <_vfiprintf_r+0xf0>
 80165d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165da:	e77d      	b.n	80164d8 <_vfiprintf_r+0xf4>
 80165dc:	ab03      	add	r3, sp, #12
 80165de:	9300      	str	r3, [sp, #0]
 80165e0:	4622      	mov	r2, r4
 80165e2:	4b0a      	ldr	r3, [pc, #40]	; (801660c <_vfiprintf_r+0x228>)
 80165e4:	a904      	add	r1, sp, #16
 80165e6:	4630      	mov	r0, r6
 80165e8:	f000 f888 	bl	80166fc <_printf_i>
 80165ec:	e7ec      	b.n	80165c8 <_vfiprintf_r+0x1e4>
 80165ee:	bf00      	nop
 80165f0:	0801d61c 	.word	0x0801d61c
 80165f4:	0801d666 	.word	0x0801d666
 80165f8:	0801d63c 	.word	0x0801d63c
 80165fc:	0801d5fc 	.word	0x0801d5fc
 8016600:	0801d66c 	.word	0x0801d66c
 8016604:	0801d670 	.word	0x0801d670
 8016608:	00000000 	.word	0x00000000
 801660c:	080163bf 	.word	0x080163bf

08016610 <_printf_common>:
 8016610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016614:	4691      	mov	r9, r2
 8016616:	461f      	mov	r7, r3
 8016618:	688a      	ldr	r2, [r1, #8]
 801661a:	690b      	ldr	r3, [r1, #16]
 801661c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016620:	4293      	cmp	r3, r2
 8016622:	bfb8      	it	lt
 8016624:	4613      	movlt	r3, r2
 8016626:	f8c9 3000 	str.w	r3, [r9]
 801662a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801662e:	4606      	mov	r6, r0
 8016630:	460c      	mov	r4, r1
 8016632:	b112      	cbz	r2, 801663a <_printf_common+0x2a>
 8016634:	3301      	adds	r3, #1
 8016636:	f8c9 3000 	str.w	r3, [r9]
 801663a:	6823      	ldr	r3, [r4, #0]
 801663c:	0699      	lsls	r1, r3, #26
 801663e:	bf42      	ittt	mi
 8016640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016644:	3302      	addmi	r3, #2
 8016646:	f8c9 3000 	strmi.w	r3, [r9]
 801664a:	6825      	ldr	r5, [r4, #0]
 801664c:	f015 0506 	ands.w	r5, r5, #6
 8016650:	d107      	bne.n	8016662 <_printf_common+0x52>
 8016652:	f104 0a19 	add.w	sl, r4, #25
 8016656:	68e3      	ldr	r3, [r4, #12]
 8016658:	f8d9 2000 	ldr.w	r2, [r9]
 801665c:	1a9b      	subs	r3, r3, r2
 801665e:	42ab      	cmp	r3, r5
 8016660:	dc28      	bgt.n	80166b4 <_printf_common+0xa4>
 8016662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016666:	6822      	ldr	r2, [r4, #0]
 8016668:	3300      	adds	r3, #0
 801666a:	bf18      	it	ne
 801666c:	2301      	movne	r3, #1
 801666e:	0692      	lsls	r2, r2, #26
 8016670:	d42d      	bmi.n	80166ce <_printf_common+0xbe>
 8016672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016676:	4639      	mov	r1, r7
 8016678:	4630      	mov	r0, r6
 801667a:	47c0      	blx	r8
 801667c:	3001      	adds	r0, #1
 801667e:	d020      	beq.n	80166c2 <_printf_common+0xb2>
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	68e5      	ldr	r5, [r4, #12]
 8016684:	f8d9 2000 	ldr.w	r2, [r9]
 8016688:	f003 0306 	and.w	r3, r3, #6
 801668c:	2b04      	cmp	r3, #4
 801668e:	bf08      	it	eq
 8016690:	1aad      	subeq	r5, r5, r2
 8016692:	68a3      	ldr	r3, [r4, #8]
 8016694:	6922      	ldr	r2, [r4, #16]
 8016696:	bf0c      	ite	eq
 8016698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801669c:	2500      	movne	r5, #0
 801669e:	4293      	cmp	r3, r2
 80166a0:	bfc4      	itt	gt
 80166a2:	1a9b      	subgt	r3, r3, r2
 80166a4:	18ed      	addgt	r5, r5, r3
 80166a6:	f04f 0900 	mov.w	r9, #0
 80166aa:	341a      	adds	r4, #26
 80166ac:	454d      	cmp	r5, r9
 80166ae:	d11a      	bne.n	80166e6 <_printf_common+0xd6>
 80166b0:	2000      	movs	r0, #0
 80166b2:	e008      	b.n	80166c6 <_printf_common+0xb6>
 80166b4:	2301      	movs	r3, #1
 80166b6:	4652      	mov	r2, sl
 80166b8:	4639      	mov	r1, r7
 80166ba:	4630      	mov	r0, r6
 80166bc:	47c0      	blx	r8
 80166be:	3001      	adds	r0, #1
 80166c0:	d103      	bne.n	80166ca <_printf_common+0xba>
 80166c2:	f04f 30ff 	mov.w	r0, #4294967295
 80166c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ca:	3501      	adds	r5, #1
 80166cc:	e7c3      	b.n	8016656 <_printf_common+0x46>
 80166ce:	18e1      	adds	r1, r4, r3
 80166d0:	1c5a      	adds	r2, r3, #1
 80166d2:	2030      	movs	r0, #48	; 0x30
 80166d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166d8:	4422      	add	r2, r4
 80166da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166e2:	3302      	adds	r3, #2
 80166e4:	e7c5      	b.n	8016672 <_printf_common+0x62>
 80166e6:	2301      	movs	r3, #1
 80166e8:	4622      	mov	r2, r4
 80166ea:	4639      	mov	r1, r7
 80166ec:	4630      	mov	r0, r6
 80166ee:	47c0      	blx	r8
 80166f0:	3001      	adds	r0, #1
 80166f2:	d0e6      	beq.n	80166c2 <_printf_common+0xb2>
 80166f4:	f109 0901 	add.w	r9, r9, #1
 80166f8:	e7d8      	b.n	80166ac <_printf_common+0x9c>
	...

080166fc <_printf_i>:
 80166fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016704:	460c      	mov	r4, r1
 8016706:	7e09      	ldrb	r1, [r1, #24]
 8016708:	b085      	sub	sp, #20
 801670a:	296e      	cmp	r1, #110	; 0x6e
 801670c:	4617      	mov	r7, r2
 801670e:	4606      	mov	r6, r0
 8016710:	4698      	mov	r8, r3
 8016712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016714:	f000 80b3 	beq.w	801687e <_printf_i+0x182>
 8016718:	d822      	bhi.n	8016760 <_printf_i+0x64>
 801671a:	2963      	cmp	r1, #99	; 0x63
 801671c:	d036      	beq.n	801678c <_printf_i+0x90>
 801671e:	d80a      	bhi.n	8016736 <_printf_i+0x3a>
 8016720:	2900      	cmp	r1, #0
 8016722:	f000 80b9 	beq.w	8016898 <_printf_i+0x19c>
 8016726:	2958      	cmp	r1, #88	; 0x58
 8016728:	f000 8083 	beq.w	8016832 <_printf_i+0x136>
 801672c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016734:	e032      	b.n	801679c <_printf_i+0xa0>
 8016736:	2964      	cmp	r1, #100	; 0x64
 8016738:	d001      	beq.n	801673e <_printf_i+0x42>
 801673a:	2969      	cmp	r1, #105	; 0x69
 801673c:	d1f6      	bne.n	801672c <_printf_i+0x30>
 801673e:	6820      	ldr	r0, [r4, #0]
 8016740:	6813      	ldr	r3, [r2, #0]
 8016742:	0605      	lsls	r5, r0, #24
 8016744:	f103 0104 	add.w	r1, r3, #4
 8016748:	d52a      	bpl.n	80167a0 <_printf_i+0xa4>
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	6011      	str	r1, [r2, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	da03      	bge.n	801675a <_printf_i+0x5e>
 8016752:	222d      	movs	r2, #45	; 0x2d
 8016754:	425b      	negs	r3, r3
 8016756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801675a:	486f      	ldr	r0, [pc, #444]	; (8016918 <_printf_i+0x21c>)
 801675c:	220a      	movs	r2, #10
 801675e:	e039      	b.n	80167d4 <_printf_i+0xd8>
 8016760:	2973      	cmp	r1, #115	; 0x73
 8016762:	f000 809d 	beq.w	80168a0 <_printf_i+0x1a4>
 8016766:	d808      	bhi.n	801677a <_printf_i+0x7e>
 8016768:	296f      	cmp	r1, #111	; 0x6f
 801676a:	d020      	beq.n	80167ae <_printf_i+0xb2>
 801676c:	2970      	cmp	r1, #112	; 0x70
 801676e:	d1dd      	bne.n	801672c <_printf_i+0x30>
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	f043 0320 	orr.w	r3, r3, #32
 8016776:	6023      	str	r3, [r4, #0]
 8016778:	e003      	b.n	8016782 <_printf_i+0x86>
 801677a:	2975      	cmp	r1, #117	; 0x75
 801677c:	d017      	beq.n	80167ae <_printf_i+0xb2>
 801677e:	2978      	cmp	r1, #120	; 0x78
 8016780:	d1d4      	bne.n	801672c <_printf_i+0x30>
 8016782:	2378      	movs	r3, #120	; 0x78
 8016784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016788:	4864      	ldr	r0, [pc, #400]	; (801691c <_printf_i+0x220>)
 801678a:	e055      	b.n	8016838 <_printf_i+0x13c>
 801678c:	6813      	ldr	r3, [r2, #0]
 801678e:	1d19      	adds	r1, r3, #4
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	6011      	str	r1, [r2, #0]
 8016794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801679c:	2301      	movs	r3, #1
 801679e:	e08c      	b.n	80168ba <_printf_i+0x1be>
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	6011      	str	r1, [r2, #0]
 80167a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167a8:	bf18      	it	ne
 80167aa:	b21b      	sxthne	r3, r3
 80167ac:	e7cf      	b.n	801674e <_printf_i+0x52>
 80167ae:	6813      	ldr	r3, [r2, #0]
 80167b0:	6825      	ldr	r5, [r4, #0]
 80167b2:	1d18      	adds	r0, r3, #4
 80167b4:	6010      	str	r0, [r2, #0]
 80167b6:	0628      	lsls	r0, r5, #24
 80167b8:	d501      	bpl.n	80167be <_printf_i+0xc2>
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	e002      	b.n	80167c4 <_printf_i+0xc8>
 80167be:	0668      	lsls	r0, r5, #25
 80167c0:	d5fb      	bpl.n	80167ba <_printf_i+0xbe>
 80167c2:	881b      	ldrh	r3, [r3, #0]
 80167c4:	4854      	ldr	r0, [pc, #336]	; (8016918 <_printf_i+0x21c>)
 80167c6:	296f      	cmp	r1, #111	; 0x6f
 80167c8:	bf14      	ite	ne
 80167ca:	220a      	movne	r2, #10
 80167cc:	2208      	moveq	r2, #8
 80167ce:	2100      	movs	r1, #0
 80167d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167d4:	6865      	ldr	r5, [r4, #4]
 80167d6:	60a5      	str	r5, [r4, #8]
 80167d8:	2d00      	cmp	r5, #0
 80167da:	f2c0 8095 	blt.w	8016908 <_printf_i+0x20c>
 80167de:	6821      	ldr	r1, [r4, #0]
 80167e0:	f021 0104 	bic.w	r1, r1, #4
 80167e4:	6021      	str	r1, [r4, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d13d      	bne.n	8016866 <_printf_i+0x16a>
 80167ea:	2d00      	cmp	r5, #0
 80167ec:	f040 808e 	bne.w	801690c <_printf_i+0x210>
 80167f0:	4665      	mov	r5, ip
 80167f2:	2a08      	cmp	r2, #8
 80167f4:	d10b      	bne.n	801680e <_printf_i+0x112>
 80167f6:	6823      	ldr	r3, [r4, #0]
 80167f8:	07db      	lsls	r3, r3, #31
 80167fa:	d508      	bpl.n	801680e <_printf_i+0x112>
 80167fc:	6923      	ldr	r3, [r4, #16]
 80167fe:	6862      	ldr	r2, [r4, #4]
 8016800:	429a      	cmp	r2, r3
 8016802:	bfde      	ittt	le
 8016804:	2330      	movle	r3, #48	; 0x30
 8016806:	f805 3c01 	strble.w	r3, [r5, #-1]
 801680a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801680e:	ebac 0305 	sub.w	r3, ip, r5
 8016812:	6123      	str	r3, [r4, #16]
 8016814:	f8cd 8000 	str.w	r8, [sp]
 8016818:	463b      	mov	r3, r7
 801681a:	aa03      	add	r2, sp, #12
 801681c:	4621      	mov	r1, r4
 801681e:	4630      	mov	r0, r6
 8016820:	f7ff fef6 	bl	8016610 <_printf_common>
 8016824:	3001      	adds	r0, #1
 8016826:	d14d      	bne.n	80168c4 <_printf_i+0x1c8>
 8016828:	f04f 30ff 	mov.w	r0, #4294967295
 801682c:	b005      	add	sp, #20
 801682e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016832:	4839      	ldr	r0, [pc, #228]	; (8016918 <_printf_i+0x21c>)
 8016834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016838:	6813      	ldr	r3, [r2, #0]
 801683a:	6821      	ldr	r1, [r4, #0]
 801683c:	1d1d      	adds	r5, r3, #4
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	6015      	str	r5, [r2, #0]
 8016842:	060a      	lsls	r2, r1, #24
 8016844:	d50b      	bpl.n	801685e <_printf_i+0x162>
 8016846:	07ca      	lsls	r2, r1, #31
 8016848:	bf44      	itt	mi
 801684a:	f041 0120 	orrmi.w	r1, r1, #32
 801684e:	6021      	strmi	r1, [r4, #0]
 8016850:	b91b      	cbnz	r3, 801685a <_printf_i+0x15e>
 8016852:	6822      	ldr	r2, [r4, #0]
 8016854:	f022 0220 	bic.w	r2, r2, #32
 8016858:	6022      	str	r2, [r4, #0]
 801685a:	2210      	movs	r2, #16
 801685c:	e7b7      	b.n	80167ce <_printf_i+0xd2>
 801685e:	064d      	lsls	r5, r1, #25
 8016860:	bf48      	it	mi
 8016862:	b29b      	uxthmi	r3, r3
 8016864:	e7ef      	b.n	8016846 <_printf_i+0x14a>
 8016866:	4665      	mov	r5, ip
 8016868:	fbb3 f1f2 	udiv	r1, r3, r2
 801686c:	fb02 3311 	mls	r3, r2, r1, r3
 8016870:	5cc3      	ldrb	r3, [r0, r3]
 8016872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016876:	460b      	mov	r3, r1
 8016878:	2900      	cmp	r1, #0
 801687a:	d1f5      	bne.n	8016868 <_printf_i+0x16c>
 801687c:	e7b9      	b.n	80167f2 <_printf_i+0xf6>
 801687e:	6813      	ldr	r3, [r2, #0]
 8016880:	6825      	ldr	r5, [r4, #0]
 8016882:	6961      	ldr	r1, [r4, #20]
 8016884:	1d18      	adds	r0, r3, #4
 8016886:	6010      	str	r0, [r2, #0]
 8016888:	0628      	lsls	r0, r5, #24
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	d501      	bpl.n	8016892 <_printf_i+0x196>
 801688e:	6019      	str	r1, [r3, #0]
 8016890:	e002      	b.n	8016898 <_printf_i+0x19c>
 8016892:	066a      	lsls	r2, r5, #25
 8016894:	d5fb      	bpl.n	801688e <_printf_i+0x192>
 8016896:	8019      	strh	r1, [r3, #0]
 8016898:	2300      	movs	r3, #0
 801689a:	6123      	str	r3, [r4, #16]
 801689c:	4665      	mov	r5, ip
 801689e:	e7b9      	b.n	8016814 <_printf_i+0x118>
 80168a0:	6813      	ldr	r3, [r2, #0]
 80168a2:	1d19      	adds	r1, r3, #4
 80168a4:	6011      	str	r1, [r2, #0]
 80168a6:	681d      	ldr	r5, [r3, #0]
 80168a8:	6862      	ldr	r2, [r4, #4]
 80168aa:	2100      	movs	r1, #0
 80168ac:	4628      	mov	r0, r5
 80168ae:	f7e9 fcbf 	bl	8000230 <memchr>
 80168b2:	b108      	cbz	r0, 80168b8 <_printf_i+0x1bc>
 80168b4:	1b40      	subs	r0, r0, r5
 80168b6:	6060      	str	r0, [r4, #4]
 80168b8:	6863      	ldr	r3, [r4, #4]
 80168ba:	6123      	str	r3, [r4, #16]
 80168bc:	2300      	movs	r3, #0
 80168be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168c2:	e7a7      	b.n	8016814 <_printf_i+0x118>
 80168c4:	6923      	ldr	r3, [r4, #16]
 80168c6:	462a      	mov	r2, r5
 80168c8:	4639      	mov	r1, r7
 80168ca:	4630      	mov	r0, r6
 80168cc:	47c0      	blx	r8
 80168ce:	3001      	adds	r0, #1
 80168d0:	d0aa      	beq.n	8016828 <_printf_i+0x12c>
 80168d2:	6823      	ldr	r3, [r4, #0]
 80168d4:	079b      	lsls	r3, r3, #30
 80168d6:	d413      	bmi.n	8016900 <_printf_i+0x204>
 80168d8:	68e0      	ldr	r0, [r4, #12]
 80168da:	9b03      	ldr	r3, [sp, #12]
 80168dc:	4298      	cmp	r0, r3
 80168de:	bfb8      	it	lt
 80168e0:	4618      	movlt	r0, r3
 80168e2:	e7a3      	b.n	801682c <_printf_i+0x130>
 80168e4:	2301      	movs	r3, #1
 80168e6:	464a      	mov	r2, r9
 80168e8:	4639      	mov	r1, r7
 80168ea:	4630      	mov	r0, r6
 80168ec:	47c0      	blx	r8
 80168ee:	3001      	adds	r0, #1
 80168f0:	d09a      	beq.n	8016828 <_printf_i+0x12c>
 80168f2:	3501      	adds	r5, #1
 80168f4:	68e3      	ldr	r3, [r4, #12]
 80168f6:	9a03      	ldr	r2, [sp, #12]
 80168f8:	1a9b      	subs	r3, r3, r2
 80168fa:	42ab      	cmp	r3, r5
 80168fc:	dcf2      	bgt.n	80168e4 <_printf_i+0x1e8>
 80168fe:	e7eb      	b.n	80168d8 <_printf_i+0x1dc>
 8016900:	2500      	movs	r5, #0
 8016902:	f104 0919 	add.w	r9, r4, #25
 8016906:	e7f5      	b.n	80168f4 <_printf_i+0x1f8>
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1ac      	bne.n	8016866 <_printf_i+0x16a>
 801690c:	7803      	ldrb	r3, [r0, #0]
 801690e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016916:	e76c      	b.n	80167f2 <_printf_i+0xf6>
 8016918:	0801d677 	.word	0x0801d677
 801691c:	0801d688 	.word	0x0801d688

08016920 <_sbrk_r>:
 8016920:	b538      	push	{r3, r4, r5, lr}
 8016922:	4c06      	ldr	r4, [pc, #24]	; (801693c <_sbrk_r+0x1c>)
 8016924:	2300      	movs	r3, #0
 8016926:	4605      	mov	r5, r0
 8016928:	4608      	mov	r0, r1
 801692a:	6023      	str	r3, [r4, #0]
 801692c:	f7eb fa98 	bl	8001e60 <_sbrk>
 8016930:	1c43      	adds	r3, r0, #1
 8016932:	d102      	bne.n	801693a <_sbrk_r+0x1a>
 8016934:	6823      	ldr	r3, [r4, #0]
 8016936:	b103      	cbz	r3, 801693a <_sbrk_r+0x1a>
 8016938:	602b      	str	r3, [r5, #0]
 801693a:	bd38      	pop	{r3, r4, r5, pc}
 801693c:	2000b11c 	.word	0x2000b11c

08016940 <__sread>:
 8016940:	b510      	push	{r4, lr}
 8016942:	460c      	mov	r4, r1
 8016944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016948:	f000 fae4 	bl	8016f14 <_read_r>
 801694c:	2800      	cmp	r0, #0
 801694e:	bfab      	itete	ge
 8016950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016952:	89a3      	ldrhlt	r3, [r4, #12]
 8016954:	181b      	addge	r3, r3, r0
 8016956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801695a:	bfac      	ite	ge
 801695c:	6563      	strge	r3, [r4, #84]	; 0x54
 801695e:	81a3      	strhlt	r3, [r4, #12]
 8016960:	bd10      	pop	{r4, pc}

08016962 <__swrite>:
 8016962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016966:	461f      	mov	r7, r3
 8016968:	898b      	ldrh	r3, [r1, #12]
 801696a:	05db      	lsls	r3, r3, #23
 801696c:	4605      	mov	r5, r0
 801696e:	460c      	mov	r4, r1
 8016970:	4616      	mov	r6, r2
 8016972:	d505      	bpl.n	8016980 <__swrite+0x1e>
 8016974:	2302      	movs	r3, #2
 8016976:	2200      	movs	r2, #0
 8016978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801697c:	f000 f9c4 	bl	8016d08 <_lseek_r>
 8016980:	89a3      	ldrh	r3, [r4, #12]
 8016982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801698a:	81a3      	strh	r3, [r4, #12]
 801698c:	4632      	mov	r2, r6
 801698e:	463b      	mov	r3, r7
 8016990:	4628      	mov	r0, r5
 8016992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016996:	f000 b877 	b.w	8016a88 <_write_r>

0801699a <__sseek>:
 801699a:	b510      	push	{r4, lr}
 801699c:	460c      	mov	r4, r1
 801699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169a2:	f000 f9b1 	bl	8016d08 <_lseek_r>
 80169a6:	1c43      	adds	r3, r0, #1
 80169a8:	89a3      	ldrh	r3, [r4, #12]
 80169aa:	bf15      	itete	ne
 80169ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80169ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80169b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80169b6:	81a3      	strheq	r3, [r4, #12]
 80169b8:	bf18      	it	ne
 80169ba:	81a3      	strhne	r3, [r4, #12]
 80169bc:	bd10      	pop	{r4, pc}

080169be <__sclose>:
 80169be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169c2:	f000 b8e1 	b.w	8016b88 <_close_r>
	...

080169c8 <__swbuf_r>:
 80169c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ca:	460e      	mov	r6, r1
 80169cc:	4614      	mov	r4, r2
 80169ce:	4605      	mov	r5, r0
 80169d0:	b118      	cbz	r0, 80169da <__swbuf_r+0x12>
 80169d2:	6983      	ldr	r3, [r0, #24]
 80169d4:	b90b      	cbnz	r3, 80169da <__swbuf_r+0x12>
 80169d6:	f7ff fa8f 	bl	8015ef8 <__sinit>
 80169da:	4b21      	ldr	r3, [pc, #132]	; (8016a60 <__swbuf_r+0x98>)
 80169dc:	429c      	cmp	r4, r3
 80169de:	d12a      	bne.n	8016a36 <__swbuf_r+0x6e>
 80169e0:	686c      	ldr	r4, [r5, #4]
 80169e2:	69a3      	ldr	r3, [r4, #24]
 80169e4:	60a3      	str	r3, [r4, #8]
 80169e6:	89a3      	ldrh	r3, [r4, #12]
 80169e8:	071a      	lsls	r2, r3, #28
 80169ea:	d52e      	bpl.n	8016a4a <__swbuf_r+0x82>
 80169ec:	6923      	ldr	r3, [r4, #16]
 80169ee:	b363      	cbz	r3, 8016a4a <__swbuf_r+0x82>
 80169f0:	6923      	ldr	r3, [r4, #16]
 80169f2:	6820      	ldr	r0, [r4, #0]
 80169f4:	1ac0      	subs	r0, r0, r3
 80169f6:	6963      	ldr	r3, [r4, #20]
 80169f8:	b2f6      	uxtb	r6, r6
 80169fa:	4283      	cmp	r3, r0
 80169fc:	4637      	mov	r7, r6
 80169fe:	dc04      	bgt.n	8016a0a <__swbuf_r+0x42>
 8016a00:	4621      	mov	r1, r4
 8016a02:	4628      	mov	r0, r5
 8016a04:	f000 f956 	bl	8016cb4 <_fflush_r>
 8016a08:	bb28      	cbnz	r0, 8016a56 <__swbuf_r+0x8e>
 8016a0a:	68a3      	ldr	r3, [r4, #8]
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	60a3      	str	r3, [r4, #8]
 8016a10:	6823      	ldr	r3, [r4, #0]
 8016a12:	1c5a      	adds	r2, r3, #1
 8016a14:	6022      	str	r2, [r4, #0]
 8016a16:	701e      	strb	r6, [r3, #0]
 8016a18:	6963      	ldr	r3, [r4, #20]
 8016a1a:	3001      	adds	r0, #1
 8016a1c:	4283      	cmp	r3, r0
 8016a1e:	d004      	beq.n	8016a2a <__swbuf_r+0x62>
 8016a20:	89a3      	ldrh	r3, [r4, #12]
 8016a22:	07db      	lsls	r3, r3, #31
 8016a24:	d519      	bpl.n	8016a5a <__swbuf_r+0x92>
 8016a26:	2e0a      	cmp	r6, #10
 8016a28:	d117      	bne.n	8016a5a <__swbuf_r+0x92>
 8016a2a:	4621      	mov	r1, r4
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	f000 f941 	bl	8016cb4 <_fflush_r>
 8016a32:	b190      	cbz	r0, 8016a5a <__swbuf_r+0x92>
 8016a34:	e00f      	b.n	8016a56 <__swbuf_r+0x8e>
 8016a36:	4b0b      	ldr	r3, [pc, #44]	; (8016a64 <__swbuf_r+0x9c>)
 8016a38:	429c      	cmp	r4, r3
 8016a3a:	d101      	bne.n	8016a40 <__swbuf_r+0x78>
 8016a3c:	68ac      	ldr	r4, [r5, #8]
 8016a3e:	e7d0      	b.n	80169e2 <__swbuf_r+0x1a>
 8016a40:	4b09      	ldr	r3, [pc, #36]	; (8016a68 <__swbuf_r+0xa0>)
 8016a42:	429c      	cmp	r4, r3
 8016a44:	bf08      	it	eq
 8016a46:	68ec      	ldreq	r4, [r5, #12]
 8016a48:	e7cb      	b.n	80169e2 <__swbuf_r+0x1a>
 8016a4a:	4621      	mov	r1, r4
 8016a4c:	4628      	mov	r0, r5
 8016a4e:	f000 f82d 	bl	8016aac <__swsetup_r>
 8016a52:	2800      	cmp	r0, #0
 8016a54:	d0cc      	beq.n	80169f0 <__swbuf_r+0x28>
 8016a56:	f04f 37ff 	mov.w	r7, #4294967295
 8016a5a:	4638      	mov	r0, r7
 8016a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	0801d61c 	.word	0x0801d61c
 8016a64:	0801d63c 	.word	0x0801d63c
 8016a68:	0801d5fc 	.word	0x0801d5fc

08016a6c <__ascii_wctomb>:
 8016a6c:	b149      	cbz	r1, 8016a82 <__ascii_wctomb+0x16>
 8016a6e:	2aff      	cmp	r2, #255	; 0xff
 8016a70:	bf85      	ittet	hi
 8016a72:	238a      	movhi	r3, #138	; 0x8a
 8016a74:	6003      	strhi	r3, [r0, #0]
 8016a76:	700a      	strbls	r2, [r1, #0]
 8016a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8016a7c:	bf98      	it	ls
 8016a7e:	2001      	movls	r0, #1
 8016a80:	4770      	bx	lr
 8016a82:	4608      	mov	r0, r1
 8016a84:	4770      	bx	lr
	...

08016a88 <_write_r>:
 8016a88:	b538      	push	{r3, r4, r5, lr}
 8016a8a:	4c07      	ldr	r4, [pc, #28]	; (8016aa8 <_write_r+0x20>)
 8016a8c:	4605      	mov	r5, r0
 8016a8e:	4608      	mov	r0, r1
 8016a90:	4611      	mov	r1, r2
 8016a92:	2200      	movs	r2, #0
 8016a94:	6022      	str	r2, [r4, #0]
 8016a96:	461a      	mov	r2, r3
 8016a98:	f7eb f991 	bl	8001dbe <_write>
 8016a9c:	1c43      	adds	r3, r0, #1
 8016a9e:	d102      	bne.n	8016aa6 <_write_r+0x1e>
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	b103      	cbz	r3, 8016aa6 <_write_r+0x1e>
 8016aa4:	602b      	str	r3, [r5, #0]
 8016aa6:	bd38      	pop	{r3, r4, r5, pc}
 8016aa8:	2000b11c 	.word	0x2000b11c

08016aac <__swsetup_r>:
 8016aac:	4b32      	ldr	r3, [pc, #200]	; (8016b78 <__swsetup_r+0xcc>)
 8016aae:	b570      	push	{r4, r5, r6, lr}
 8016ab0:	681d      	ldr	r5, [r3, #0]
 8016ab2:	4606      	mov	r6, r0
 8016ab4:	460c      	mov	r4, r1
 8016ab6:	b125      	cbz	r5, 8016ac2 <__swsetup_r+0x16>
 8016ab8:	69ab      	ldr	r3, [r5, #24]
 8016aba:	b913      	cbnz	r3, 8016ac2 <__swsetup_r+0x16>
 8016abc:	4628      	mov	r0, r5
 8016abe:	f7ff fa1b 	bl	8015ef8 <__sinit>
 8016ac2:	4b2e      	ldr	r3, [pc, #184]	; (8016b7c <__swsetup_r+0xd0>)
 8016ac4:	429c      	cmp	r4, r3
 8016ac6:	d10f      	bne.n	8016ae8 <__swsetup_r+0x3c>
 8016ac8:	686c      	ldr	r4, [r5, #4]
 8016aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ace:	b29a      	uxth	r2, r3
 8016ad0:	0715      	lsls	r5, r2, #28
 8016ad2:	d42c      	bmi.n	8016b2e <__swsetup_r+0x82>
 8016ad4:	06d0      	lsls	r0, r2, #27
 8016ad6:	d411      	bmi.n	8016afc <__swsetup_r+0x50>
 8016ad8:	2209      	movs	r2, #9
 8016ada:	6032      	str	r2, [r6, #0]
 8016adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ae0:	81a3      	strh	r3, [r4, #12]
 8016ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae6:	e03e      	b.n	8016b66 <__swsetup_r+0xba>
 8016ae8:	4b25      	ldr	r3, [pc, #148]	; (8016b80 <__swsetup_r+0xd4>)
 8016aea:	429c      	cmp	r4, r3
 8016aec:	d101      	bne.n	8016af2 <__swsetup_r+0x46>
 8016aee:	68ac      	ldr	r4, [r5, #8]
 8016af0:	e7eb      	b.n	8016aca <__swsetup_r+0x1e>
 8016af2:	4b24      	ldr	r3, [pc, #144]	; (8016b84 <__swsetup_r+0xd8>)
 8016af4:	429c      	cmp	r4, r3
 8016af6:	bf08      	it	eq
 8016af8:	68ec      	ldreq	r4, [r5, #12]
 8016afa:	e7e6      	b.n	8016aca <__swsetup_r+0x1e>
 8016afc:	0751      	lsls	r1, r2, #29
 8016afe:	d512      	bpl.n	8016b26 <__swsetup_r+0x7a>
 8016b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b02:	b141      	cbz	r1, 8016b16 <__swsetup_r+0x6a>
 8016b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b08:	4299      	cmp	r1, r3
 8016b0a:	d002      	beq.n	8016b12 <__swsetup_r+0x66>
 8016b0c:	4630      	mov	r0, r6
 8016b0e:	f000 f98d 	bl	8016e2c <_free_r>
 8016b12:	2300      	movs	r3, #0
 8016b14:	6363      	str	r3, [r4, #52]	; 0x34
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016b1c:	81a3      	strh	r3, [r4, #12]
 8016b1e:	2300      	movs	r3, #0
 8016b20:	6063      	str	r3, [r4, #4]
 8016b22:	6923      	ldr	r3, [r4, #16]
 8016b24:	6023      	str	r3, [r4, #0]
 8016b26:	89a3      	ldrh	r3, [r4, #12]
 8016b28:	f043 0308 	orr.w	r3, r3, #8
 8016b2c:	81a3      	strh	r3, [r4, #12]
 8016b2e:	6923      	ldr	r3, [r4, #16]
 8016b30:	b94b      	cbnz	r3, 8016b46 <__swsetup_r+0x9a>
 8016b32:	89a3      	ldrh	r3, [r4, #12]
 8016b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b3c:	d003      	beq.n	8016b46 <__swsetup_r+0x9a>
 8016b3e:	4621      	mov	r1, r4
 8016b40:	4630      	mov	r0, r6
 8016b42:	f000 f917 	bl	8016d74 <__smakebuf_r>
 8016b46:	89a2      	ldrh	r2, [r4, #12]
 8016b48:	f012 0301 	ands.w	r3, r2, #1
 8016b4c:	d00c      	beq.n	8016b68 <__swsetup_r+0xbc>
 8016b4e:	2300      	movs	r3, #0
 8016b50:	60a3      	str	r3, [r4, #8]
 8016b52:	6963      	ldr	r3, [r4, #20]
 8016b54:	425b      	negs	r3, r3
 8016b56:	61a3      	str	r3, [r4, #24]
 8016b58:	6923      	ldr	r3, [r4, #16]
 8016b5a:	b953      	cbnz	r3, 8016b72 <__swsetup_r+0xc6>
 8016b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016b64:	d1ba      	bne.n	8016adc <__swsetup_r+0x30>
 8016b66:	bd70      	pop	{r4, r5, r6, pc}
 8016b68:	0792      	lsls	r2, r2, #30
 8016b6a:	bf58      	it	pl
 8016b6c:	6963      	ldrpl	r3, [r4, #20]
 8016b6e:	60a3      	str	r3, [r4, #8]
 8016b70:	e7f2      	b.n	8016b58 <__swsetup_r+0xac>
 8016b72:	2000      	movs	r0, #0
 8016b74:	e7f7      	b.n	8016b66 <__swsetup_r+0xba>
 8016b76:	bf00      	nop
 8016b78:	20000034 	.word	0x20000034
 8016b7c:	0801d61c 	.word	0x0801d61c
 8016b80:	0801d63c 	.word	0x0801d63c
 8016b84:	0801d5fc 	.word	0x0801d5fc

08016b88 <_close_r>:
 8016b88:	b538      	push	{r3, r4, r5, lr}
 8016b8a:	4c06      	ldr	r4, [pc, #24]	; (8016ba4 <_close_r+0x1c>)
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	4605      	mov	r5, r0
 8016b90:	4608      	mov	r0, r1
 8016b92:	6023      	str	r3, [r4, #0]
 8016b94:	f7eb f92f 	bl	8001df6 <_close>
 8016b98:	1c43      	adds	r3, r0, #1
 8016b9a:	d102      	bne.n	8016ba2 <_close_r+0x1a>
 8016b9c:	6823      	ldr	r3, [r4, #0]
 8016b9e:	b103      	cbz	r3, 8016ba2 <_close_r+0x1a>
 8016ba0:	602b      	str	r3, [r5, #0]
 8016ba2:	bd38      	pop	{r3, r4, r5, pc}
 8016ba4:	2000b11c 	.word	0x2000b11c

08016ba8 <__sflush_r>:
 8016ba8:	898a      	ldrh	r2, [r1, #12]
 8016baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bae:	4605      	mov	r5, r0
 8016bb0:	0710      	lsls	r0, r2, #28
 8016bb2:	460c      	mov	r4, r1
 8016bb4:	d458      	bmi.n	8016c68 <__sflush_r+0xc0>
 8016bb6:	684b      	ldr	r3, [r1, #4]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	dc05      	bgt.n	8016bc8 <__sflush_r+0x20>
 8016bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	dc02      	bgt.n	8016bc8 <__sflush_r+0x20>
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bca:	2e00      	cmp	r6, #0
 8016bcc:	d0f9      	beq.n	8016bc2 <__sflush_r+0x1a>
 8016bce:	2300      	movs	r3, #0
 8016bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016bd4:	682f      	ldr	r7, [r5, #0]
 8016bd6:	6a21      	ldr	r1, [r4, #32]
 8016bd8:	602b      	str	r3, [r5, #0]
 8016bda:	d032      	beq.n	8016c42 <__sflush_r+0x9a>
 8016bdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016bde:	89a3      	ldrh	r3, [r4, #12]
 8016be0:	075a      	lsls	r2, r3, #29
 8016be2:	d505      	bpl.n	8016bf0 <__sflush_r+0x48>
 8016be4:	6863      	ldr	r3, [r4, #4]
 8016be6:	1ac0      	subs	r0, r0, r3
 8016be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bea:	b10b      	cbz	r3, 8016bf0 <__sflush_r+0x48>
 8016bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016bee:	1ac0      	subs	r0, r0, r3
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bf6:	6a21      	ldr	r1, [r4, #32]
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	47b0      	blx	r6
 8016bfc:	1c43      	adds	r3, r0, #1
 8016bfe:	89a3      	ldrh	r3, [r4, #12]
 8016c00:	d106      	bne.n	8016c10 <__sflush_r+0x68>
 8016c02:	6829      	ldr	r1, [r5, #0]
 8016c04:	291d      	cmp	r1, #29
 8016c06:	d848      	bhi.n	8016c9a <__sflush_r+0xf2>
 8016c08:	4a29      	ldr	r2, [pc, #164]	; (8016cb0 <__sflush_r+0x108>)
 8016c0a:	40ca      	lsrs	r2, r1
 8016c0c:	07d6      	lsls	r6, r2, #31
 8016c0e:	d544      	bpl.n	8016c9a <__sflush_r+0xf2>
 8016c10:	2200      	movs	r2, #0
 8016c12:	6062      	str	r2, [r4, #4]
 8016c14:	04d9      	lsls	r1, r3, #19
 8016c16:	6922      	ldr	r2, [r4, #16]
 8016c18:	6022      	str	r2, [r4, #0]
 8016c1a:	d504      	bpl.n	8016c26 <__sflush_r+0x7e>
 8016c1c:	1c42      	adds	r2, r0, #1
 8016c1e:	d101      	bne.n	8016c24 <__sflush_r+0x7c>
 8016c20:	682b      	ldr	r3, [r5, #0]
 8016c22:	b903      	cbnz	r3, 8016c26 <__sflush_r+0x7e>
 8016c24:	6560      	str	r0, [r4, #84]	; 0x54
 8016c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c28:	602f      	str	r7, [r5, #0]
 8016c2a:	2900      	cmp	r1, #0
 8016c2c:	d0c9      	beq.n	8016bc2 <__sflush_r+0x1a>
 8016c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c32:	4299      	cmp	r1, r3
 8016c34:	d002      	beq.n	8016c3c <__sflush_r+0x94>
 8016c36:	4628      	mov	r0, r5
 8016c38:	f000 f8f8 	bl	8016e2c <_free_r>
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	6360      	str	r0, [r4, #52]	; 0x34
 8016c40:	e7c0      	b.n	8016bc4 <__sflush_r+0x1c>
 8016c42:	2301      	movs	r3, #1
 8016c44:	4628      	mov	r0, r5
 8016c46:	47b0      	blx	r6
 8016c48:	1c41      	adds	r1, r0, #1
 8016c4a:	d1c8      	bne.n	8016bde <__sflush_r+0x36>
 8016c4c:	682b      	ldr	r3, [r5, #0]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d0c5      	beq.n	8016bde <__sflush_r+0x36>
 8016c52:	2b1d      	cmp	r3, #29
 8016c54:	d001      	beq.n	8016c5a <__sflush_r+0xb2>
 8016c56:	2b16      	cmp	r3, #22
 8016c58:	d101      	bne.n	8016c5e <__sflush_r+0xb6>
 8016c5a:	602f      	str	r7, [r5, #0]
 8016c5c:	e7b1      	b.n	8016bc2 <__sflush_r+0x1a>
 8016c5e:	89a3      	ldrh	r3, [r4, #12]
 8016c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c64:	81a3      	strh	r3, [r4, #12]
 8016c66:	e7ad      	b.n	8016bc4 <__sflush_r+0x1c>
 8016c68:	690f      	ldr	r7, [r1, #16]
 8016c6a:	2f00      	cmp	r7, #0
 8016c6c:	d0a9      	beq.n	8016bc2 <__sflush_r+0x1a>
 8016c6e:	0793      	lsls	r3, r2, #30
 8016c70:	680e      	ldr	r6, [r1, #0]
 8016c72:	bf08      	it	eq
 8016c74:	694b      	ldreq	r3, [r1, #20]
 8016c76:	600f      	str	r7, [r1, #0]
 8016c78:	bf18      	it	ne
 8016c7a:	2300      	movne	r3, #0
 8016c7c:	eba6 0807 	sub.w	r8, r6, r7
 8016c80:	608b      	str	r3, [r1, #8]
 8016c82:	f1b8 0f00 	cmp.w	r8, #0
 8016c86:	dd9c      	ble.n	8016bc2 <__sflush_r+0x1a>
 8016c88:	4643      	mov	r3, r8
 8016c8a:	463a      	mov	r2, r7
 8016c8c:	6a21      	ldr	r1, [r4, #32]
 8016c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c90:	4628      	mov	r0, r5
 8016c92:	47b0      	blx	r6
 8016c94:	2800      	cmp	r0, #0
 8016c96:	dc06      	bgt.n	8016ca6 <__sflush_r+0xfe>
 8016c98:	89a3      	ldrh	r3, [r4, #12]
 8016c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c9e:	81a3      	strh	r3, [r4, #12]
 8016ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ca4:	e78e      	b.n	8016bc4 <__sflush_r+0x1c>
 8016ca6:	4407      	add	r7, r0
 8016ca8:	eba8 0800 	sub.w	r8, r8, r0
 8016cac:	e7e9      	b.n	8016c82 <__sflush_r+0xda>
 8016cae:	bf00      	nop
 8016cb0:	20400001 	.word	0x20400001

08016cb4 <_fflush_r>:
 8016cb4:	b538      	push	{r3, r4, r5, lr}
 8016cb6:	690b      	ldr	r3, [r1, #16]
 8016cb8:	4605      	mov	r5, r0
 8016cba:	460c      	mov	r4, r1
 8016cbc:	b1db      	cbz	r3, 8016cf6 <_fflush_r+0x42>
 8016cbe:	b118      	cbz	r0, 8016cc8 <_fflush_r+0x14>
 8016cc0:	6983      	ldr	r3, [r0, #24]
 8016cc2:	b90b      	cbnz	r3, 8016cc8 <_fflush_r+0x14>
 8016cc4:	f7ff f918 	bl	8015ef8 <__sinit>
 8016cc8:	4b0c      	ldr	r3, [pc, #48]	; (8016cfc <_fflush_r+0x48>)
 8016cca:	429c      	cmp	r4, r3
 8016ccc:	d109      	bne.n	8016ce2 <_fflush_r+0x2e>
 8016cce:	686c      	ldr	r4, [r5, #4]
 8016cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cd4:	b17b      	cbz	r3, 8016cf6 <_fflush_r+0x42>
 8016cd6:	4621      	mov	r1, r4
 8016cd8:	4628      	mov	r0, r5
 8016cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016cde:	f7ff bf63 	b.w	8016ba8 <__sflush_r>
 8016ce2:	4b07      	ldr	r3, [pc, #28]	; (8016d00 <_fflush_r+0x4c>)
 8016ce4:	429c      	cmp	r4, r3
 8016ce6:	d101      	bne.n	8016cec <_fflush_r+0x38>
 8016ce8:	68ac      	ldr	r4, [r5, #8]
 8016cea:	e7f1      	b.n	8016cd0 <_fflush_r+0x1c>
 8016cec:	4b05      	ldr	r3, [pc, #20]	; (8016d04 <_fflush_r+0x50>)
 8016cee:	429c      	cmp	r4, r3
 8016cf0:	bf08      	it	eq
 8016cf2:	68ec      	ldreq	r4, [r5, #12]
 8016cf4:	e7ec      	b.n	8016cd0 <_fflush_r+0x1c>
 8016cf6:	2000      	movs	r0, #0
 8016cf8:	bd38      	pop	{r3, r4, r5, pc}
 8016cfa:	bf00      	nop
 8016cfc:	0801d61c 	.word	0x0801d61c
 8016d00:	0801d63c 	.word	0x0801d63c
 8016d04:	0801d5fc 	.word	0x0801d5fc

08016d08 <_lseek_r>:
 8016d08:	b538      	push	{r3, r4, r5, lr}
 8016d0a:	4c07      	ldr	r4, [pc, #28]	; (8016d28 <_lseek_r+0x20>)
 8016d0c:	4605      	mov	r5, r0
 8016d0e:	4608      	mov	r0, r1
 8016d10:	4611      	mov	r1, r2
 8016d12:	2200      	movs	r2, #0
 8016d14:	6022      	str	r2, [r4, #0]
 8016d16:	461a      	mov	r2, r3
 8016d18:	f7eb f894 	bl	8001e44 <_lseek>
 8016d1c:	1c43      	adds	r3, r0, #1
 8016d1e:	d102      	bne.n	8016d26 <_lseek_r+0x1e>
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	b103      	cbz	r3, 8016d26 <_lseek_r+0x1e>
 8016d24:	602b      	str	r3, [r5, #0]
 8016d26:	bd38      	pop	{r3, r4, r5, pc}
 8016d28:	2000b11c 	.word	0x2000b11c

08016d2c <__swhatbuf_r>:
 8016d2c:	b570      	push	{r4, r5, r6, lr}
 8016d2e:	460e      	mov	r6, r1
 8016d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d34:	2900      	cmp	r1, #0
 8016d36:	b096      	sub	sp, #88	; 0x58
 8016d38:	4614      	mov	r4, r2
 8016d3a:	461d      	mov	r5, r3
 8016d3c:	da07      	bge.n	8016d4e <__swhatbuf_r+0x22>
 8016d3e:	2300      	movs	r3, #0
 8016d40:	602b      	str	r3, [r5, #0]
 8016d42:	89b3      	ldrh	r3, [r6, #12]
 8016d44:	061a      	lsls	r2, r3, #24
 8016d46:	d410      	bmi.n	8016d6a <__swhatbuf_r+0x3e>
 8016d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d4c:	e00e      	b.n	8016d6c <__swhatbuf_r+0x40>
 8016d4e:	466a      	mov	r2, sp
 8016d50:	f000 f8f2 	bl	8016f38 <_fstat_r>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	dbf2      	blt.n	8016d3e <__swhatbuf_r+0x12>
 8016d58:	9a01      	ldr	r2, [sp, #4]
 8016d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016d62:	425a      	negs	r2, r3
 8016d64:	415a      	adcs	r2, r3
 8016d66:	602a      	str	r2, [r5, #0]
 8016d68:	e7ee      	b.n	8016d48 <__swhatbuf_r+0x1c>
 8016d6a:	2340      	movs	r3, #64	; 0x40
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	6023      	str	r3, [r4, #0]
 8016d70:	b016      	add	sp, #88	; 0x58
 8016d72:	bd70      	pop	{r4, r5, r6, pc}

08016d74 <__smakebuf_r>:
 8016d74:	898b      	ldrh	r3, [r1, #12]
 8016d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d78:	079d      	lsls	r5, r3, #30
 8016d7a:	4606      	mov	r6, r0
 8016d7c:	460c      	mov	r4, r1
 8016d7e:	d507      	bpl.n	8016d90 <__smakebuf_r+0x1c>
 8016d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d84:	6023      	str	r3, [r4, #0]
 8016d86:	6123      	str	r3, [r4, #16]
 8016d88:	2301      	movs	r3, #1
 8016d8a:	6163      	str	r3, [r4, #20]
 8016d8c:	b002      	add	sp, #8
 8016d8e:	bd70      	pop	{r4, r5, r6, pc}
 8016d90:	ab01      	add	r3, sp, #4
 8016d92:	466a      	mov	r2, sp
 8016d94:	f7ff ffca 	bl	8016d2c <__swhatbuf_r>
 8016d98:	9900      	ldr	r1, [sp, #0]
 8016d9a:	4605      	mov	r5, r0
 8016d9c:	4630      	mov	r0, r6
 8016d9e:	f7ff f94b 	bl	8016038 <_malloc_r>
 8016da2:	b948      	cbnz	r0, 8016db8 <__smakebuf_r+0x44>
 8016da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016da8:	059a      	lsls	r2, r3, #22
 8016daa:	d4ef      	bmi.n	8016d8c <__smakebuf_r+0x18>
 8016dac:	f023 0303 	bic.w	r3, r3, #3
 8016db0:	f043 0302 	orr.w	r3, r3, #2
 8016db4:	81a3      	strh	r3, [r4, #12]
 8016db6:	e7e3      	b.n	8016d80 <__smakebuf_r+0xc>
 8016db8:	4b0d      	ldr	r3, [pc, #52]	; (8016df0 <__smakebuf_r+0x7c>)
 8016dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8016dbc:	89a3      	ldrh	r3, [r4, #12]
 8016dbe:	6020      	str	r0, [r4, #0]
 8016dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dc4:	81a3      	strh	r3, [r4, #12]
 8016dc6:	9b00      	ldr	r3, [sp, #0]
 8016dc8:	6163      	str	r3, [r4, #20]
 8016dca:	9b01      	ldr	r3, [sp, #4]
 8016dcc:	6120      	str	r0, [r4, #16]
 8016dce:	b15b      	cbz	r3, 8016de8 <__smakebuf_r+0x74>
 8016dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016dd4:	4630      	mov	r0, r6
 8016dd6:	f000 f8c1 	bl	8016f5c <_isatty_r>
 8016dda:	b128      	cbz	r0, 8016de8 <__smakebuf_r+0x74>
 8016ddc:	89a3      	ldrh	r3, [r4, #12]
 8016dde:	f023 0303 	bic.w	r3, r3, #3
 8016de2:	f043 0301 	orr.w	r3, r3, #1
 8016de6:	81a3      	strh	r3, [r4, #12]
 8016de8:	89a3      	ldrh	r3, [r4, #12]
 8016dea:	431d      	orrs	r5, r3
 8016dec:	81a5      	strh	r5, [r4, #12]
 8016dee:	e7cd      	b.n	8016d8c <__smakebuf_r+0x18>
 8016df0:	08015ec1 	.word	0x08015ec1

08016df4 <memmove>:
 8016df4:	4288      	cmp	r0, r1
 8016df6:	b510      	push	{r4, lr}
 8016df8:	eb01 0302 	add.w	r3, r1, r2
 8016dfc:	d807      	bhi.n	8016e0e <memmove+0x1a>
 8016dfe:	1e42      	subs	r2, r0, #1
 8016e00:	4299      	cmp	r1, r3
 8016e02:	d00a      	beq.n	8016e1a <memmove+0x26>
 8016e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016e0c:	e7f8      	b.n	8016e00 <memmove+0xc>
 8016e0e:	4283      	cmp	r3, r0
 8016e10:	d9f5      	bls.n	8016dfe <memmove+0xa>
 8016e12:	1881      	adds	r1, r0, r2
 8016e14:	1ad2      	subs	r2, r2, r3
 8016e16:	42d3      	cmn	r3, r2
 8016e18:	d100      	bne.n	8016e1c <memmove+0x28>
 8016e1a:	bd10      	pop	{r4, pc}
 8016e1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016e24:	e7f7      	b.n	8016e16 <memmove+0x22>

08016e26 <__malloc_lock>:
 8016e26:	4770      	bx	lr

08016e28 <__malloc_unlock>:
 8016e28:	4770      	bx	lr
	...

08016e2c <_free_r>:
 8016e2c:	b538      	push	{r3, r4, r5, lr}
 8016e2e:	4605      	mov	r5, r0
 8016e30:	2900      	cmp	r1, #0
 8016e32:	d045      	beq.n	8016ec0 <_free_r+0x94>
 8016e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e38:	1f0c      	subs	r4, r1, #4
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	bfb8      	it	lt
 8016e3e:	18e4      	addlt	r4, r4, r3
 8016e40:	f7ff fff1 	bl	8016e26 <__malloc_lock>
 8016e44:	4a1f      	ldr	r2, [pc, #124]	; (8016ec4 <_free_r+0x98>)
 8016e46:	6813      	ldr	r3, [r2, #0]
 8016e48:	4610      	mov	r0, r2
 8016e4a:	b933      	cbnz	r3, 8016e5a <_free_r+0x2e>
 8016e4c:	6063      	str	r3, [r4, #4]
 8016e4e:	6014      	str	r4, [r2, #0]
 8016e50:	4628      	mov	r0, r5
 8016e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e56:	f7ff bfe7 	b.w	8016e28 <__malloc_unlock>
 8016e5a:	42a3      	cmp	r3, r4
 8016e5c:	d90c      	bls.n	8016e78 <_free_r+0x4c>
 8016e5e:	6821      	ldr	r1, [r4, #0]
 8016e60:	1862      	adds	r2, r4, r1
 8016e62:	4293      	cmp	r3, r2
 8016e64:	bf04      	itt	eq
 8016e66:	681a      	ldreq	r2, [r3, #0]
 8016e68:	685b      	ldreq	r3, [r3, #4]
 8016e6a:	6063      	str	r3, [r4, #4]
 8016e6c:	bf04      	itt	eq
 8016e6e:	1852      	addeq	r2, r2, r1
 8016e70:	6022      	streq	r2, [r4, #0]
 8016e72:	6004      	str	r4, [r0, #0]
 8016e74:	e7ec      	b.n	8016e50 <_free_r+0x24>
 8016e76:	4613      	mov	r3, r2
 8016e78:	685a      	ldr	r2, [r3, #4]
 8016e7a:	b10a      	cbz	r2, 8016e80 <_free_r+0x54>
 8016e7c:	42a2      	cmp	r2, r4
 8016e7e:	d9fa      	bls.n	8016e76 <_free_r+0x4a>
 8016e80:	6819      	ldr	r1, [r3, #0]
 8016e82:	1858      	adds	r0, r3, r1
 8016e84:	42a0      	cmp	r0, r4
 8016e86:	d10b      	bne.n	8016ea0 <_free_r+0x74>
 8016e88:	6820      	ldr	r0, [r4, #0]
 8016e8a:	4401      	add	r1, r0
 8016e8c:	1858      	adds	r0, r3, r1
 8016e8e:	4282      	cmp	r2, r0
 8016e90:	6019      	str	r1, [r3, #0]
 8016e92:	d1dd      	bne.n	8016e50 <_free_r+0x24>
 8016e94:	6810      	ldr	r0, [r2, #0]
 8016e96:	6852      	ldr	r2, [r2, #4]
 8016e98:	605a      	str	r2, [r3, #4]
 8016e9a:	4401      	add	r1, r0
 8016e9c:	6019      	str	r1, [r3, #0]
 8016e9e:	e7d7      	b.n	8016e50 <_free_r+0x24>
 8016ea0:	d902      	bls.n	8016ea8 <_free_r+0x7c>
 8016ea2:	230c      	movs	r3, #12
 8016ea4:	602b      	str	r3, [r5, #0]
 8016ea6:	e7d3      	b.n	8016e50 <_free_r+0x24>
 8016ea8:	6820      	ldr	r0, [r4, #0]
 8016eaa:	1821      	adds	r1, r4, r0
 8016eac:	428a      	cmp	r2, r1
 8016eae:	bf04      	itt	eq
 8016eb0:	6811      	ldreq	r1, [r2, #0]
 8016eb2:	6852      	ldreq	r2, [r2, #4]
 8016eb4:	6062      	str	r2, [r4, #4]
 8016eb6:	bf04      	itt	eq
 8016eb8:	1809      	addeq	r1, r1, r0
 8016eba:	6021      	streq	r1, [r4, #0]
 8016ebc:	605c      	str	r4, [r3, #4]
 8016ebe:	e7c7      	b.n	8016e50 <_free_r+0x24>
 8016ec0:	bd38      	pop	{r3, r4, r5, pc}
 8016ec2:	bf00      	nop
 8016ec4:	2000435c 	.word	0x2000435c

08016ec8 <_realloc_r>:
 8016ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eca:	4607      	mov	r7, r0
 8016ecc:	4614      	mov	r4, r2
 8016ece:	460e      	mov	r6, r1
 8016ed0:	b921      	cbnz	r1, 8016edc <_realloc_r+0x14>
 8016ed2:	4611      	mov	r1, r2
 8016ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016ed8:	f7ff b8ae 	b.w	8016038 <_malloc_r>
 8016edc:	b922      	cbnz	r2, 8016ee8 <_realloc_r+0x20>
 8016ede:	f7ff ffa5 	bl	8016e2c <_free_r>
 8016ee2:	4625      	mov	r5, r4
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ee8:	f000 f848 	bl	8016f7c <_malloc_usable_size_r>
 8016eec:	42a0      	cmp	r0, r4
 8016eee:	d20f      	bcs.n	8016f10 <_realloc_r+0x48>
 8016ef0:	4621      	mov	r1, r4
 8016ef2:	4638      	mov	r0, r7
 8016ef4:	f7ff f8a0 	bl	8016038 <_malloc_r>
 8016ef8:	4605      	mov	r5, r0
 8016efa:	2800      	cmp	r0, #0
 8016efc:	d0f2      	beq.n	8016ee4 <_realloc_r+0x1c>
 8016efe:	4631      	mov	r1, r6
 8016f00:	4622      	mov	r2, r4
 8016f02:	f7fe fe9e 	bl	8015c42 <memcpy>
 8016f06:	4631      	mov	r1, r6
 8016f08:	4638      	mov	r0, r7
 8016f0a:	f7ff ff8f 	bl	8016e2c <_free_r>
 8016f0e:	e7e9      	b.n	8016ee4 <_realloc_r+0x1c>
 8016f10:	4635      	mov	r5, r6
 8016f12:	e7e7      	b.n	8016ee4 <_realloc_r+0x1c>

08016f14 <_read_r>:
 8016f14:	b538      	push	{r3, r4, r5, lr}
 8016f16:	4c07      	ldr	r4, [pc, #28]	; (8016f34 <_read_r+0x20>)
 8016f18:	4605      	mov	r5, r0
 8016f1a:	4608      	mov	r0, r1
 8016f1c:	4611      	mov	r1, r2
 8016f1e:	2200      	movs	r2, #0
 8016f20:	6022      	str	r2, [r4, #0]
 8016f22:	461a      	mov	r2, r3
 8016f24:	f7ea ff2e 	bl	8001d84 <_read>
 8016f28:	1c43      	adds	r3, r0, #1
 8016f2a:	d102      	bne.n	8016f32 <_read_r+0x1e>
 8016f2c:	6823      	ldr	r3, [r4, #0]
 8016f2e:	b103      	cbz	r3, 8016f32 <_read_r+0x1e>
 8016f30:	602b      	str	r3, [r5, #0]
 8016f32:	bd38      	pop	{r3, r4, r5, pc}
 8016f34:	2000b11c 	.word	0x2000b11c

08016f38 <_fstat_r>:
 8016f38:	b538      	push	{r3, r4, r5, lr}
 8016f3a:	4c07      	ldr	r4, [pc, #28]	; (8016f58 <_fstat_r+0x20>)
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	4605      	mov	r5, r0
 8016f40:	4608      	mov	r0, r1
 8016f42:	4611      	mov	r1, r2
 8016f44:	6023      	str	r3, [r4, #0]
 8016f46:	f7ea ff62 	bl	8001e0e <_fstat>
 8016f4a:	1c43      	adds	r3, r0, #1
 8016f4c:	d102      	bne.n	8016f54 <_fstat_r+0x1c>
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	b103      	cbz	r3, 8016f54 <_fstat_r+0x1c>
 8016f52:	602b      	str	r3, [r5, #0]
 8016f54:	bd38      	pop	{r3, r4, r5, pc}
 8016f56:	bf00      	nop
 8016f58:	2000b11c 	.word	0x2000b11c

08016f5c <_isatty_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4c06      	ldr	r4, [pc, #24]	; (8016f78 <_isatty_r+0x1c>)
 8016f60:	2300      	movs	r3, #0
 8016f62:	4605      	mov	r5, r0
 8016f64:	4608      	mov	r0, r1
 8016f66:	6023      	str	r3, [r4, #0]
 8016f68:	f7ea ff61 	bl	8001e2e <_isatty>
 8016f6c:	1c43      	adds	r3, r0, #1
 8016f6e:	d102      	bne.n	8016f76 <_isatty_r+0x1a>
 8016f70:	6823      	ldr	r3, [r4, #0]
 8016f72:	b103      	cbz	r3, 8016f76 <_isatty_r+0x1a>
 8016f74:	602b      	str	r3, [r5, #0]
 8016f76:	bd38      	pop	{r3, r4, r5, pc}
 8016f78:	2000b11c 	.word	0x2000b11c

08016f7c <_malloc_usable_size_r>:
 8016f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f80:	1f18      	subs	r0, r3, #4
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	bfbc      	itt	lt
 8016f86:	580b      	ldrlt	r3, [r1, r0]
 8016f88:	18c0      	addlt	r0, r0, r3
 8016f8a:	4770      	bx	lr

08016f8c <_init>:
 8016f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f8e:	bf00      	nop
 8016f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f92:	bc08      	pop	{r3}
 8016f94:	469e      	mov	lr, r3
 8016f96:	4770      	bx	lr

08016f98 <_fini>:
 8016f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f9a:	bf00      	nop
 8016f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f9e:	bc08      	pop	{r3}
 8016fa0:	469e      	mov	lr, r3
 8016fa2:	4770      	bx	lr
